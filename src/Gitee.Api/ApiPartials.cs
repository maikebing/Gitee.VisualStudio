//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace Gitee.Api
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "https://gitee.com/api";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>获取所有分支</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Branch>> GetV5ReposOwnerRepoBranchesAsync(string access_token, string owner, string repo)
        {
            return GetV5ReposOwnerRepoBranchesAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取所有分支</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Branch>> GetV5ReposOwnerRepoBranchesAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/branches?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Branch>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建分支</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="refs">起点名称, 默认：master</param>
        /// <param name="branch_name">新创建的分支名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CompleteBranch> PostV5ReposOwnerRepoBranchesAsync(string access_token, string owner, string repo, string refs, string branch_name)
        {
            return PostV5ReposOwnerRepoBranchesAsync(access_token, owner, repo, refs, branch_name, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建分支</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="refs">起点名称, 默认：master</param>
        /// <param name="branch_name">新创建的分支名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CompleteBranch> PostV5ReposOwnerRepoBranchesAsync(string access_token, string owner, string repo, string refs, string branch_name, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/branches");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (refs == null)
                        throw new System.ArgumentNullException("refs");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(refs, System.Globalization.CultureInfo.InvariantCulture)), "refs");
                    }
                    if (branch_name == null)
                        throw new System.ArgumentNullException("branch_name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(branch_name, System.Globalization.CultureInfo.InvariantCulture)), "branch_name");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompleteBranch>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取单个分支</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="branch">分支名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CompleteBranch> GetV5ReposOwnerRepoBranchesBranchAsync(string access_token, string owner, string repo, string branch)
        {
            return GetV5ReposOwnerRepoBranchesBranchAsync(access_token, owner, repo, branch, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取单个分支</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="branch">分支名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CompleteBranch> GetV5ReposOwnerRepoBranchesBranchAsync(string access_token, string owner, string repo, string branch, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (branch == null)
                throw new System.ArgumentNullException("branch");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/branches/{branch}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{branch}", System.Uri.EscapeDataString(ConvertToString(branch, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompleteBranch>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>设置分支保护</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="branch">分支名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CompleteBranch> PutV5ReposOwnerRepoBranchesBranchProtectionAsync(string access_token, string owner, string repo, string branch)
        {
            return PutV5ReposOwnerRepoBranchesBranchProtectionAsync(access_token, owner, repo, branch, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>设置分支保护</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="branch">分支名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CompleteBranch> PutV5ReposOwnerRepoBranchesBranchProtectionAsync(string access_token, string owner, string repo, string branch, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (branch == null)
                throw new System.ArgumentNullException("branch");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/branches/{branch}/protection");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{branch}", System.Uri.EscapeDataString(ConvertToString(branch, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompleteBranch>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>取消保护分支的设置</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="branch">分支名称</param>
        /// <returns>取消保护分支的设置</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoBranchesBranchProtectionAsync(string access_token, string owner, string repo, string branch)
        {
            return DeleteV5ReposOwnerRepoBranchesBranchProtectionAsync(access_token, owner, repo, branch, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>取消保护分支的设置</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="branch">分支名称</param>
        /// <returns>取消保护分支的设置</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoBranchesBranchProtectionAsync(string access_token, string owner, string repo, string branch, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (branch == null)
                throw new System.ArgumentNullException("branch");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/branches/{branch}/protection?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{branch}", System.Uri.EscapeDataString(ConvertToString(branch, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>仓库的所有提交</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sha">提交起始的SHA值或者分支名. 默认: 仓库的默认分支</param>
        /// <param name="path">包含该文件的提交</param>
        /// <param name="author">提交作者的邮箱或个人空间地址(username/login)</param>
        /// <param name="since">提交的起始时间，时间格式为 ISO 8601</param>
        /// <param name="until">提交的最后时间，时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RepoCommit>> GetV5ReposOwnerRepoCommitsAsync(string access_token, string owner, string repo, string sha, string path, string author, string since, string until, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoCommitsAsync(access_token, owner, repo, sha, path, author, since, until, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>仓库的所有提交</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sha">提交起始的SHA值或者分支名. 默认: 仓库的默认分支</param>
        /// <param name="path">包含该文件的提交</param>
        /// <param name="author">提交作者的邮箱或个人空间地址(username/login)</param>
        /// <param name="since">提交的起始时间，时间格式为 ISO 8601</param>
        /// <param name="until">提交的最后时间，时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RepoCommit>> GetV5ReposOwnerRepoCommitsAsync(string access_token, string owner, string repo, string sha, string path, string author, string since, string until, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/commits?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sha != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sha") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sha, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (path != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("path") + "=").Append(System.Uri.EscapeDataString(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (author != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("author") + "=").Append(System.Uri.EscapeDataString(ConvertToString(author, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (until != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("until") + "=").Append(System.Uri.EscapeDataString(ConvertToString(until, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RepoCommit>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>仓库的某个提交</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sha">提交的SHA值或者分支名</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RepoCommit> GetV5ReposOwnerRepoCommitsShaAsync(string access_token, string owner, string repo, string sha)
        {
            return GetV5ReposOwnerRepoCommitsShaAsync(access_token, owner, repo, sha, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>仓库的某个提交</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sha">提交的SHA值或者分支名</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RepoCommit> GetV5ReposOwnerRepoCommitsShaAsync(string access_token, string owner, string repo, string sha, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (sha == null)
                throw new System.ArgumentNullException("sha");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/commits/{sha}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sha}", System.Uri.EscapeDataString(ConvertToString(sha, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RepoCommit>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>两个Commits之间对比的版本差异</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="@base">Commit提交的SHA值或者分支名作为对比起点</param>
        /// <param name="head">Commit提交的SHA值或者分支名作为对比终点</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Compare> GetV5ReposOwnerRepoCompareBase...HeadAsync(string access_token, string owner, string repo, string @base, string head)
        {
            return GetV5ReposOwnerRepoCompareBase...HeadAsync(access_token, owner, repo, @base, head, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>两个Commits之间对比的版本差异</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="@base">Commit提交的SHA值或者分支名作为对比起点</param>
        /// <param name="head">Commit提交的SHA值或者分支名作为对比终点</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Compare> GetV5ReposOwnerRepoCompareBase...HeadAsync(string access_token, string owner, string repo, string @base, string head, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (@base == null)
                throw new System.ArgumentNullException("@base");
    
            if (head == null)
                throw new System.ArgumentNullException("head");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/compare/{base}...{head}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{base}", System.Uri.EscapeDataString(ConvertToString(@base, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{head}", System.Uri.EscapeDataString(ConvertToString(head, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Compare>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库已部署的公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SSHKey>> GetV5ReposOwnerRepoKeysAsync(string access_token, string owner, string repo, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoKeysAsync(access_token, owner, repo, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库已部署的公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SSHKey>> GetV5ReposOwnerRepoKeysAsync(string access_token, string owner, string repo, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/keys?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SSHKey>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>为仓库添加公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="key">公钥内容</param>
        /// <param name="title">公钥名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SSHKey> PostV5ReposOwnerRepoKeysAsync(string access_token, string owner, string repo, string key, string title)
        {
            return PostV5ReposOwnerRepoKeysAsync(access_token, owner, repo, key, title, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>为仓库添加公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="key">公钥内容</param>
        /// <param name="title">公钥名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SSHKey> PostV5ReposOwnerRepoKeysAsync(string access_token, string owner, string repo, string key, string title, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/keys");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (key == null)
                        throw new System.ArgumentNullException("key");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture)), "key");
                    }
                    if (title == null)
                        throw new System.ArgumentNullException("title");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SSHKey>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库可部署的公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SSHKeyBasic>> GetV5ReposOwnerRepoKeysAvailableAsync(string access_token, string owner, string repo, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoKeysAvailableAsync(access_token, owner, repo, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库可部署的公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SSHKeyBasic>> GetV5ReposOwnerRepoKeysAvailableAsync(string access_token, string owner, string repo, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/keys/available?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SSHKeyBasic>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>启用仓库公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">公钥 ID</param>
        /// <returns>已启用</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutV5ReposOwnerRepoKeysEnableIdAsync(string access_token, string owner, string repo, int id)
        {
            return PutV5ReposOwnerRepoKeysEnableIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>启用仓库公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">公钥 ID</param>
        /// <returns>已启用</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutV5ReposOwnerRepoKeysEnableIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/keys/enable/{id}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u542f\u7528\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>停用仓库公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">公钥 ID</param>
        /// <returns>已停用</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoKeysEnableIdAsync(string access_token, string owner, string repo, int id)
        {
            return DeleteV5ReposOwnerRepoKeysEnableIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>停用仓库公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">公钥 ID</param>
        /// <returns>已停用</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoKeysEnableIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/keys/enable/{id}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u516c\u94a5", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库的单个公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">公钥 ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SSHKey> GetV5ReposOwnerRepoKeysIdAsync(string access_token, string owner, string repo, int id)
        {
            return GetV5ReposOwnerRepoKeysIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库的单个公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">公钥 ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SSHKey> GetV5ReposOwnerRepoKeysIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/keys/{id}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SSHKey>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除一个仓库公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">公钥 ID</param>
        /// <returns>删除一个仓库公钥</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoKeysIdAsync(string access_token, string owner, string repo, int id)
        {
            return DeleteV5ReposOwnerRepoKeysIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除一个仓库公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">公钥 ID</param>
        /// <returns>删除一个仓库公钥</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoKeysIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/keys/{id}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库README</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="@ref">分支、tag或commit。默认: 仓库的默认分支(通常是master)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Content> GetV5ReposOwnerRepoReadmeAsync(string access_token, string owner, string repo, string @ref)
        {
            return GetV5ReposOwnerRepoReadmeAsync(access_token, owner, repo, @ref, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库README</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="@ref">分支、tag或commit。默认: 仓库的默认分支(通常是master)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Content> GetV5ReposOwnerRepoReadmeAsync(string access_token, string owner, string repo, string @ref, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/readme?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (@ref != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ref") + "=").Append(System.Uri.EscapeDataString(ConvertToString(@ref, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Content>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库具体路径下的内容</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="path">文件的路径</param>
        /// <param name="@ref">分支、tag或commit。默认: 仓库的默认分支(通常是master)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Content>> GetV5ReposOwnerRepoContents(Path)Async(string access_token, string owner, string repo, string path, string @ref)
        {
            return GetV5ReposOwnerRepoContents(Path)Async(access_token, owner, repo, path, @ref, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库具体路径下的内容</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="path">文件的路径</param>
        /// <param name="@ref">分支、tag或commit。默认: 仓库的默认分支(通常是master)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Content>> GetV5ReposOwnerRepoContents(Path)Async(string access_token, string owner, string repo, string path, string @ref, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (path == null)
                throw new System.ArgumentNullException("path");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/contents(/{path})?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{path}", System.Uri.EscapeDataString(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (@ref != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ref") + "=").Append(System.Uri.EscapeDataString(ConvertToString(@ref, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Content>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>新建文件</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="path">文件的路径</param>
        /// <param name="content">文件内容, 要用 base64 编码</param>
        /// <param name="message">提交信息</param>
        /// <param name="branch">分支名称。默认为仓库对默认分支</param>
        /// <param name="committername">Committer的名字，默认为当前用户的名字</param>
        /// <param name="committeremail">Committer的邮箱，默认为当前用户的邮箱</param>
        /// <param name="authorname">Author的名字，默认为当前用户的名字</param>
        /// <param name="authoremail">Author的邮箱，默认为当前用户的邮箱</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CommitContent> PostV5ReposOwnerRepoContentsPathAsync(string access_token, string owner, string repo, string path, string content, string message, string branch, string committername, string committeremail, string authorname, string authoremail)
        {
            return PostV5ReposOwnerRepoContentsPathAsync(access_token, owner, repo, path, content, message, branch, committername, committeremail, authorname, authoremail, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>新建文件</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="path">文件的路径</param>
        /// <param name="content">文件内容, 要用 base64 编码</param>
        /// <param name="message">提交信息</param>
        /// <param name="branch">分支名称。默认为仓库对默认分支</param>
        /// <param name="committername">Committer的名字，默认为当前用户的名字</param>
        /// <param name="committeremail">Committer的邮箱，默认为当前用户的邮箱</param>
        /// <param name="authorname">Author的名字，默认为当前用户的名字</param>
        /// <param name="authoremail">Author的邮箱，默认为当前用户的邮箱</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CommitContent> PostV5ReposOwnerRepoContentsPathAsync(string access_token, string owner, string repo, string path, string content, string message, string branch, string committername, string committeremail, string authorname, string authoremail, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (path == null)
                throw new System.ArgumentNullException("path");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/contents/{path}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{path}", System.Uri.EscapeDataString(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (content == null)
                        throw new System.ArgumentNullException("content");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(content, System.Globalization.CultureInfo.InvariantCulture)), "content");
                    }
                    if (message == null)
                        throw new System.ArgumentNullException("message");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture)), "message");
                    }
                    if (branch != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(branch, System.Globalization.CultureInfo.InvariantCulture)), "branch");
                    }
                    if (committername != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(committername, System.Globalization.CultureInfo.InvariantCulture)), "committer[name]");
                    }
                    if (committeremail != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(committeremail, System.Globalization.CultureInfo.InvariantCulture)), "committer[email]");
                    }
                    if (authorname != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(authorname, System.Globalization.CultureInfo.InvariantCulture)), "author[name]");
                    }
                    if (authoremail != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(authoremail, System.Globalization.CultureInfo.InvariantCulture)), "author[email]");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CommitContent>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新文件</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="path">文件的路径</param>
        /// <param name="content">文件内容, 要用 base64 编码</param>
        /// <param name="sha">文件的 Blob SHA，可通过 [获取仓库具体路径下的内容] API 获取</param>
        /// <param name="message">提交信息</param>
        /// <param name="branch">分支名称。默认为仓库对默认分支</param>
        /// <param name="committername">Committer的名字，默认为当前用户的名字</param>
        /// <param name="committeremail">Committer的邮箱，默认为当前用户的邮箱</param>
        /// <param name="authorname">Author的名字，默认为当前用户的名字</param>
        /// <param name="authoremail">Author的邮箱，默认为当前用户的邮箱</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CommitContent> PutV5ReposOwnerRepoContentsPathAsync(string access_token, string owner, string repo, string path, string content, string sha, string message, string branch, string committername, string committeremail, string authorname, string authoremail)
        {
            return PutV5ReposOwnerRepoContentsPathAsync(access_token, owner, repo, path, content, sha, message, branch, committername, committeremail, authorname, authoremail, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新文件</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="path">文件的路径</param>
        /// <param name="content">文件内容, 要用 base64 编码</param>
        /// <param name="sha">文件的 Blob SHA，可通过 [获取仓库具体路径下的内容] API 获取</param>
        /// <param name="message">提交信息</param>
        /// <param name="branch">分支名称。默认为仓库对默认分支</param>
        /// <param name="committername">Committer的名字，默认为当前用户的名字</param>
        /// <param name="committeremail">Committer的邮箱，默认为当前用户的邮箱</param>
        /// <param name="authorname">Author的名字，默认为当前用户的名字</param>
        /// <param name="authoremail">Author的邮箱，默认为当前用户的邮箱</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CommitContent> PutV5ReposOwnerRepoContentsPathAsync(string access_token, string owner, string repo, string path, string content, string sha, string message, string branch, string committername, string committeremail, string authorname, string authoremail, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (path == null)
                throw new System.ArgumentNullException("path");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/contents/{path}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{path}", System.Uri.EscapeDataString(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (content == null)
                        throw new System.ArgumentNullException("content");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(content, System.Globalization.CultureInfo.InvariantCulture)), "content");
                    }
                    if (sha == null)
                        throw new System.ArgumentNullException("sha");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sha, System.Globalization.CultureInfo.InvariantCulture)), "sha");
                    }
                    if (message == null)
                        throw new System.ArgumentNullException("message");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture)), "message");
                    }
                    if (branch != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(branch, System.Globalization.CultureInfo.InvariantCulture)), "branch");
                    }
                    if (committername != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(committername, System.Globalization.CultureInfo.InvariantCulture)), "committer[name]");
                    }
                    if (committeremail != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(committeremail, System.Globalization.CultureInfo.InvariantCulture)), "committer[email]");
                    }
                    if (authorname != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(authorname, System.Globalization.CultureInfo.InvariantCulture)), "author[name]");
                    }
                    if (authoremail != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(authoremail, System.Globalization.CultureInfo.InvariantCulture)), "author[email]");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CommitContent>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除文件</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="path">文件的路径</param>
        /// <param name="sha">文件的 Blob SHA，可通过 [获取仓库具体路径下的内容] API 获取</param>
        /// <param name="message">提交信息</param>
        /// <param name="branch">分支名称。默认为仓库对默认分支</param>
        /// <param name="committername">Committer的名字，默认为当前用户的名字</param>
        /// <param name="committeremail">Committer的邮箱，默认为当前用户的邮箱</param>
        /// <param name="authorname">Author的名字，默认为当前用户的名字</param>
        /// <param name="authoremail">Author的邮箱，默认为当前用户的邮箱</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CommitContent> DeleteV5ReposOwnerRepoContentsPathAsync(string access_token, string owner, string repo, string path, string sha, string message, string branch, string committername, string committeremail, string authorname, string authoremail)
        {
            return DeleteV5ReposOwnerRepoContentsPathAsync(access_token, owner, repo, path, sha, message, branch, committername, committeremail, authorname, authoremail, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除文件</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="path">文件的路径</param>
        /// <param name="sha">文件的 Blob SHA，可通过 [获取仓库具体路径下的内容] API 获取</param>
        /// <param name="message">提交信息</param>
        /// <param name="branch">分支名称。默认为仓库对默认分支</param>
        /// <param name="committername">Committer的名字，默认为当前用户的名字</param>
        /// <param name="committeremail">Committer的邮箱，默认为当前用户的邮箱</param>
        /// <param name="authorname">Author的名字，默认为当前用户的名字</param>
        /// <param name="authoremail">Author的邮箱，默认为当前用户的邮箱</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CommitContent> DeleteV5ReposOwnerRepoContentsPathAsync(string access_token, string owner, string repo, string path, string sha, string message, string branch, string committername, string committeremail, string authorname, string authoremail, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (path == null)
                throw new System.ArgumentNullException("path");
    
            if (sha == null)
                throw new System.ArgumentNullException("sha");
    
            if (message == null)
                throw new System.ArgumentNullException("message");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/contents/{path}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{path}", System.Uri.EscapeDataString(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sha") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sha, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("message") + "=").Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (branch != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("branch") + "=").Append(System.Uri.EscapeDataString(ConvertToString(branch, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (committername != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("committer[name]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(committername, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (committeremail != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("committer[email]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(committeremail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (authorname != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("author[name]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(authorname, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (authoremail != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("author[email]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(authoremail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CommitContent>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取文件Blob</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sha">文件的 Blob SHA，可通过 [获取仓库具体路径下的内容] API 获取</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Blob> GetV5ReposOwnerRepoGitBlobsShaAsync(string access_token, string owner, string repo, string sha)
        {
            return GetV5ReposOwnerRepoGitBlobsShaAsync(access_token, owner, repo, sha, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取文件Blob</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sha">文件的 Blob SHA，可通过 [获取仓库具体路径下的内容] API 获取</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Blob> GetV5ReposOwnerRepoGitBlobsShaAsync(string access_token, string owner, string repo, string sha, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (sha == null)
                throw new System.ArgumentNullException("sha");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/git/blobs/{sha}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sha}", System.Uri.EscapeDataString(ConvertToString(sha, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Blob>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取目录Tree</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sha">可以是分支名(如master)、Commit或者目录Tree的SHA值</param>
        /// <param name="recursive">赋值为1递归获取目录</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Tree> GetV5ReposOwnerRepoGitTreesShaAsync(string access_token, string owner, string repo, string sha, int? recursive)
        {
            return GetV5ReposOwnerRepoGitTreesShaAsync(access_token, owner, repo, sha, recursive, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取目录Tree</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sha">可以是分支名(如master)、Commit或者目录Tree的SHA值</param>
        /// <param name="recursive">赋值为1递归获取目录</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Tree> GetV5ReposOwnerRepoGitTreesShaAsync(string access_token, string owner, string repo, string sha, int? recursive, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (sha == null)
                throw new System.ArgumentNullException("sha");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/git/trees/{sha}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sha}", System.Uri.EscapeDataString(ConvertToString(sha, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recursive != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recursive") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recursive, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Tree>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("SHA\u503c\u5fc5\u987b\u4e3aCommit\u6216Tree\u7684", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取 Gitee 指数</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GiteeMetrics> GetV5ReposOwnerRepoGitGiteeMetricsAsync(string access_token, string owner, string repo)
        {
            return GetV5ReposOwnerRepoGitGiteeMetricsAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取 Gitee 指数</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GiteeMetrics> GetV5ReposOwnerRepoGitGiteeMetricsAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/git/gitee_metrics?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GiteeMetrics>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>仓库的所有Issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="state">Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="sort">排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</param>
        /// <param name="direction">排序方式: 升序(asc)，降序(desc)。默认: desc</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="schedule">计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80</param>
        /// <param name="deadline">计划截止日期，格式同上</param>
        /// <param name="created_at">任务创建时间，格式同上</param>
        /// <param name="finished_at">任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上</param>
        /// <param name="milestone">根据里程碑标题。none为没里程碑的，*为所有带里程碑的</param>
        /// <param name="assignee">用户的username。 none为没指派者, *为所有带有指派者的</param>
        /// <param name="creator">创建Issues的用户username</param>
        /// <param name="program">所属项目名称。none为没有所属项目，*为所有带所属项目的</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5ReposOwnerRepoIssuesAsync(string access_token, string owner, string repo, State? state, string labels, Sort? sort, Direction? direction, string since, int? page, int? per_page, string schedule, string deadline, string created_at, string finished_at, string milestone, string assignee, string creator, string program)
        {
            return GetV5ReposOwnerRepoIssuesAsync(access_token, owner, repo, state, labels, sort, direction, since, page, per_page, schedule, deadline, created_at, finished_at, milestone, assignee, creator, program, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>仓库的所有Issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="state">Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="sort">排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</param>
        /// <param name="direction">排序方式: 升序(asc)，降序(desc)。默认: desc</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="schedule">计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80</param>
        /// <param name="deadline">计划截止日期，格式同上</param>
        /// <param name="created_at">任务创建时间，格式同上</param>
        /// <param name="finished_at">任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上</param>
        /// <param name="milestone">根据里程碑标题。none为没里程碑的，*为所有带里程碑的</param>
        /// <param name="assignee">用户的username。 none为没指派者, *为所有带有指派者的</param>
        /// <param name="creator">创建Issues的用户username</param>
        /// <param name="program">所属项目名称。none为没有所属项目，*为所有带所属项目的</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5ReposOwnerRepoIssuesAsync(string access_token, string owner, string repo, State? state, string labels, Sort? sort, Direction? direction, string since, int? page, int? per_page, string schedule, string deadline, string created_at, string finished_at, string milestone, string assignee, string creator, string program, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/issues?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (labels != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("labels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(labels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (schedule != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("schedule") + "=").Append(System.Uri.EscapeDataString(ConvertToString(schedule, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deadline != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deadline") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deadline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (created_at != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at") + "=").Append(System.Uri.EscapeDataString(ConvertToString(created_at, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (finished_at != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("finished_at") + "=").Append(System.Uri.EscapeDataString(ConvertToString(finished_at, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (milestone != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("milestone") + "=").Append(System.Uri.EscapeDataString(ConvertToString(milestone, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (assignee != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("assignee") + "=").Append(System.Uri.EscapeDataString(ConvertToString(assignee, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creator != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("creator") + "=").Append(System.Uri.EscapeDataString(ConvertToString(creator, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (program != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("program") + "=").Append(System.Uri.EscapeDataString(ConvertToString(program, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Issue>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>仓库的某个Issue</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Issue> GetV5ReposOwnerRepoIssuesNumberAsync(string access_token, string owner, string repo, string number)
        {
            return GetV5ReposOwnerRepoIssuesNumberAsync(access_token, owner, repo, number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>仓库的某个Issue</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Issue> GetV5ReposOwnerRepoIssuesNumberAsync(string access_token, string owner, string repo, string number, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/issues/{number}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Issue>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建Issue</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="title">Issue标题</param>
        /// <param name="issue_type">企业自定义任务类型，非企业默认任务类型为“任务”</param>
        /// <param name="body">Issue描述</param>
        /// <param name="assignee">Issue负责人的个人空间地址</param>
        /// <param name="collaborators">Issue协助者的个人空间地址, 以 , 分隔</param>
        /// <param name="milestone">里程碑序号</param>
        /// <param name="labels">用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance</param>
        /// <param name="program">项目ID</param>
        /// <param name="security_hole">是否是私有issue(默认为false)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Issue> PostV5ReposOwnerIssuesAsync(string access_token, string owner, string repo, string title, string issue_type, string body, string assignee, string collaborators, int? milestone, string labels, string program, bool? security_hole)
        {
            return PostV5ReposOwnerIssuesAsync(access_token, owner, repo, title, issue_type, body, assignee, collaborators, milestone, labels, program, security_hole, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建Issue</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="title">Issue标题</param>
        /// <param name="issue_type">企业自定义任务类型，非企业默认任务类型为“任务”</param>
        /// <param name="body">Issue描述</param>
        /// <param name="assignee">Issue负责人的个人空间地址</param>
        /// <param name="collaborators">Issue协助者的个人空间地址, 以 , 分隔</param>
        /// <param name="milestone">里程碑序号</param>
        /// <param name="labels">用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance</param>
        /// <param name="program">项目ID</param>
        /// <param name="security_hole">是否是私有issue(默认为false)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Issue> PostV5ReposOwnerIssuesAsync(string access_token, string owner, string repo, string title, string issue_type, string body, string assignee, string collaborators, int? milestone, string labels, string program, bool? security_hole, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/issues");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (repo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)), "repo");
                    }
                    if (title == null)
                        throw new System.ArgumentNullException("title");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (issue_type != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(issue_type, System.Globalization.CultureInfo.InvariantCulture)), "issue_type");
                    }
                    if (body != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    if (assignee != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(assignee, System.Globalization.CultureInfo.InvariantCulture)), "assignee");
                    }
                    if (collaborators != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(collaborators, System.Globalization.CultureInfo.InvariantCulture)), "collaborators");
                    }
                    if (milestone != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(milestone, System.Globalization.CultureInfo.InvariantCulture)), "milestone");
                    }
                    if (labels != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(labels, System.Globalization.CultureInfo.InvariantCulture)), "labels");
                    }
                    if (program != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(program, System.Globalization.CultureInfo.InvariantCulture)), "program");
                    }
                    if (security_hole != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(security_hole, System.Globalization.CultureInfo.InvariantCulture)), "security_hole");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Issue>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新Issue</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="title">Issue标题</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="state">Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的）</param>
        /// <param name="body">Issue描述</param>
        /// <param name="assignee">Issue负责人的个人空间地址</param>
        /// <param name="collaborators">Issue协助者的个人空间地址, 以 , 分隔</param>
        /// <param name="milestone">里程碑序号</param>
        /// <param name="labels">用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance</param>
        /// <param name="program">项目ID</param>
        /// <param name="security_hole">是否是私有issue(默认为false)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Issue> PatchV5ReposOwnerIssuesNumberAsync(string access_token, string owner, string repo, string title, string number, State2? state, string body, string assignee, string collaborators, int? milestone, string labels, string program, bool? security_hole)
        {
            return PatchV5ReposOwnerIssuesNumberAsync(access_token, owner, repo, title, number, state, body, assignee, collaborators, milestone, labels, program, security_hole, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新Issue</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="title">Issue标题</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="state">Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的）</param>
        /// <param name="body">Issue描述</param>
        /// <param name="assignee">Issue负责人的个人空间地址</param>
        /// <param name="collaborators">Issue协助者的个人空间地址, 以 , 分隔</param>
        /// <param name="milestone">里程碑序号</param>
        /// <param name="labels">用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance</param>
        /// <param name="program">项目ID</param>
        /// <param name="security_hole">是否是私有issue(默认为false)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Issue> PatchV5ReposOwnerIssuesNumberAsync(string access_token, string owner, string repo, string title, string number, State2? state, string body, string assignee, string collaborators, int? milestone, string labels, string program, bool? security_hole, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/issues/{number}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (repo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)), "repo");
                    }
                    if (title != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (state != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture)), "state");
                    }
                    if (body != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    if (assignee != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(assignee, System.Globalization.CultureInfo.InvariantCulture)), "assignee");
                    }
                    if (collaborators != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(collaborators, System.Globalization.CultureInfo.InvariantCulture)), "collaborators");
                    }
                    if (milestone != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(milestone, System.Globalization.CultureInfo.InvariantCulture)), "milestone");
                    }
                    if (labels != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(labels, System.Globalization.CultureInfo.InvariantCulture)), "labels");
                    }
                    if (program != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(program, System.Globalization.CultureInfo.InvariantCulture)), "program");
                    }
                    if (security_hole != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(security_hole, System.Globalization.CultureInfo.InvariantCulture)), "security_hole");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Issue>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取 issue 关联的 Pull Requests</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequest>> GetV5ReposOwnerIssuesNumberPullRequestsAsync(string access_token, string owner, string repo, string number)
        {
            return GetV5ReposOwnerIssuesNumberPullRequestsAsync(access_token, owner, repo, number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取 issue 关联的 Pull Requests</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequest>> GetV5ReposOwnerIssuesNumberPullRequestsAsync(string access_token, string owner, string repo, string number, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/issues/{number}/pull_requests?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (repo != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("repo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PullRequest>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取某个Issue下的操作日志</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="sort">按递增(asc)或递减(desc)排序，默认：递减</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OperateLog>> GetV5ReposOwnerIssuesNumberOperateLogsAsync(string access_token, string owner, string repo, string number, Sort2? sort)
        {
            return GetV5ReposOwnerIssuesNumberOperateLogsAsync(access_token, owner, repo, number, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取某个Issue下的操作日志</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="sort">按递增(asc)或递减(desc)排序，默认：递减</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OperateLog>> GetV5ReposOwnerIssuesNumberOperateLogsAsync(string access_token, string owner, string repo, string number, Sort2? sort, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/issues/{number}/operate_logs?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (repo != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("repo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OperateLog>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库所有任务标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Label>> GetV5ReposOwnerRepoLabelsAsync(string access_token, string owner, string repo)
        {
            return GetV5ReposOwnerRepoLabelsAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库所有任务标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Label>> GetV5ReposOwnerRepoLabelsAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/labels?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Label>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建仓库任务标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="name">标签名称</param>
        /// <param name="color">标签颜色。为6位的数字，如: 000000</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Label> PostV5ReposOwnerRepoLabelsAsync(string access_token, string owner, string repo, string name, string color)
        {
            return PostV5ReposOwnerRepoLabelsAsync(access_token, owner, repo, name, color, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建仓库任务标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="name">标签名称</param>
        /// <param name="color">标签颜色。为6位的数字，如: 000000</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Label> PostV5ReposOwnerRepoLabelsAsync(string access_token, string owner, string repo, string name, string color, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/labels");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (color == null)
                        throw new System.ArgumentNullException("color");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(color, System.Globalization.CultureInfo.InvariantCulture)), "color");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>根据标签名称获取单个标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="name">标签名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Label> GetV5ReposOwnerRepoLabelsNameAsync(string access_token, string owner, string repo, string name)
        {
            return GetV5ReposOwnerRepoLabelsNameAsync(access_token, owner, repo, name, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据标签名称获取单个标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="name">标签名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Label> GetV5ReposOwnerRepoLabelsNameAsync(string access_token, string owner, string repo, string name, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/labels/{name}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除一个仓库任务标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="name">标签名称</param>
        /// <returns>删除一个仓库任务标签</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoLabelsNameAsync(string access_token, string owner, string repo, string name)
        {
            return DeleteV5ReposOwnerRepoLabelsNameAsync(access_token, owner, repo, name, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除一个仓库任务标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="name">标签名称</param>
        /// <returns>删除一个仓库任务标签</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoLabelsNameAsync(string access_token, string owner, string repo, string name, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/labels/{name}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新一个仓库任务标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="original_name">标签原有名称</param>
        /// <param name="name">标签新名称</param>
        /// <param name="color">标签新颜色</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Label> PatchV5ReposOwnerRepoLabelsOriginalNameAsync(string access_token, string owner, string repo, string original_name, string name, string color)
        {
            return PatchV5ReposOwnerRepoLabelsOriginalNameAsync(access_token, owner, repo, original_name, name, color, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新一个仓库任务标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="original_name">标签原有名称</param>
        /// <param name="name">标签新名称</param>
        /// <param name="color">标签新颜色</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Label> PatchV5ReposOwnerRepoLabelsOriginalNameAsync(string access_token, string owner, string repo, string original_name, string name, string color, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (original_name == null)
                throw new System.ArgumentNullException("original_name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/labels/{original_name}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{original_name}", System.Uri.EscapeDataString(ConvertToString(original_name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (name != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (color != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(color, System.Globalization.CultureInfo.InvariantCulture)), "color");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库任务的所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Label>> GetV5ReposOwnerRepoIssuesNumberLabelsAsync(string access_token, string owner, string repo, string number)
        {
            return GetV5ReposOwnerRepoIssuesNumberLabelsAsync(access_token, owner, repo, number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库任务的所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Label>> GetV5ReposOwnerRepoIssuesNumberLabelsAsync(string access_token, string owner, string repo, string number, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/issues/{number}/labels?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Label>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建Issue标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="body">标签名数组，如: ["feat", "bug"]</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Label> PostV5ReposOwnerRepoIssuesNumberLabelsAsync(string access_token, string owner, string repo, string number, System.Collections.Generic.IEnumerable<string> body)
        {
            return PostV5ReposOwnerRepoIssuesNumberLabelsAsync(access_token, owner, repo, number, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建Issue标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="body">标签名数组，如: ["feat", "bug"]</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Label> PostV5ReposOwnerRepoIssuesNumberLabelsAsync(string access_token, string owner, string repo, string number, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/issues/{number}/labels");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>替换Issue所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="body">标签名数组，如: ["feat", "bug"]</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Label> PutV5ReposOwnerRepoIssuesNumberLabelsAsync(string access_token, string owner, string repo, string number, System.Collections.Generic.IEnumerable<string> body)
        {
            return PutV5ReposOwnerRepoIssuesNumberLabelsAsync(access_token, owner, repo, number, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>替换Issue所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="body">标签名数组，如: ["feat", "bug"]</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Label> PutV5ReposOwnerRepoIssuesNumberLabelsAsync(string access_token, string owner, string repo, string number, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/issues/{number}/labels");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除Issue所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <returns>删除Issue所有标签</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoIssuesNumberLabelsAsync(string access_token, string owner, string repo, string number)
        {
            return DeleteV5ReposOwnerRepoIssuesNumberLabelsAsync(access_token, owner, repo, number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除Issue所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <returns>删除Issue所有标签</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoIssuesNumberLabelsAsync(string access_token, string owner, string repo, string number, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/issues/{number}/labels?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除Issue标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="name">标签名称</param>
        /// <returns>删除Issue标签</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoIssuesNumberLabelsNameAsync(string access_token, string owner, string repo, string number, string name)
        {
            return DeleteV5ReposOwnerRepoIssuesNumberLabelsNameAsync(access_token, owner, repo, number, name, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除Issue标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="name">标签名称</param>
        /// <returns>删除Issue标签</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoIssuesNumberLabelsNameAsync(string access_token, string owner, string repo, string number, string name, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/issues/{number}/labels/{name}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库所有里程碑</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="state">里程碑状态: open, closed, all。默认: open</param>
        /// <param name="sort">排序方式: due_on</param>
        /// <param name="direction">升序(asc)或是降序(desc)。默认: asc</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Milestone>> GetV5ReposOwnerRepoMilestonesAsync(string access_token, string owner, string repo, State3? state, Sort3? sort, string direction, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoMilestonesAsync(access_token, owner, repo, state, sort, direction, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库所有里程碑</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="state">里程碑状态: open, closed, all。默认: open</param>
        /// <param name="sort">排序方式: due_on</param>
        /// <param name="direction">升序(asc)或是降序(desc)。默认: asc</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Milestone>> GetV5ReposOwnerRepoMilestonesAsync(string access_token, string owner, string repo, State3? state, Sort3? sort, string direction, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/milestones?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Milestone>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建仓库里程碑</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="title">里程碑标题</param>
        /// <param name="state">里程碑状态: open, closed, all。默认: open</param>
        /// <param name="description">里程碑具体描述</param>
        /// <param name="due_on">里程碑的截止日期</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Milestone> PostV5ReposOwnerRepoMilestonesAsync(string access_token, string owner, string repo, string title, State4? state, string description, string due_on)
        {
            return PostV5ReposOwnerRepoMilestonesAsync(access_token, owner, repo, title, state, description, due_on, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建仓库里程碑</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="title">里程碑标题</param>
        /// <param name="state">里程碑状态: open, closed, all。默认: open</param>
        /// <param name="description">里程碑具体描述</param>
        /// <param name="due_on">里程碑的截止日期</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Milestone> PostV5ReposOwnerRepoMilestonesAsync(string access_token, string owner, string repo, string title, State4? state, string description, string due_on, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/milestones");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (title == null)
                        throw new System.ArgumentNullException("title");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (state != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture)), "state");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (due_on == null)
                        throw new System.ArgumentNullException("due_on");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(due_on, System.Globalization.CultureInfo.InvariantCulture)), "due_on");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Milestone>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库单个里程碑</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">里程碑序号(id)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Milestone> GetV5ReposOwnerRepoMilestonesNumberAsync(string access_token, string owner, string repo, int number)
        {
            return GetV5ReposOwnerRepoMilestonesNumberAsync(access_token, owner, repo, number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库单个里程碑</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">里程碑序号(id)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Milestone> GetV5ReposOwnerRepoMilestonesNumberAsync(string access_token, string owner, string repo, int number, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/milestones/{number}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Milestone>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新仓库里程碑</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">里程碑序号(id)</param>
        /// <param name="title">里程碑标题</param>
        /// <param name="state">里程碑状态: open, closed, all。默认: open</param>
        /// <param name="description">里程碑具体描述</param>
        /// <param name="due_on">里程碑的截止日期</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Milestone> PatchV5ReposOwnerRepoMilestonesNumberAsync(string access_token, string owner, string repo, int number, string title, State5? state, string description, string due_on)
        {
            return PatchV5ReposOwnerRepoMilestonesNumberAsync(access_token, owner, repo, number, title, state, description, due_on, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新仓库里程碑</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">里程碑序号(id)</param>
        /// <param name="title">里程碑标题</param>
        /// <param name="state">里程碑状态: open, closed, all。默认: open</param>
        /// <param name="description">里程碑具体描述</param>
        /// <param name="due_on">里程碑的截止日期</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Milestone> PatchV5ReposOwnerRepoMilestonesNumberAsync(string access_token, string owner, string repo, int number, string title, State5? state, string description, string due_on, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/milestones/{number}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (title == null)
                        throw new System.ArgumentNullException("title");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (state != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture)), "state");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (due_on == null)
                        throw new System.ArgumentNullException("due_on");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(due_on, System.Globalization.CultureInfo.InvariantCulture)), "due_on");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Milestone>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除仓库单个里程碑</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">里程碑序号(id)</param>
        /// <returns>删除仓库单个里程碑</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoMilestonesNumberAsync(string access_token, string owner, string repo, int number)
        {
            return DeleteV5ReposOwnerRepoMilestonesNumberAsync(access_token, owner, repo, number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除仓库单个里程碑</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">里程碑序号(id)</param>
        /// <returns>删除仓库单个里程碑</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoMilestonesNumberAsync(string access_token, string owner, string repo, int number, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/milestones/{number}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取一个仓库使用的开源许可协议</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>获取一个仓库使用的开源许可协议</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5ReposOwnerRepoLicenseAsync(string access_token, string owner, string repo)
        {
            return GetV5ReposOwnerRepoLicenseAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取一个仓库使用的开源许可协议</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>获取一个仓库使用的开源许可协议</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5ReposOwnerRepoLicenseAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/license?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库的Commit评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="order">排序顺序: asc(default),desc</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Note> GetV5ReposOwnerRepoCommentsAsync(string access_token, string owner, string repo, int? page, int? per_page, string order)
        {
            return GetV5ReposOwnerRepoCommentsAsync(access_token, owner, repo, page, per_page, order, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库的Commit评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="order">排序顺序: asc(default),desc</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Note> GetV5ReposOwnerRepoCommentsAsync(string access_token, string owner, string repo, int? page, int? per_page, string order, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/comments?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Note>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取单个Commit的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="@ref">Commit的Reference</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Note> GetV5ReposOwnerRepoCommitsRefCommentsAsync(string access_token, string owner, string repo, string @ref, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoCommitsRefCommentsAsync(access_token, owner, repo, @ref, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取单个Commit的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="@ref">Commit的Reference</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Note> GetV5ReposOwnerRepoCommitsRefCommentsAsync(string access_token, string owner, string repo, string @ref, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (@ref == null)
                throw new System.ArgumentNullException("@ref");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/commits/{ref}/comments?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ref}", System.Uri.EscapeDataString(ConvertToString(@ref, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Note>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库的某条Commit评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Note> GetV5ReposOwnerRepoCommentsIdAsync(string access_token, string owner, string repo, int id)
        {
            return GetV5ReposOwnerRepoCommentsIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库的某条Commit评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Note> GetV5ReposOwnerRepoCommentsIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/comments/{id}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Note>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新Commit评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <param name="body">评论的内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Note> PatchV5ReposOwnerRepoCommentsIdAsync(string access_token, string owner, string repo, int id, string body)
        {
            return PatchV5ReposOwnerRepoCommentsIdAsync(access_token, owner, repo, id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新Commit评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <param name="body">评论的内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Note> PatchV5ReposOwnerRepoCommentsIdAsync(string access_token, string owner, string repo, int id, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/comments/{id}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (body == null)
                        throw new System.ArgumentNullException("body");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Note>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除Commit评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <returns>删除Commit评论</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoCommentsIdAsync(string access_token, string owner, string repo, int id)
        {
            return DeleteV5ReposOwnerRepoCommentsIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除Commit评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <returns>删除Commit评论</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoCommentsIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/comments/{id}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建Commit评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sha">评论的sha值</param>
        /// <param name="body">评论的内容</param>
        /// <param name="path">文件的相对路径</param>
        /// <param name="position">Diff的相对行数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Note> PostV5ReposOwnerRepoCommitsShaCommentsAsync(string access_token, string owner, string repo, string sha, string body, string path, int? position)
        {
            return PostV5ReposOwnerRepoCommitsShaCommentsAsync(access_token, owner, repo, sha, body, path, position, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建Commit评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sha">评论的sha值</param>
        /// <param name="body">评论的内容</param>
        /// <param name="path">文件的相对路径</param>
        /// <param name="position">Diff的相对行数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Note> PostV5ReposOwnerRepoCommitsShaCommentsAsync(string access_token, string owner, string repo, string sha, string body, string path, int? position, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (sha == null)
                throw new System.ArgumentNullException("sha");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/commits/{sha}/comments");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sha}", System.Uri.EscapeDataString(ConvertToString(sha, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (body == null)
                        throw new System.ArgumentNullException("body");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    if (path != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture)), "path");
                    }
                    if (position != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(position, System.Globalization.CultureInfo.InvariantCulture)), "position");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Note>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库所有Issue的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sort">Either created or updated. Default: created</param>
        /// <param name="direction">Either asc or desc. Ignored without the sort parameter.</param>
        /// <param name="since">Only comments updated at or after this time are returned.
        ///                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Note> GetV5ReposOwnerRepoIssuesCommentsAsync(string access_token, string owner, string repo, Sort4? sort, Direction2? direction, string since, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoIssuesCommentsAsync(access_token, owner, repo, sort, direction, since, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库所有Issue的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sort">Either created or updated. Default: created</param>
        /// <param name="direction">Either asc or desc. Ignored without the sort parameter.</param>
        /// <param name="since">Only comments updated at or after this time are returned.
        ///                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Note> GetV5ReposOwnerRepoIssuesCommentsAsync(string access_token, string owner, string repo, Sort4? sort, Direction2? direction, string since, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/issues/comments?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Note>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库某个Issue所有的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="since">Only comments updated at or after this time are returned.
        ///                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="order">排序顺序: asc(default),desc</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Note> GetV5ReposOwnerRepoIssuesNumberCommentsAsync(string access_token, string owner, string repo, string number, string since, int? page, int? per_page, string order)
        {
            return GetV5ReposOwnerRepoIssuesNumberCommentsAsync(access_token, owner, repo, number, since, page, per_page, order, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库某个Issue所有的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="since">Only comments updated at or after this time are returned.
        ///                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="order">排序顺序: asc(default),desc</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Note> GetV5ReposOwnerRepoIssuesNumberCommentsAsync(string access_token, string owner, string repo, string number, string since, int? page, int? per_page, string order, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/issues/{number}/comments?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Note>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建某个Issue评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="body">The contents of the comment.</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Note> PostV5ReposOwnerRepoIssuesNumberCommentsAsync(string access_token, string owner, string repo, string number, string body)
        {
            return PostV5ReposOwnerRepoIssuesNumberCommentsAsync(access_token, owner, repo, number, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建某个Issue评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="body">The contents of the comment.</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Note> PostV5ReposOwnerRepoIssuesNumberCommentsAsync(string access_token, string owner, string repo, string number, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/issues/{number}/comments");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (body == null)
                        throw new System.ArgumentNullException("body");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Note>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库Issue某条评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Note> GetV5ReposOwnerRepoIssuesCommentsIdAsync(string access_token, string owner, string repo, int id)
        {
            return GetV5ReposOwnerRepoIssuesCommentsIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库Issue某条评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Note> GetV5ReposOwnerRepoIssuesCommentsIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/issues/comments/{id}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Note>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新Issue某条评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <param name="body">The contents of the comment.</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Note> PatchV5ReposOwnerRepoIssuesCommentsIdAsync(string access_token, string owner, string repo, int id, string body)
        {
            return PatchV5ReposOwnerRepoIssuesCommentsIdAsync(access_token, owner, repo, id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新Issue某条评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <param name="body">The contents of the comment.</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Note> PatchV5ReposOwnerRepoIssuesCommentsIdAsync(string access_token, string owner, string repo, int id, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/issues/comments/{id}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (body == null)
                        throw new System.ArgumentNullException("body");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Note>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除Issue某条评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <returns>删除Issue某条评论</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoIssuesCommentsIdAsync(string access_token, string owner, string repo, int id)
        {
            return DeleteV5ReposOwnerRepoIssuesCommentsIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除Issue某条评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <returns>删除Issue某条评论</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoIssuesCommentsIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/issues/comments/{id}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取Pages信息</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>获取Pages信息</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5ReposOwnerRepoPagesAsync(string access_token, string owner, string repo)
        {
            return GetV5ReposOwnerRepoPagesAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取Pages信息</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>获取Pages信息</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5ReposOwnerRepoPagesAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pages?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>请求建立Pages</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>请求建立Pages</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostV5ReposOwnerRepoPagesBuildsAsync(string access_token, string owner, string repo)
        {
            return PostV5ReposOwnerRepoPagesBuildsAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>请求建立Pages</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>请求建立Pages</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PostV5ReposOwnerRepoPagesBuildsAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pages/builds");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取用户的某个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Project> GetV5ReposOwnerRepoAsync(string access_token, string owner, string repo)
        {
            return GetV5ReposOwnerRepoAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取用户的某个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Project> GetV5ReposOwnerRepoAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Project>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新仓库设置</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="name">仓库名称</param>
        /// <param name="description">仓库描述</param>
        /// <param name="homepage">主页(eg: https://gitee.com)</param>
        /// <param name="has_issues">允许提Issue与否。默认: 允许(true)</param>
        /// <param name="has_wiki">提供Wiki与否。默认: 提供(true)</param>
        /// <param name="can_comment">允许用户对仓库进行评论。默认： 允许(true)</param>
        /// <param name="issue_comment">允许对“关闭”状态的 Issue 进行评论。默认: 不允许(false)</param>
        /// <param name="security_hole_enabled">允许用户创建涉及敏感信息的 Issue。默认: 不允许(false)</param>
        /// <param name="@private">仓库公开或私有。</param>
        /// <param name="path">更新仓库路径</param>
        /// <param name="default_branch">更新默认分支</param>
        /// <param name="pull_requests_enabled">接受 pull request，协作开发</param>
        /// <param name="online_edit_enabled">是否允许仓库文件在线编辑</param>
        /// <param name="lightweight_pr_enabled">是否接受轻量级 pull request</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Project> PatchV5ReposOwnerRepoAsync(string access_token, string owner, string repo, string name, string description, string homepage, bool? has_issues, bool? has_wiki, bool? can_comment, bool? issue_comment, bool? security_hole_enabled, bool? @private, string path, string default_branch, bool? pull_requests_enabled, bool? online_edit_enabled, bool? lightweight_pr_enabled)
        {
            return PatchV5ReposOwnerRepoAsync(access_token, owner, repo, name, description, homepage, has_issues, has_wiki, can_comment, issue_comment, security_hole_enabled, @private, path, default_branch, pull_requests_enabled, online_edit_enabled, lightweight_pr_enabled, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新仓库设置</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="name">仓库名称</param>
        /// <param name="description">仓库描述</param>
        /// <param name="homepage">主页(eg: https://gitee.com)</param>
        /// <param name="has_issues">允许提Issue与否。默认: 允许(true)</param>
        /// <param name="has_wiki">提供Wiki与否。默认: 提供(true)</param>
        /// <param name="can_comment">允许用户对仓库进行评论。默认： 允许(true)</param>
        /// <param name="issue_comment">允许对“关闭”状态的 Issue 进行评论。默认: 不允许(false)</param>
        /// <param name="security_hole_enabled">允许用户创建涉及敏感信息的 Issue。默认: 不允许(false)</param>
        /// <param name="@private">仓库公开或私有。</param>
        /// <param name="path">更新仓库路径</param>
        /// <param name="default_branch">更新默认分支</param>
        /// <param name="pull_requests_enabled">接受 pull request，协作开发</param>
        /// <param name="online_edit_enabled">是否允许仓库文件在线编辑</param>
        /// <param name="lightweight_pr_enabled">是否接受轻量级 pull request</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Project> PatchV5ReposOwnerRepoAsync(string access_token, string owner, string repo, string name, string description, string homepage, bool? has_issues, bool? has_wiki, bool? can_comment, bool? issue_comment, bool? security_hole_enabled, bool? @private, string path, string default_branch, bool? pull_requests_enabled, bool? online_edit_enabled, bool? lightweight_pr_enabled, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (homepage != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(homepage, System.Globalization.CultureInfo.InvariantCulture)), "homepage");
                    }
                    if (has_issues != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(has_issues, System.Globalization.CultureInfo.InvariantCulture)), "has_issues");
                    }
                    if (has_wiki != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(has_wiki, System.Globalization.CultureInfo.InvariantCulture)), "has_wiki");
                    }
                    if (can_comment != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(can_comment, System.Globalization.CultureInfo.InvariantCulture)), "can_comment");
                    }
                    if (issue_comment != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(issue_comment, System.Globalization.CultureInfo.InvariantCulture)), "issue_comment");
                    }
                    if (security_hole_enabled != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(security_hole_enabled, System.Globalization.CultureInfo.InvariantCulture)), "security_hole_enabled");
                    }
                    if (@private != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(@private, System.Globalization.CultureInfo.InvariantCulture)), "private");
                    }
                    if (path != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture)), "path");
                    }
                    if (default_branch != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(default_branch, System.Globalization.CultureInfo.InvariantCulture)), "default_branch");
                    }
                    if (pull_requests_enabled != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pull_requests_enabled, System.Globalization.CultureInfo.InvariantCulture)), "pull_requests_enabled");
                    }
                    if (online_edit_enabled != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(online_edit_enabled, System.Globalization.CultureInfo.InvariantCulture)), "online_edit_enabled");
                    }
                    if (lightweight_pr_enabled != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(lightweight_pr_enabled, System.Globalization.CultureInfo.InvariantCulture)), "lightweight_pr_enabled");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Project>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>删除一个仓库</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoAsync(string access_token, string owner, string repo)
        {
            return DeleteV5ReposOwnerRepoAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>删除一个仓库</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>修改代码审查设置</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="assignees">审查人员username，可多个，半角逗号分隔，如：(username1,username2)</param>
        /// <param name="testers">测试人员username，可多个，半角逗号分隔，如：(username1,username2)</param>
        /// <param name="assignees_number">最少审查人数</param>
        /// <param name="testers_number">最少测试人数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Contributor> PutV5ReposOwnerRepoReviewerAsync(string access_token, string owner, string repo, string assignees, string testers, int assignees_number, int testers_number)
        {
            return PutV5ReposOwnerRepoReviewerAsync(access_token, owner, repo, assignees, testers, assignees_number, testers_number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改代码审查设置</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="assignees">审查人员username，可多个，半角逗号分隔，如：(username1,username2)</param>
        /// <param name="testers">测试人员username，可多个，半角逗号分隔，如：(username1,username2)</param>
        /// <param name="assignees_number">最少审查人数</param>
        /// <param name="testers_number">最少测试人数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Contributor> PutV5ReposOwnerRepoReviewerAsync(string access_token, string owner, string repo, string assignees, string testers, int assignees_number, int testers_number, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/reviewer");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (assignees == null)
                        throw new System.ArgumentNullException("assignees");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(assignees, System.Globalization.CultureInfo.InvariantCulture)), "assignees");
                    }
                    if (testers == null)
                        throw new System.ArgumentNullException("testers");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(testers, System.Globalization.CultureInfo.InvariantCulture)), "testers");
                    }
                    if (assignees_number == null)
                        throw new System.ArgumentNullException("assignees_number");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(assignees_number, System.Globalization.CultureInfo.InvariantCulture)), "assignees_number");
                    }
                    if (testers_number == null)
                        throw new System.ArgumentNullException("testers_number");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(testers_number, System.Globalization.CultureInfo.InvariantCulture)), "testers_number");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Contributor>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库贡献者</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Contributor> GetV5ReposOwnerRepoContributorsAsync(string access_token, string owner, string repo)
        {
            return GetV5ReposOwnerRepoContributorsAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库贡献者</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Contributor> GetV5ReposOwnerRepoContributorsAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/contributors?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Contributor>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出仓库所有的tags</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Tag> GetV5ReposOwnerRepoTagsAsync(string access_token, string owner, string repo)
        {
            return GetV5ReposOwnerRepoTagsAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出仓库所有的tags</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Tag> GetV5ReposOwnerRepoTagsAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/tags?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Tag>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建一个仓库的 Tag</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="refs">起点名称, 默认：master</param>
        /// <param name="tag_name">新创建的标签名称</param>
        /// <param name="tag_message">Tag 描述, 默认为空</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Tag> PostV5ReposOwnerRepoTagsAsync(string access_token, string owner, string repo, string refs, string tag_name, string tag_message)
        {
            return PostV5ReposOwnerRepoTagsAsync(access_token, owner, repo, refs, tag_name, tag_message, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建一个仓库的 Tag</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="refs">起点名称, 默认：master</param>
        /// <param name="tag_name">新创建的标签名称</param>
        /// <param name="tag_message">Tag 描述, 默认为空</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Tag> PostV5ReposOwnerRepoTagsAsync(string access_token, string owner, string repo, string refs, string tag_name, string tag_message, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/tags");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (refs == null)
                        throw new System.ArgumentNullException("refs");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(refs, System.Globalization.CultureInfo.InvariantCulture)), "refs");
                    }
                    if (tag_name == null)
                        throw new System.ArgumentNullException("tag_name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tag_name, System.Globalization.CultureInfo.InvariantCulture)), "tag_name");
                    }
                    if (tag_message != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tag_message, System.Globalization.CultureInfo.InvariantCulture)), "tag_message");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Tag>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>清空一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>清空仓库成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutV5ReposOwnerRepoClearAsync(string access_token, string owner, string repo)
        {
            return PutV5ReposOwnerRepoClearAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>清空一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>清空仓库成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutV5ReposOwnerRepoClearAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/clear");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库的所有成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ProjectMember> GetV5ReposOwnerRepoCollaboratorsAsync(string access_token, string owner, string repo)
        {
            return GetV5ReposOwnerRepoCollaboratorsAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库的所有成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ProjectMember> GetV5ReposOwnerRepoCollaboratorsAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/collaborators?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectMember>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>判断用户是否为仓库成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>用户为仓库成员</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5ReposOwnerRepoCollaboratorsUsernameAsync(string access_token, string owner, string repo, string username)
        {
            return GetV5ReposOwnerRepoCollaboratorsUsernameAsync(access_token, owner, repo, username, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>判断用户是否为仓库成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>用户为仓库成员</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5ReposOwnerRepoCollaboratorsUsernameAsync(string access_token, string owner, string repo, string username, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/collaborators/{username}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>添加仓库成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="permission">成员权限: 拉代码(pull)，推代码(push)，管理员(admin)。默认: push</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ProjectMember> PutV5ReposOwnerRepoCollaboratorsUsernameAsync(string access_token, string owner, string repo, string username, Permission permission)
        {
            return PutV5ReposOwnerRepoCollaboratorsUsernameAsync(access_token, owner, repo, username, permission, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>添加仓库成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="permission">成员权限: 拉代码(pull)，推代码(push)，管理员(admin)。默认: push</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ProjectMember> PutV5ReposOwnerRepoCollaboratorsUsernameAsync(string access_token, string owner, string repo, string username, Permission permission, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/collaborators/{username}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (permission == null)
                        throw new System.ArgumentNullException("permission");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(permission, System.Globalization.CultureInfo.InvariantCulture)), "permission");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectMember>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>移除仓库成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>移除仓库成员</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoCollaboratorsUsernameAsync(string access_token, string owner, string repo, string username)
        {
            return DeleteV5ReposOwnerRepoCollaboratorsUsernameAsync(access_token, owner, repo, username, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>移除仓库成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>移除仓库成员</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoCollaboratorsUsernameAsync(string access_token, string owner, string repo, string username, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/collaborators/{username}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>查看仓库成员的权限</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ProjectMemberPermission> GetV5ReposOwnerRepoCollaboratorsUsernamePermissionAsync(string access_token, string owner, string repo, string username)
        {
            return GetV5ReposOwnerRepoCollaboratorsUsernamePermissionAsync(access_token, owner, repo, username, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查看仓库成员的权限</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ProjectMemberPermission> GetV5ReposOwnerRepoCollaboratorsUsernamePermissionAsync(string access_token, string owner, string repo, string username, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/collaborators/{username}/permission?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectMemberPermission>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>查看仓库的Forks</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sort">排序方式: fork的时间(newest, oldest)，star的人数(stargazers)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Project> GetV5ReposOwnerRepoForksAsync(string access_token, string owner, string repo, Sort5? sort, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoForksAsync(access_token, owner, repo, sort, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查看仓库的Forks</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sort">排序方式: fork的时间(newest, oldest)，star的人数(stargazers)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Project> GetV5ReposOwnerRepoForksAsync(string access_token, string owner, string repo, Sort5? sort, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/forks?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Project>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Fork一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="organization">组织空间地址，不填写默认Fork到用户个人空间地址</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Project> PostV5ReposOwnerRepoForksAsync(string access_token, string owner, string repo, string organization)
        {
            return PostV5ReposOwnerRepoForksAsync(access_token, owner, repo, organization, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fork一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="organization">组织空间地址，不填写默认Fork到用户个人空间地址</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Project> PostV5ReposOwnerRepoForksAsync(string access_token, string owner, string repo, string organization, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/forks");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (organization != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)), "organization");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Project>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取Pull Request列表</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="state">可选。Pull Request 状态</param>
        /// <param name="head">可选。Pull Request 提交的源分支。格式：branch 或者：username:branch</param>
        /// <param name="@base">可选。Pull Request 提交目标分支的名称。</param>
        /// <param name="sort">可选。排序字段，默认按创建时间</param>
        /// <param name="direction">可选。升序/降序</param>
        /// <param name="milestone_number">可选。里程碑序号(id)</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequest>> GetV5ReposOwnerRepoPullsAsync(string access_token, string owner, string repo, State6? state, string head, string @base, Sort6? sort, Direction3? direction, int? milestone_number, string labels, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoPullsAsync(access_token, owner, repo, state, head, @base, sort, direction, milestone_number, labels, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取Pull Request列表</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="state">可选。Pull Request 状态</param>
        /// <param name="head">可选。Pull Request 提交的源分支。格式：branch 或者：username:branch</param>
        /// <param name="@base">可选。Pull Request 提交目标分支的名称。</param>
        /// <param name="sort">可选。排序字段，默认按创建时间</param>
        /// <param name="direction">可选。升序/降序</param>
        /// <param name="milestone_number">可选。里程碑序号(id)</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequest>> GetV5ReposOwnerRepoPullsAsync(string access_token, string owner, string repo, State6? state, string head, string @base, Sort6? sort, Direction3? direction, int? milestone_number, string labels, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (head != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("head") + "=").Append(System.Uri.EscapeDataString(ConvertToString(head, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (@base != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("base") + "=").Append(System.Uri.EscapeDataString(ConvertToString(@base, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (milestone_number != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("milestone_number") + "=").Append(System.Uri.EscapeDataString(ConvertToString(milestone_number, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (labels != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("labels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(labels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PullRequest>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="title">必填。Pull Request 标题</param>
        /// <param name="head">必填。Pull Request 提交的源分支。格式：branch 或者：username:branch</param>
        /// <param name="@base">必填。Pull Request 提交目标分支的名称</param>
        /// <param name="body">可选。Pull Request 内容</param>
        /// <param name="milestone_number">可选。里程碑序号(id)</param>
        /// <param name="labels">用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance</param>
        /// <param name="issue">可选。Pull Request的标题和内容可以根据指定的Issue Id自动填充</param>
        /// <param name="assignees">可选。审查人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派审查人员】则此选项无效</param>
        /// <param name="testers">可选。测试人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派测试人员】则此选项无效</param>
        /// <param name="prune_source_branch">可选。合并PR后是否删除源分支，默认false（不删除）</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullRequest> PostV5ReposOwnerRepoPullsAsync(string access_token, string owner, string repo, string title, string head, string @base, string body, int? milestone_number, string labels, string issue, string assignees, string testers, bool? prune_source_branch)
        {
            return PostV5ReposOwnerRepoPullsAsync(access_token, owner, repo, title, head, @base, body, milestone_number, labels, issue, assignees, testers, prune_source_branch, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="title">必填。Pull Request 标题</param>
        /// <param name="head">必填。Pull Request 提交的源分支。格式：branch 或者：username:branch</param>
        /// <param name="@base">必填。Pull Request 提交目标分支的名称</param>
        /// <param name="body">可选。Pull Request 内容</param>
        /// <param name="milestone_number">可选。里程碑序号(id)</param>
        /// <param name="labels">用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance</param>
        /// <param name="issue">可选。Pull Request的标题和内容可以根据指定的Issue Id自动填充</param>
        /// <param name="assignees">可选。审查人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派审查人员】则此选项无效</param>
        /// <param name="testers">可选。测试人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派测试人员】则此选项无效</param>
        /// <param name="prune_source_branch">可选。合并PR后是否删除源分支，默认false（不删除）</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullRequest> PostV5ReposOwnerRepoPullsAsync(string access_token, string owner, string repo, string title, string head, string @base, string body, int? milestone_number, string labels, string issue, string assignees, string testers, bool? prune_source_branch, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (title == null)
                        throw new System.ArgumentNullException("title");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (head == null)
                        throw new System.ArgumentNullException("head");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(head, System.Globalization.CultureInfo.InvariantCulture)), "head");
                    }
                    if (@base == null)
                        throw new System.ArgumentNullException("@base");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(@base, System.Globalization.CultureInfo.InvariantCulture)), "base");
                    }
                    if (body != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    if (milestone_number != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(milestone_number, System.Globalization.CultureInfo.InvariantCulture)), "milestone_number");
                    }
                    if (labels != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(labels, System.Globalization.CultureInfo.InvariantCulture)), "labels");
                    }
                    if (issue != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(issue, System.Globalization.CultureInfo.InvariantCulture)), "issue");
                    }
                    if (assignees != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(assignees, System.Globalization.CultureInfo.InvariantCulture)), "assignees");
                    }
                    if (testers != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(testers, System.Globalization.CultureInfo.InvariantCulture)), "testers");
                    }
                    if (prune_source_branch != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(prune_source_branch, System.Globalization.CultureInfo.InvariantCulture)), "prune_source_branch");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PullRequest>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取该仓库下的所有Pull Request评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sort">可选。按创建时间/更新时间排序</param>
        /// <param name="direction">可选。升序/降序</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequestComments>> GetV5ReposOwnerRepoPullsCommentsAsync(string access_token, string owner, string repo, Sort7? sort, Direction4? direction, string since, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoPullsCommentsAsync(access_token, owner, repo, sort, direction, since, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取该仓库下的所有Pull Request评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="sort">可选。按创建时间/更新时间排序</param>
        /// <param name="direction">可选。升序/降序</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequestComments>> GetV5ReposOwnerRepoPullsCommentsAsync(string access_token, string owner, string repo, Sort7? sort, Direction4? direction, string since, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/comments?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PullRequestComments>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取单个Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullRequest> GetV5ReposOwnerRepoPullsNumberAsync(string access_token, string owner, string repo, int number)
        {
            return GetV5ReposOwnerRepoPullsNumberAsync(access_token, owner, repo, number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取单个Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullRequest> GetV5ReposOwnerRepoPullsNumberAsync(string access_token, string owner, string repo, int number, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PullRequest>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新Pull Request信息</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="title">可选。Pull Request 标题</param>
        /// <param name="body">可选。Pull Request 内容</param>
        /// <param name="state">可选。Pull Request 状态</param>
        /// <param name="milestone_number">可选。里程碑序号(id)</param>
        /// <param name="labels">用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance</param>
        /// <param name="assignees_number">可选。最少审查人数</param>
        /// <param name="testers_number">可选。最少测试人数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullRequest> PatchV5ReposOwnerRepoPullsNumberAsync(string access_token, string owner, string repo, int number, string title, string body, State7? state, int? milestone_number, string labels, int? assignees_number, int? testers_number)
        {
            return PatchV5ReposOwnerRepoPullsNumberAsync(access_token, owner, repo, number, title, body, state, milestone_number, labels, assignees_number, testers_number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新Pull Request信息</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="title">可选。Pull Request 标题</param>
        /// <param name="body">可选。Pull Request 内容</param>
        /// <param name="state">可选。Pull Request 状态</param>
        /// <param name="milestone_number">可选。里程碑序号(id)</param>
        /// <param name="labels">用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance</param>
        /// <param name="assignees_number">可选。最少审查人数</param>
        /// <param name="testers_number">可选。最少测试人数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullRequest> PatchV5ReposOwnerRepoPullsNumberAsync(string access_token, string owner, string repo, int number, string title, string body, State7? state, int? milestone_number, string labels, int? assignees_number, int? testers_number, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (title != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (body != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    if (state != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture)), "state");
                    }
                    if (milestone_number != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(milestone_number, System.Globalization.CultureInfo.InvariantCulture)), "milestone_number");
                    }
                    if (labels != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(labels, System.Globalization.CultureInfo.InvariantCulture)), "labels");
                    }
                    if (assignees_number != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(assignees_number, System.Globalization.CultureInfo.InvariantCulture)), "assignees_number");
                    }
                    if (testers_number != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(testers_number, System.Globalization.CultureInfo.InvariantCulture)), "testers_number");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PullRequest>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取某个Pull Request的操作日志</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="sort">按递增(asc)或递减(desc)排序，默认：递减</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OperateLog> GetV5ReposOwnerRepoPullsNumberOperateLogsAsync(string access_token, string owner, string repo, int number, Sort8? sort)
        {
            return GetV5ReposOwnerRepoPullsNumberOperateLogsAsync(access_token, owner, repo, number, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取某个Pull Request的操作日志</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="sort">按递增(asc)或递减(desc)排序，默认：递减</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OperateLog> GetV5ReposOwnerRepoPullsNumberOperateLogsAsync(string access_token, string owner, string repo, int number, Sort8? sort, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/operate_logs?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperateLog>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取某Pull Request的所有Commit信息。最多显示250条Commit</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequestCommits>> GetV5ReposOwnerRepoPullsNumberCommitsAsync(string access_token, string owner, string repo, int number)
        {
            return GetV5ReposOwnerRepoPullsNumberCommitsAsync(access_token, owner, repo, number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取某Pull Request的所有Commit信息。最多显示250条Commit</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequestCommits>> GetV5ReposOwnerRepoPullsNumberCommitsAsync(string access_token, string owner, string repo, int number, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/commits?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PullRequestCommits>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Pull Request Commit文件列表。最多显示300条diff</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequestFiles>> GetV5ReposOwnerRepoPullsNumberFilesAsync(string access_token, string owner, string repo, int number)
        {
            return GetV5ReposOwnerRepoPullsNumberFilesAsync(access_token, owner, repo, number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Pull Request Commit文件列表。最多显示300条diff</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequestFiles>> GetV5ReposOwnerRepoPullsNumberFilesAsync(string access_token, string owner, string repo, int number, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/files?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PullRequestFiles>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>判断Pull Request是否已经合并</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <returns>Pull Request已经合并</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5ReposOwnerRepoPullsNumberMergeAsync(string access_token, string owner, string repo, int number)
        {
            return GetV5ReposOwnerRepoPullsNumberMergeAsync(access_token, owner, repo, number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>判断Pull Request是否已经合并</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <returns>Pull Request已经合并</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5ReposOwnerRepoPullsNumberMergeAsync(string access_token, string owner, string repo, int number, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/merge?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Pull Request\u672a\u5408\u5e76\u6216\u4e0d\u5b58\u5728", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>合并Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="merge_method">可选。合并PR的方法，merge（合并所有提交）和 squash（扁平化分支合并）。默认为merge。</param>
        /// <param name="prune_source_branch">可选。合并PR后是否删除源分支，默认false（不删除）</param>
        /// <param name="title">可选。合并标题，默认为PR的标题</param>
        /// <param name="description">可选。合并描述，默认为 "Merge pull request !{pr_id} from {author}/{source_branch}"，与页面显示的默认一致。</param>
        /// <returns>合并Pull Request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutV5ReposOwnerRepoPullsNumberMergeAsync(string access_token, string owner, string repo, int number, Merge_method? merge_method, bool? prune_source_branch, string title, string description)
        {
            return PutV5ReposOwnerRepoPullsNumberMergeAsync(access_token, owner, repo, number, merge_method, prune_source_branch, title, description, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>合并Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="merge_method">可选。合并PR的方法，merge（合并所有提交）和 squash（扁平化分支合并）。默认为merge。</param>
        /// <param name="prune_source_branch">可选。合并PR后是否删除源分支，默认false（不删除）</param>
        /// <param name="title">可选。合并标题，默认为PR的标题</param>
        /// <param name="description">可选。合并描述，默认为 "Merge pull request !{pr_id} from {author}/{source_branch}"，与页面显示的默认一致。</param>
        /// <returns>合并Pull Request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutV5ReposOwnerRepoPullsNumberMergeAsync(string access_token, string owner, string repo, int number, Merge_method? merge_method, bool? prune_source_branch, string title, string description, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/merge");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (merge_method != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(merge_method, System.Globalization.CultureInfo.InvariantCulture)), "merge_method");
                    }
                    if (prune_source_branch != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(prune_source_branch, System.Globalization.CultureInfo.InvariantCulture)), "prune_source_branch");
                    }
                    if (title != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>处理 Pull Request 审查</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="force">是否强制审查通过（默认否），只对管理员生效</param>
        /// <returns>处理 Pull Request 审查</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostV5ReposOwnerRepoPullsNumberReviewAsync(string access_token, string owner, string repo, int number, bool? force)
        {
            return PostV5ReposOwnerRepoPullsNumberReviewAsync(access_token, owner, repo, number, force, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>处理 Pull Request 审查</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="force">是否强制审查通过（默认否），只对管理员生效</param>
        /// <returns>处理 Pull Request 审查</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PostV5ReposOwnerRepoPullsNumberReviewAsync(string access_token, string owner, string repo, int number, bool? force, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/review");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (force != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(force, System.Globalization.CultureInfo.InvariantCulture)), "force");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>处理 Pull Request 测试</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="force">是否强制测试通过（默认否），只对管理员生效</param>
        /// <returns>处理 Pull Request 测试</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostV5ReposOwnerRepoPullsNumberTestAsync(string access_token, string owner, string repo, int number, bool? force)
        {
            return PostV5ReposOwnerRepoPullsNumberTestAsync(access_token, owner, repo, number, force, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>处理 Pull Request 测试</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="force">是否强制测试通过（默认否），只对管理员生效</param>
        /// <returns>处理 Pull Request 测试</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PostV5ReposOwnerRepoPullsNumberTestAsync(string access_token, string owner, string repo, int number, bool? force, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/test");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (force != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(force, System.Globalization.CultureInfo.InvariantCulture)), "force");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>指派用户审查 Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="assignees">用户的个人空间地址, 以 , 分隔</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullRequest> PostV5ReposOwnerRepoPullsNumberAssigneesAsync(string access_token, string owner, string repo, int number, string assignees)
        {
            return PostV5ReposOwnerRepoPullsNumberAssigneesAsync(access_token, owner, repo, number, assignees, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>指派用户审查 Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="assignees">用户的个人空间地址, 以 , 分隔</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullRequest> PostV5ReposOwnerRepoPullsNumberAssigneesAsync(string access_token, string owner, string repo, int number, string assignees, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/assignees");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (assignees == null)
                        throw new System.ArgumentNullException("assignees");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(assignees, System.Globalization.CultureInfo.InvariantCulture)), "assignees");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PullRequest>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>取消用户审查 Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="assignees">用户的个人空间地址, 以 , 分隔</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullRequest> DeleteV5ReposOwnerRepoPullsNumberAssigneesAsync(string access_token, string owner, string repo, int number, string assignees)
        {
            return DeleteV5ReposOwnerRepoPullsNumberAssigneesAsync(access_token, owner, repo, number, assignees, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>取消用户审查 Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="assignees">用户的个人空间地址, 以 , 分隔</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullRequest> DeleteV5ReposOwnerRepoPullsNumberAssigneesAsync(string access_token, string owner, string repo, int number, string assignees, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            if (assignees == null)
                throw new System.ArgumentNullException("assignees");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/assignees?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("assignees") + "=").Append(System.Uri.EscapeDataString(ConvertToString(assignees, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PullRequest>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>重置 Pull Request 审查 的状态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="reset_all">是否重置所有审查人，默认：false，只对管理员生效</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullRequest> PatchV5ReposOwnerRepoPullsNumberAssigneesAsync(string access_token, string owner, string repo, int number, bool? reset_all)
        {
            return PatchV5ReposOwnerRepoPullsNumberAssigneesAsync(access_token, owner, repo, number, reset_all, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>重置 Pull Request 审查 的状态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="reset_all">是否重置所有审查人，默认：false，只对管理员生效</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullRequest> PatchV5ReposOwnerRepoPullsNumberAssigneesAsync(string access_token, string owner, string repo, int number, bool? reset_all, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/assignees");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (reset_all != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(reset_all, System.Globalization.CultureInfo.InvariantCulture)), "reset_all");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PullRequest>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>指派用户测试 Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="testers">用户的个人空间地址, 以 , 分隔</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullRequest> PostV5ReposOwnerRepoPullsNumberTestersAsync(string access_token, string owner, string repo, int number, string testers)
        {
            return PostV5ReposOwnerRepoPullsNumberTestersAsync(access_token, owner, repo, number, testers, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>指派用户测试 Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="testers">用户的个人空间地址, 以 , 分隔</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullRequest> PostV5ReposOwnerRepoPullsNumberTestersAsync(string access_token, string owner, string repo, int number, string testers, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/testers");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (testers == null)
                        throw new System.ArgumentNullException("testers");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(testers, System.Globalization.CultureInfo.InvariantCulture)), "testers");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PullRequest>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>取消用户测试 Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="testers">用户的个人空间地址, 以 , 分隔</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullRequest> DeleteV5ReposOwnerRepoPullsNumberTestersAsync(string access_token, string owner, string repo, int number, string testers)
        {
            return DeleteV5ReposOwnerRepoPullsNumberTestersAsync(access_token, owner, repo, number, testers, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>取消用户测试 Pull Request</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="testers">用户的个人空间地址, 以 , 分隔</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullRequest> DeleteV5ReposOwnerRepoPullsNumberTestersAsync(string access_token, string owner, string repo, int number, string testers, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            if (testers == null)
                throw new System.ArgumentNullException("testers");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/testers?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("testers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(testers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PullRequest>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>重置 Pull Request 测试 的状态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="reset_all">是否重置所有测试人，默认：false，只对管理员生效</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullRequest> PatchV5ReposOwnerRepoPullsNumberTestersAsync(string access_token, string owner, string repo, int number, bool? reset_all)
        {
            return PatchV5ReposOwnerRepoPullsNumberTestersAsync(access_token, owner, repo, number, reset_all, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>重置 Pull Request 测试 的状态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="reset_all">是否重置所有测试人，默认：false，只对管理员生效</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullRequest> PatchV5ReposOwnerRepoPullsNumberTestersAsync(string access_token, string owner, string repo, int number, bool? reset_all, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/testers");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (reset_all != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(reset_all, System.Globalization.CultureInfo.InvariantCulture)), "reset_all");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PullRequest>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取 Pull Request 关联的 issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5ReposOwnerRepoPullsNumberIssuesAsync(string access_token, string owner, string repo, int? page, int? per_page, int number)
        {
            return GetV5ReposOwnerRepoPullsNumberIssuesAsync(access_token, owner, repo, page, per_page, number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取 Pull Request 关联的 issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5ReposOwnerRepoPullsNumberIssuesAsync(string access_token, string owner, string repo, int? page, int? per_page, int number, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/issues?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Issue>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取某个Pull Request的所有评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequestComments>> GetV5ReposOwnerRepoPullsNumberCommentsAsync(string access_token, string owner, string repo, int number, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoPullsNumberCommentsAsync(access_token, owner, repo, number, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取某个Pull Request的所有评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequestComments>> GetV5ReposOwnerRepoPullsNumberCommentsAsync(string access_token, string owner, string repo, int number, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/comments?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PullRequestComments>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>提交Pull Request评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="body">必填。评论内容</param>
        /// <param name="commit_id">可选。PR代码评论的commit id</param>
        /// <param name="path">可选。PR代码评论的文件名</param>
        /// <param name="position">可选。PR代码评论diff中的行数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullRequestComments> PostV5ReposOwnerRepoPullsNumberCommentsAsync(string access_token, string owner, string repo, int number, string body, string commit_id, string path, int? position)
        {
            return PostV5ReposOwnerRepoPullsNumberCommentsAsync(access_token, owner, repo, number, body, commit_id, path, position, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>提交Pull Request评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="body">必填。评论内容</param>
        /// <param name="commit_id">可选。PR代码评论的commit id</param>
        /// <param name="path">可选。PR代码评论的文件名</param>
        /// <param name="position">可选。PR代码评论diff中的行数</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullRequestComments> PostV5ReposOwnerRepoPullsNumberCommentsAsync(string access_token, string owner, string repo, int number, string body, string commit_id, string path, int? position, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/comments");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (body == null)
                        throw new System.ArgumentNullException("body");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    if (commit_id != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(commit_id, System.Globalization.CultureInfo.InvariantCulture)), "commit_id");
                    }
                    if (path != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture)), "path");
                    }
                    if (position != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(position, System.Globalization.CultureInfo.InvariantCulture)), "position");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PullRequestComments>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取某个 Pull Request 的所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Label>> GetV5ReposOwnerRepoPullsNumberLabelsAsync(string access_token, string owner, string repo, int number, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoPullsNumberLabelsAsync(access_token, owner, repo, number, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取某个 Pull Request 的所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Label>> GetV5ReposOwnerRepoPullsNumberLabelsAsync(string access_token, string owner, string repo, int number, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/labels?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Label>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建 Pull Request 标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="body">标签名数组，如: ["feat", "bug"]</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Label> PostV5ReposOwnerRepoPullsNumberLabelsAsync(string access_token, string owner, string repo, int number, System.Collections.Generic.IEnumerable<string> body)
        {
            return PostV5ReposOwnerRepoPullsNumberLabelsAsync(access_token, owner, repo, number, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建 Pull Request 标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="body">标签名数组，如: ["feat", "bug"]</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Label> PostV5ReposOwnerRepoPullsNumberLabelsAsync(string access_token, string owner, string repo, int number, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/labels");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>替换 Pull Request 所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="body">标签名数组，如: ["feat", "bug"]</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Label> PutV5ReposOwnerRepoPullsNumberLabelsAsync(string access_token, string owner, string repo, int number, System.Collections.Generic.IEnumerable<string> body)
        {
            return PutV5ReposOwnerRepoPullsNumberLabelsAsync(access_token, owner, repo, number, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>替换 Pull Request 所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="body">标签名数组，如: ["feat", "bug"]</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Label> PutV5ReposOwnerRepoPullsNumberLabelsAsync(string access_token, string owner, string repo, int number, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/labels");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除 Pull Request 标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="name">标签名称</param>
        /// <returns>删除 Pull Request 标签</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoPullsNumberLabelsNameAsync(string access_token, string owner, string repo, int number, string name)
        {
            return DeleteV5ReposOwnerRepoPullsNumberLabelsNameAsync(access_token, owner, repo, number, name, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除 Pull Request 标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="number">第几个PR，即本仓库PR的序数</param>
        /// <param name="name">标签名称</param>
        /// <returns>删除 Pull Request 标签</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoPullsNumberLabelsNameAsync(string access_token, string owner, string repo, int number, string name, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/{number}/labels/{name}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取Pull Request的某个评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullRequestComments> GetV5ReposOwnerRepoPullsCommentsIdAsync(string access_token, string owner, string repo, int id)
        {
            return GetV5ReposOwnerRepoPullsCommentsIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取Pull Request的某个评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullRequestComments> GetV5ReposOwnerRepoPullsCommentsIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/comments/{id}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PullRequestComments>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>编辑评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <param name="body">必填。评论内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PullRequestComments> PatchV5ReposOwnerRepoPullsCommentsIdAsync(string access_token, string owner, string repo, int id, string body)
        {
            return PatchV5ReposOwnerRepoPullsCommentsIdAsync(access_token, owner, repo, id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>编辑评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <param name="body">必填。评论内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PullRequestComments> PatchV5ReposOwnerRepoPullsCommentsIdAsync(string access_token, string owner, string repo, int id, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/comments/{id}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (body == null)
                        throw new System.ArgumentNullException("body");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PullRequestComments>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <returns>删除评论</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoPullsCommentsIdAsync(string access_token, string owner, string repo, int id)
        {
            return DeleteV5ReposOwnerRepoPullsCommentsIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">评论的ID</param>
        /// <returns>删除评论</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoPullsCommentsIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/pulls/comments/{id}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库的所有Releases</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Release>> GetV5ReposOwnerRepoReleasesAsync(string access_token, string owner, string repo, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoReleasesAsync(access_token, owner, repo, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库的所有Releases</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Release>> GetV5ReposOwnerRepoReleasesAsync(string access_token, string owner, string repo, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/releases?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Release>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建仓库Release</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="tag_name">Tag 名称, 提倡以v字母为前缀做为Release名称，例如v1.0或者v2.3.4</param>
        /// <param name="name">Release 名称</param>
        /// <param name="body">Release 描述</param>
        /// <param name="prerelease">是否为预览版本。默认: false（非预览版本）</param>
        /// <param name="target_commitish">分支名称或者commit SHA, 默认是当前默认分支</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Release> PostV5ReposOwnerRepoReleasesAsync(string access_token, string owner, string repo, string tag_name, string name, string body, bool? prerelease, string target_commitish)
        {
            return PostV5ReposOwnerRepoReleasesAsync(access_token, owner, repo, tag_name, name, body, prerelease, target_commitish, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建仓库Release</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="tag_name">Tag 名称, 提倡以v字母为前缀做为Release名称，例如v1.0或者v2.3.4</param>
        /// <param name="name">Release 名称</param>
        /// <param name="body">Release 描述</param>
        /// <param name="prerelease">是否为预览版本。默认: false（非预览版本）</param>
        /// <param name="target_commitish">分支名称或者commit SHA, 默认是当前默认分支</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Release> PostV5ReposOwnerRepoReleasesAsync(string access_token, string owner, string repo, string tag_name, string name, string body, bool? prerelease, string target_commitish, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/releases");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (tag_name == null)
                        throw new System.ArgumentNullException("tag_name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tag_name, System.Globalization.CultureInfo.InvariantCulture)), "tag_name");
                    }
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (body == null)
                        throw new System.ArgumentNullException("body");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    if (prerelease != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(prerelease, System.Globalization.CultureInfo.InvariantCulture)), "prerelease");
                    }
                    if (target_commitish == null)
                        throw new System.ArgumentNullException("target_commitish");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(target_commitish, System.Globalization.CultureInfo.InvariantCulture)), "target_commitish");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Release>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库的单个Releases</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">发行版本的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Release> GetV5ReposOwnerRepoReleasesIdAsync(string access_token, string owner, string repo, int id)
        {
            return GetV5ReposOwnerRepoReleasesIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库的单个Releases</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">发行版本的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Release> GetV5ReposOwnerRepoReleasesIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/releases/{id}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Release>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新仓库Release</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="tag_name">Tag 名称, 提倡以v字母为前缀做为Release名称，例如v1.0或者v2.3.4</param>
        /// <param name="name">Release 名称</param>
        /// <param name="body">Release 描述</param>
        /// <param name="prerelease">是否为预览版本。默认: false（非预览版本）</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Release> PatchV5ReposOwnerRepoReleasesIdAsync(string access_token, string owner, string repo, string tag_name, string name, string body, bool? prerelease, int id)
        {
            return PatchV5ReposOwnerRepoReleasesIdAsync(access_token, owner, repo, tag_name, name, body, prerelease, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新仓库Release</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="tag_name">Tag 名称, 提倡以v字母为前缀做为Release名称，例如v1.0或者v2.3.4</param>
        /// <param name="name">Release 名称</param>
        /// <param name="body">Release 描述</param>
        /// <param name="prerelease">是否为预览版本。默认: false（非预览版本）</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Release> PatchV5ReposOwnerRepoReleasesIdAsync(string access_token, string owner, string repo, string tag_name, string name, string body, bool? prerelease, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/releases/{id}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (tag_name == null)
                        throw new System.ArgumentNullException("tag_name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tag_name, System.Globalization.CultureInfo.InvariantCulture)), "tag_name");
                    }
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (body == null)
                        throw new System.ArgumentNullException("body");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    if (prerelease != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(prerelease, System.Globalization.CultureInfo.InvariantCulture)), "prerelease");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Release>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除仓库Release</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>删除仓库Release</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoReleasesIdAsync(string access_token, string owner, string repo, int id)
        {
            return DeleteV5ReposOwnerRepoReleasesIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除仓库Release</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>删除仓库Release</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoReleasesIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/releases/{id}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库的最后更新的Release</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Release> GetV5ReposOwnerRepoReleasesLatestAsync(string access_token, string owner, string repo)
        {
            return GetV5ReposOwnerRepoReleasesLatestAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库的最后更新的Release</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Release> GetV5ReposOwnerRepoReleasesLatestAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/releases/latest?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Release>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>根据Tag名称获取仓库的Release</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="tag">Tag 名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Release> GetV5ReposOwnerRepoReleasesTagsTagAsync(string access_token, string owner, string repo, string tag)
        {
            return GetV5ReposOwnerRepoReleasesTagsTagAsync(access_token, owner, repo, tag, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据Tag名称获取仓库的Release</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="tag">Tag 名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Release> GetV5ReposOwnerRepoReleasesTagsTagAsync(string access_token, string owner, string repo, string tag, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (tag == null)
                throw new System.ArgumentNullException("tag");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/releases/tags/{tag}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{tag}", System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Release>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出仓库的WebHooks</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Hook>> GetV5ReposOwnerRepoHooksAsync(string access_token, string owner, string repo, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoHooksAsync(access_token, owner, repo, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出仓库的WebHooks</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Hook>> GetV5ReposOwnerRepoHooksAsync(string access_token, string owner, string repo, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/hooks?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Hook>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建一个仓库WebHook</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="url">远程HTTP URL</param>
        /// <param name="password">请求URL时会带上该密码，防止URL被恶意请求</param>
        /// <param name="push_events">Push代码到仓库</param>
        /// <param name="tag_push_events">提交Tag到仓库</param>
        /// <param name="issues_events">创建/关闭Issue</param>
        /// <param name="note_events">评论了Issue/代码等等</param>
        /// <param name="merge_requests_events">合并请求和合并后</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Hook> PostV5ReposOwnerRepoHooksAsync(string access_token, string owner, string repo, string url, string password, bool? push_events, bool? tag_push_events, bool? issues_events, bool? note_events, bool? merge_requests_events)
        {
            return PostV5ReposOwnerRepoHooksAsync(access_token, owner, repo, url, password, push_events, tag_push_events, issues_events, note_events, merge_requests_events, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建一个仓库WebHook</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="url">远程HTTP URL</param>
        /// <param name="password">请求URL时会带上该密码，防止URL被恶意请求</param>
        /// <param name="push_events">Push代码到仓库</param>
        /// <param name="tag_push_events">提交Tag到仓库</param>
        /// <param name="issues_events">创建/关闭Issue</param>
        /// <param name="note_events">评论了Issue/代码等等</param>
        /// <param name="merge_requests_events">合并请求和合并后</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Hook> PostV5ReposOwnerRepoHooksAsync(string access_token, string owner, string repo, string url, string password, bool? push_events, bool? tag_push_events, bool? issues_events, bool? note_events, bool? merge_requests_events, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/hooks");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (url == null)
                        throw new System.ArgumentNullException("url");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(url, System.Globalization.CultureInfo.InvariantCulture)), "url");
                    }
                    if (password != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture)), "password");
                    }
                    if (push_events != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(push_events, System.Globalization.CultureInfo.InvariantCulture)), "push_events");
                    }
                    if (tag_push_events != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tag_push_events, System.Globalization.CultureInfo.InvariantCulture)), "tag_push_events");
                    }
                    if (issues_events != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(issues_events, System.Globalization.CultureInfo.InvariantCulture)), "issues_events");
                    }
                    if (note_events != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(note_events, System.Globalization.CultureInfo.InvariantCulture)), "note_events");
                    }
                    if (merge_requests_events != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(merge_requests_events, System.Globalization.CultureInfo.InvariantCulture)), "merge_requests_events");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Hook>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取仓库单个WebHook</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">Webhook的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Hook> GetV5ReposOwnerRepoHooksIdAsync(string access_token, string owner, string repo, int id)
        {
            return GetV5ReposOwnerRepoHooksIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取仓库单个WebHook</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">Webhook的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Hook> GetV5ReposOwnerRepoHooksIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/hooks/{id}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Hook>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新一个仓库WebHook</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">Webhook的ID</param>
        /// <param name="url">远程HTTP URL</param>
        /// <param name="password">请求URL时会带上该密码，防止URL被恶意请求</param>
        /// <param name="push_events">Push代码到仓库</param>
        /// <param name="tag_push_events">提交Tag到仓库</param>
        /// <param name="issues_events">创建/关闭Issue</param>
        /// <param name="note_events">评论了Issue/代码等等</param>
        /// <param name="merge_requests_events">合并请求和合并后</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Hook> PatchV5ReposOwnerRepoHooksIdAsync(string access_token, string owner, string repo, int id, string url, string password, bool? push_events, bool? tag_push_events, bool? issues_events, bool? note_events, bool? merge_requests_events)
        {
            return PatchV5ReposOwnerRepoHooksIdAsync(access_token, owner, repo, id, url, password, push_events, tag_push_events, issues_events, note_events, merge_requests_events, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新一个仓库WebHook</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">Webhook的ID</param>
        /// <param name="url">远程HTTP URL</param>
        /// <param name="password">请求URL时会带上该密码，防止URL被恶意请求</param>
        /// <param name="push_events">Push代码到仓库</param>
        /// <param name="tag_push_events">提交Tag到仓库</param>
        /// <param name="issues_events">创建/关闭Issue</param>
        /// <param name="note_events">评论了Issue/代码等等</param>
        /// <param name="merge_requests_events">合并请求和合并后</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Hook> PatchV5ReposOwnerRepoHooksIdAsync(string access_token, string owner, string repo, int id, string url, string password, bool? push_events, bool? tag_push_events, bool? issues_events, bool? note_events, bool? merge_requests_events, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/hooks/{id}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (url == null)
                        throw new System.ArgumentNullException("url");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(url, System.Globalization.CultureInfo.InvariantCulture)), "url");
                    }
                    if (password != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture)), "password");
                    }
                    if (push_events != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(push_events, System.Globalization.CultureInfo.InvariantCulture)), "push_events");
                    }
                    if (tag_push_events != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tag_push_events, System.Globalization.CultureInfo.InvariantCulture)), "tag_push_events");
                    }
                    if (issues_events != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(issues_events, System.Globalization.CultureInfo.InvariantCulture)), "issues_events");
                    }
                    if (note_events != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(note_events, System.Globalization.CultureInfo.InvariantCulture)), "note_events");
                    }
                    if (merge_requests_events != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(merge_requests_events, System.Globalization.CultureInfo.InvariantCulture)), "merge_requests_events");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Hook>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除一个仓库WebHook</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">Webhook的ID</param>
        /// <returns>删除一个仓库WebHook</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5ReposOwnerRepoHooksIdAsync(string access_token, string owner, string repo, int id)
        {
            return DeleteV5ReposOwnerRepoHooksIdAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除一个仓库WebHook</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">Webhook的ID</param>
        /// <returns>删除一个仓库WebHook</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5ReposOwnerRepoHooksIdAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/hooks/{id}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>测试WebHook是否发送成功</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">Webhook的ID</param>
        /// <returns>测试发送成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostV5ReposOwnerRepoHooksIdTestsAsync(string access_token, string owner, string repo, int id)
        {
            return PostV5ReposOwnerRepoHooksIdTestsAsync(access_token, owner, repo, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>测试WebHook是否发送成功</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="id">Webhook的ID</param>
        /// <returns>测试发送成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PostV5ReposOwnerRepoHooksIdTestsAsync(string access_token, string owner, string repo, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/hooks/{id}/tests");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出 star 了仓库的用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectStargazers>> GetV5ReposOwnerRepoStargazersAsync(string access_token, string owner, string repo, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoStargazersAsync(access_token, owner, repo, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出 star 了仓库的用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectStargazers>> GetV5ReposOwnerRepoStargazersAsync(string access_token, string owner, string repo, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/stargazers?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProjectStargazers>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出 watch 了仓库的用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectWatchers>> GetV5ReposOwnerRepoSubscribersAsync(string access_token, string owner, string repo, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoSubscribersAsync(access_token, owner, repo, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出 watch 了仓库的用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectWatchers>> GetV5ReposOwnerRepoSubscribersAsync(string access_token, string owner, string repo, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/subscribers?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProjectWatchers>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出仓库的所有动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5ReposOwnerRepoEventsAsync(string access_token, string owner, string repo, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoEventsAsync(access_token, owner, repo, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出仓库的所有动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5ReposOwnerRepoEventsAsync(string access_token, string owner, string repo, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/events?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Event>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出一个仓库里的通知</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="unread">是否只获取未读消息，默认：否</param>
        /// <param name="participating">是否只获取自己直接参与的消息，默认：否</param>
        /// <param name="type">筛选指定类型的通知，all：所有，event：事件通知，referer：@ 通知</param>
        /// <param name="since">只获取在给定时间后更新的消息，要求时间格式为 ISO 8601</param>
        /// <param name="before">只获取在给定时间前更新的消息，要求时间格式为 ISO 8601</param>
        /// <param name="ids">指定一组通知 ID，以 , 分隔</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserNotificationList>> GetV5ReposOwnerRepoNotificationsAsync(string access_token, string owner, string repo, bool? unread, bool? participating, Type? type, string since, string before, string ids, int? page, int? per_page)
        {
            return GetV5ReposOwnerRepoNotificationsAsync(access_token, owner, repo, unread, participating, type, since, before, ids, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出一个仓库里的通知</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="unread">是否只获取未读消息，默认：否</param>
        /// <param name="participating">是否只获取自己直接参与的消息，默认：否</param>
        /// <param name="type">筛选指定类型的通知，all：所有，event：事件通知，referer：@ 通知</param>
        /// <param name="since">只获取在给定时间后更新的消息，要求时间格式为 ISO 8601</param>
        /// <param name="before">只获取在给定时间前更新的消息，要求时间格式为 ISO 8601</param>
        /// <param name="ids">指定一组通知 ID，以 , 分隔</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserNotificationList>> GetV5ReposOwnerRepoNotificationsAsync(string access_token, string owner, string repo, bool? unread, bool? participating, Type? type, string since, string before, string ids, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/notifications?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (unread != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("unread") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unread, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (participating != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("participating") + "=").Append(System.Uri.EscapeDataString(ConvertToString(participating, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserNotificationList>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>标记一个仓库里的通知为已读</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="ids">指定一组通知 ID，以 , 分隔</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutV5ReposOwnerRepoNotificationsAsync(string access_token, string owner, string repo, string ids)
        {
            return PutV5ReposOwnerRepoNotificationsAsync(access_token, owner, repo, ids, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>标记一个仓库里的通知为已读</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="ids">指定一组通知 ID，以 , 分隔</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutV5ReposOwnerRepoNotificationsAsync(string access_token, string owner, string repo, string ids, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/repos/{owner}/{repo}/notifications");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (ids != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)), "ids");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 205)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出授权用户的所有公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SSHKey>> GetV5UserKeysAsync(string access_token, int? page, int? per_page)
        {
            return GetV5UserKeysAsync(access_token, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出授权用户的所有公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SSHKey>> GetV5UserKeysAsync(string access_token, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/keys?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SSHKey>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>添加一个公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="key">公钥内容</param>
        /// <param name="title">公钥名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SSHKey> PostV5UserKeysAsync(string access_token, string key, string title)
        {
            return PostV5UserKeysAsync(access_token, key, title, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>添加一个公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="key">公钥内容</param>
        /// <param name="title">公钥名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SSHKey> PostV5UserKeysAsync(string access_token, string key, string title, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/keys");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (key == null)
                        throw new System.ArgumentNullException("key");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture)), "key");
                    }
                    if (title == null)
                        throw new System.ArgumentNullException("title");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SSHKey>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6570\u636e\u4e0d\u5408\u6cd5", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取一个公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">公钥 ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SSHKey> GetV5UserKeysIdAsync(string access_token, int id)
        {
            return GetV5UserKeysIdAsync(access_token, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取一个公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">公钥 ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SSHKey> GetV5UserKeysIdAsync(string access_token, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/keys/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SSHKey>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除一个公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">公钥 ID</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5UserKeysIdAsync(string access_token, int id)
        {
            return DeleteV5UserKeysIdAsync(access_token, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除一个公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">公钥 ID</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5UserKeysIdAsync(string access_token, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/keys/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出授权用户所属的组织</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="admin">只列出授权用户管理的组织</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Group>> GetV5UserOrgsAsync(string access_token, int? page, int? per_page, bool? admin)
        {
            return GetV5UserOrgsAsync(access_token, page, per_page, admin, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出授权用户所属的组织</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="admin">只列出授权用户管理的组织</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Group>> GetV5UserOrgsAsync(string access_token, int? page, int? per_page, bool? admin, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/orgs?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (admin != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("admin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(admin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Group>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取授权用户的所有Issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="filter">筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned</param>
        /// <param name="state">Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="sort">排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</param>
        /// <param name="direction">排序方式: 升序(asc)，降序(desc)。默认: desc</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="schedule">计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80</param>
        /// <param name="deadline">计划截止日期，格式同上</param>
        /// <param name="created_at">任务创建时间，格式同上</param>
        /// <param name="finished_at">任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5UserIssuesAsync(string access_token, Filter? filter, State8? state, string labels, Sort9? sort, Direction5? direction, string since, int? page, int? per_page, string schedule, string deadline, string created_at, string finished_at)
        {
            return GetV5UserIssuesAsync(access_token, filter, state, labels, sort, direction, since, page, per_page, schedule, deadline, created_at, finished_at, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取授权用户的所有Issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="filter">筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned</param>
        /// <param name="state">Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="sort">排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</param>
        /// <param name="direction">排序方式: 升序(asc)，降序(desc)。默认: desc</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="schedule">计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80</param>
        /// <param name="deadline">计划截止日期，格式同上</param>
        /// <param name="created_at">任务创建时间，格式同上</param>
        /// <param name="finished_at">任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5UserIssuesAsync(string access_token, Filter? filter, State8? state, string labels, Sort9? sort, Direction5? direction, string since, int? page, int? per_page, string schedule, string deadline, string created_at, string finished_at, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/issues?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (labels != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("labels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(labels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (schedule != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("schedule") + "=").Append(System.Uri.EscapeDataString(ConvertToString(schedule, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deadline != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deadline") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deadline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (created_at != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at") + "=").Append(System.Uri.EscapeDataString(ConvertToString(created_at, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (finished_at != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("finished_at") + "=").Append(System.Uri.EscapeDataString(ConvertToString(finished_at, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Issue>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出授权用户的所有仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="visibility">公开(public)、私有(private)或者所有(all)，默认: 所有(all)</param>
        /// <param name="affiliation">owner(授权用户拥有的仓库)、collaborator(授权用户为仓库成员)、organization_member(授权用户为仓库所在组织并有访问仓库权限)、enterprise_member(授权用户所在企业并有访问仓库权限)、admin(所有有权限的，包括所管理的组织中所有仓库、所管理的企业的所有仓库)。
        ///                    可以用逗号分隔符组合。如: owner, organization_member 或 owner, collaborator, organization_member</param>
        /// <param name="type">筛选用户仓库: 其创建(owner)、个人(personal)、其为成员(member)、公开(public)、私有(private)，不能与 visibility 或 affiliation 参数一并使用，否则会报 422 错误</param>
        /// <param name="sort">排序方式: 创建时间(created)，更新时间(updated)，最后推送时间(pushed)，仓库所属与名称(full_name)。默认: full_name</param>
        /// <param name="direction">如果sort参数为full_name，用升序(asc)。否则降序(desc)</param>
        /// <param name="q">搜索关键字</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Project> GetV5UserReposAsync(string access_token, Visibility? visibility, string affiliation, Type2? type, Sort10? sort, Direction6? direction, string q, int? page, int? per_page)
        {
            return GetV5UserReposAsync(access_token, visibility, affiliation, type, sort, direction, q, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出授权用户的所有仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="visibility">公开(public)、私有(private)或者所有(all)，默认: 所有(all)</param>
        /// <param name="affiliation">owner(授权用户拥有的仓库)、collaborator(授权用户为仓库成员)、organization_member(授权用户为仓库所在组织并有访问仓库权限)、enterprise_member(授权用户所在企业并有访问仓库权限)、admin(所有有权限的，包括所管理的组织中所有仓库、所管理的企业的所有仓库)。
        ///                    可以用逗号分隔符组合。如: owner, organization_member 或 owner, collaborator, organization_member</param>
        /// <param name="type">筛选用户仓库: 其创建(owner)、个人(personal)、其为成员(member)、公开(public)、私有(private)，不能与 visibility 或 affiliation 参数一并使用，否则会报 422 错误</param>
        /// <param name="sort">排序方式: 创建时间(created)，更新时间(updated)，最后推送时间(pushed)，仓库所属与名称(full_name)。默认: full_name</param>
        /// <param name="direction">如果sort参数为full_name，用升序(asc)。否则降序(desc)</param>
        /// <param name="q">搜索关键字</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Project> GetV5UserReposAsync(string access_token, Visibility? visibility, string affiliation, Type2? type, Sort10? sort, Direction6? direction, string q, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/repos?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (visibility != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("visibility") + "=").Append(System.Uri.EscapeDataString(ConvertToString(visibility, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (affiliation != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("affiliation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(affiliation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Project>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">仓库名称</param>
        /// <param name="description">仓库描述</param>
        /// <param name="homepage">主页(eg: https://gitee.com)</param>
        /// <param name="has_issues">允许提Issue与否。默认: 允许(true)</param>
        /// <param name="has_wiki">提供Wiki与否。默认: 提供(true)</param>
        /// <param name="can_comment">允许用户对仓库进行评论。默认： 允许(true)</param>
        /// <param name="auto_init">值为true时则会用README初始化仓库。默认: 不初始化(false)</param>
        /// <param name="gitignore_template">Git Ignore模版</param>
        /// <param name="license_template">License模版</param>
        /// <param name="path">仓库路径</param>
        /// <param name="@private">仓库公开或私有。默认: 公开(false)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Project> PostV5UserReposAsync(string access_token, string name, string description, string homepage, bool? has_issues, bool? has_wiki, bool? can_comment, bool? auto_init, Gitignore_template? gitignore_template, License_template? license_template, string path, bool? @private)
        {
            return PostV5UserReposAsync(access_token, name, description, homepage, has_issues, has_wiki, can_comment, auto_init, gitignore_template, license_template, path, @private, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">仓库名称</param>
        /// <param name="description">仓库描述</param>
        /// <param name="homepage">主页(eg: https://gitee.com)</param>
        /// <param name="has_issues">允许提Issue与否。默认: 允许(true)</param>
        /// <param name="has_wiki">提供Wiki与否。默认: 提供(true)</param>
        /// <param name="can_comment">允许用户对仓库进行评论。默认： 允许(true)</param>
        /// <param name="auto_init">值为true时则会用README初始化仓库。默认: 不初始化(false)</param>
        /// <param name="gitignore_template">Git Ignore模版</param>
        /// <param name="license_template">License模版</param>
        /// <param name="path">仓库路径</param>
        /// <param name="@private">仓库公开或私有。默认: 公开(false)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Project> PostV5UserReposAsync(string access_token, string name, string description, string homepage, bool? has_issues, bool? has_wiki, bool? can_comment, bool? auto_init, Gitignore_template? gitignore_template, License_template? license_template, string path, bool? @private, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/repos");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (homepage != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(homepage, System.Globalization.CultureInfo.InvariantCulture)), "homepage");
                    }
                    if (has_issues != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(has_issues, System.Globalization.CultureInfo.InvariantCulture)), "has_issues");
                    }
                    if (has_wiki != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(has_wiki, System.Globalization.CultureInfo.InvariantCulture)), "has_wiki");
                    }
                    if (can_comment != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(can_comment, System.Globalization.CultureInfo.InvariantCulture)), "can_comment");
                    }
                    if (auto_init != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(auto_init, System.Globalization.CultureInfo.InvariantCulture)), "auto_init");
                    }
                    if (gitignore_template != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gitignore_template, System.Globalization.CultureInfo.InvariantCulture)), "gitignore_template");
                    }
                    if (license_template != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(license_template, System.Globalization.CultureInfo.InvariantCulture)), "license_template");
                    }
                    if (path != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture)), "path");
                    }
                    if (@private != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(@private, System.Globalization.CultureInfo.InvariantCulture)), "private");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Project>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取授权用户的资料</summary>
        /// <param name="access_token">用户授权码</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserDetail> GetV5UserAsync(string access_token)
        {
            return GetV5UserAsync(access_token, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取授权用户的资料</summary>
        /// <param name="access_token">用户授权码</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserDetail> GetV5UserAsync(string access_token, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserDetail>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新授权用户的资料</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">昵称</param>
        /// <param name="blog">微博链接</param>
        /// <param name="weibo">博客站点</param>
        /// <param name="bio">自我介绍</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<User> PatchV5UserAsync(string access_token, string name, string blog, string weibo, string bio)
        {
            return PatchV5UserAsync(access_token, name, blog, weibo, bio, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新授权用户的资料</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">昵称</param>
        /// <param name="blog">微博链接</param>
        /// <param name="weibo">博客站点</param>
        /// <param name="bio">自我介绍</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<User> PatchV5UserAsync(string access_token, string name, string blog, string weibo, string bio, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (name != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (blog != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(blog, System.Globalization.CultureInfo.InvariantCulture)), "blog");
                    }
                    if (weibo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(weibo, System.Globalization.CultureInfo.InvariantCulture)), "weibo");
                    }
                    if (bio != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(bio, System.Globalization.CultureInfo.InvariantCulture)), "bio");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出授权用户的关注者</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserBasic>> GetV5UserFollowersAsync(string access_token, int? page, int? per_page)
        {
            return GetV5UserFollowersAsync(access_token, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出授权用户的关注者</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserBasic>> GetV5UserFollowersAsync(string access_token, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/followers?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserBasic>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出授权用户正关注的用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserBasic>> GetV5UserFollowingAsync(string access_token, int? page, int? per_page)
        {
            return GetV5UserFollowingAsync(access_token, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出授权用户正关注的用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserBasic>> GetV5UserFollowingAsync(string access_token, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/following?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserBasic>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出授权用户所有的 Namespace</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="mode">参与方式: project(所有参与仓库的namepsce)、intrant(所加入的namespace)、all(包含前两者)，默认(intrant)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Namespace>> GetV5UserNamespacesAsync(string access_token, Mode? mode)
        {
            return GetV5UserNamespacesAsync(access_token, mode, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出授权用户所有的 Namespace</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="mode">参与方式: project(所有参与仓库的namepsce)、intrant(所加入的namespace)、all(包含前两者)，默认(intrant)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Namespace>> GetV5UserNamespacesAsync(string access_token, Mode? mode, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/namespaces?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Namespace>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取授权用户的一个 Namespace</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="path">Namespace path</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Namespace>> GetV5UserNamespaceAsync(string access_token, string path)
        {
            return GetV5UserNamespaceAsync(access_token, path, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取授权用户的一个 Namespace</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="path">Namespace path</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Namespace>> GetV5UserNamespaceAsync(string access_token, string path, System.Threading.CancellationToken cancellationToken)
        {
            if (path == null)
                throw new System.ArgumentNullException("path");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/namespace?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("path") + "=").Append(System.Uri.EscapeDataString(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Namespace>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出授权用户 star 了的仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="sort">根据仓库创建时间(created)或最后推送时间(updated)进行排序，默认：创建时间</param>
        /// <param name="direction">按递增(asc)或递减(desc)排序，默认：递减</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> GetV5UserStarredAsync(string access_token, Sort11? sort, Direction7? direction, int? page, int? per_page)
        {
            return GetV5UserStarredAsync(access_token, sort, direction, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出授权用户 star 了的仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="sort">根据仓库创建时间(created)或最后推送时间(updated)进行排序，默认：创建时间</param>
        /// <param name="direction">按递增(asc)或递减(desc)排序，默认：递减</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> GetV5UserStarredAsync(string access_token, Sort11? sort, Direction7? direction, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/starred?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Project>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出授权用户 watch 了的仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="sort">根据仓库创建时间(created)或最后推送时间(updated)进行排序，默认：创建时间</param>
        /// <param name="direction">按递增(asc)或递减(desc)排序，默认：递减</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> GetV5UserSubscriptionsAsync(string access_token, Sort12? sort, Direction8? direction, int? page, int? per_page)
        {
            return GetV5UserSubscriptionsAsync(access_token, sort, direction, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出授权用户 watch 了的仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="sort">根据仓库创建时间(created)或最后推送时间(updated)进行排序，默认：创建时间</param>
        /// <param name="direction">按递增(asc)或递减(desc)排序，默认：递减</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> GetV5UserSubscriptionsAsync(string access_token, Sort12? sort, Direction8? direction, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/subscriptions?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Project>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出授权用户所属的企业</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="admin">只列出授权用户管理的企业</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EnterpriseBasic>> GetV5UserEnterprisesAsync(string access_token, int? page, int? per_page, bool? admin)
        {
            return GetV5UserEnterprisesAsync(access_token, page, per_page, admin, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出授权用户所属的企业</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="admin">只列出授权用户管理的企业</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EnterpriseBasic>> GetV5UserEnterprisesAsync(string access_token, int? page, int? per_page, bool? admin, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/enterprises?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (admin != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("admin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(admin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EnterpriseBasic>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出授权用户在所属组织的成员资料</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="active">根据成员是否已激活进行筛选资料，缺省返回所有资料</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupMember>> GetV5UserMembershipsOrgsAsync(string access_token, bool? active, int? page, int? per_page)
        {
            return GetV5UserMembershipsOrgsAsync(access_token, active, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出授权用户在所属组织的成员资料</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="active">根据成员是否已激活进行筛选资料，缺省返回所有资料</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupMember>> GetV5UserMembershipsOrgsAsync(string access_token, bool? active, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/memberships/orgs?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (active != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("active") + "=").Append(System.Uri.EscapeDataString(ConvertToString(active, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GroupMember>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取授权用户在一个组织的成员资料</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GroupMember> GetV5UserMembershipsOrgsOrgAsync(string access_token, string org)
        {
            return GetV5UserMembershipsOrgsOrgAsync(access_token, org, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取授权用户在一个组织的成员资料</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GroupMember> GetV5UserMembershipsOrgsOrgAsync(string access_token, string org, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/memberships/orgs/{org}?");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupMember>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新授权用户在一个组织的成员资料</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="remark">在组织中的备注信息</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GroupMember> PatchV5UserMembershipsOrgsOrgAsync(string access_token, string org, string remark)
        {
            return PatchV5UserMembershipsOrgsOrgAsync(access_token, org, remark, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新授权用户在一个组织的成员资料</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="remark">在组织中的备注信息</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GroupMember> PatchV5UserMembershipsOrgsOrgAsync(string access_token, string org, string remark, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/memberships/orgs/{org}");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (remark != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(remark, System.Globalization.CultureInfo.InvariantCulture)), "remark");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupMember>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>退出一个组织</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5UserMembershipsOrgsOrgAsync(string access_token, string org)
        {
            return DeleteV5UserMembershipsOrgsOrgAsync(access_token, org, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>退出一个组织</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5UserMembershipsOrgsOrgAsync(string access_token, string org, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/memberships/orgs/{org}?");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>检查授权用户是否关注了一个用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>已关注</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5UserFollowingUsernameAsync(string access_token, string username)
        {
            return GetV5UserFollowingUsernameAsync(access_token, username, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>检查授权用户是否关注了一个用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>已关注</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5UserFollowingUsernameAsync(string access_token, string username, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/following/{username}?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>关注一个用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutV5UserFollowingUsernameAsync(string access_token, string username)
        {
            return PutV5UserFollowingUsernameAsync(access_token, username, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>关注一个用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutV5UserFollowingUsernameAsync(string access_token, string username, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/following/{username}");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>取消关注一个用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5UserFollowingUsernameAsync(string access_token, string username)
        {
            return DeleteV5UserFollowingUsernameAsync(access_token, username, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>取消关注一个用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5UserFollowingUsernameAsync(string access_token, string username, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/following/{username}?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>检查授权用户是否 star 了一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>已经 star 了仓库</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5UserStarredOwnerRepoAsync(string access_token, string owner, string repo)
        {
            return GetV5UserStarredOwnerRepoAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>检查授权用户是否 star 了一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>已经 star 了仓库</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5UserStarredOwnerRepoAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/starred/{owner}/{repo}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>star 一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutV5UserStarredOwnerRepoAsync(string access_token, string owner, string repo)
        {
            return PutV5UserStarredOwnerRepoAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>star 一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutV5UserStarredOwnerRepoAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/starred/{owner}/{repo}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6570\u636e\u4e0d\u5408\u6cd5", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>取消 star 一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5UserStarredOwnerRepoAsync(string access_token, string owner, string repo)
        {
            return DeleteV5UserStarredOwnerRepoAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>取消 star 一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5UserStarredOwnerRepoAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/starred/{owner}/{repo}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>检查授权用户是否 watch 了一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>已经 watch 了仓库</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5UserSubscriptionsOwnerRepoAsync(string access_token, string owner, string repo)
        {
            return GetV5UserSubscriptionsOwnerRepoAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>检查授权用户是否 watch 了一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>已经 watch 了仓库</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5UserSubscriptionsOwnerRepoAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/subscriptions/{owner}/{repo}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>watch 一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="watch_type">watch策略, watching: 关注所有动态, ignoring: 关注但不提醒动态</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutV5UserSubscriptionsOwnerRepoAsync(string access_token, string owner, string repo, Watch_type watch_type)
        {
            return PutV5UserSubscriptionsOwnerRepoAsync(access_token, owner, repo, watch_type, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>watch 一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="watch_type">watch策略, watching: 关注所有动态, ignoring: 关注但不提醒动态</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutV5UserSubscriptionsOwnerRepoAsync(string access_token, string owner, string repo, Watch_type watch_type, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/subscriptions/{owner}/{repo}");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (watch_type == null)
                        throw new System.ArgumentNullException("watch_type");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(watch_type, System.Globalization.CultureInfo.InvariantCulture)), "watch_type");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6570\u636e\u4e0d\u5408\u6cd5", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>取消 watch 一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5UserSubscriptionsOwnerRepoAsync(string access_token, string owner, string repo)
        {
            return DeleteV5UserSubscriptionsOwnerRepoAsync(access_token, owner, repo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>取消 watch 一个仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5UserSubscriptionsOwnerRepoAsync(string access_token, string owner, string repo, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/user/subscriptions/{owner}/{repo}?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Code>> GetV5GistsAsync(string access_token, string since, int? page, int? per_page)
        {
            return GetV5GistsAsync(access_token, since, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Code>> GetV5GistsAsync(string access_token, string since, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Code>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="files">Hash形式的代码片段文件名以及文件内容。如: { "file1.txt": { "content": "String file contents" } }</param>
        /// <param name="description">代码片段描述，1~30个字符</param>
        /// <param name="@public">公开/私有，默认: 私有</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CodeForksHistory>> PostV5GistsAsync(string access_token, object files, string description, bool? @public)
        {
            return PostV5GistsAsync(access_token, files, description, @public, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="files">Hash形式的代码片段文件名以及文件内容。如: { "file1.txt": { "content": "String file contents" } }</param>
        /// <param name="description">代码片段描述，1~30个字符</param>
        /// <param name="@public">公开/私有，默认: 私有</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CodeForksHistory>> PostV5GistsAsync(string access_token, object files, string description, bool? @public, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (files == null)
                        throw new System.ArgumentNullException("files");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(files, System.Globalization.CultureInfo.InvariantCulture)), "files");
                    }
                    if (description == null)
                        throw new System.ArgumentNullException("description");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (@public != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(@public, System.Globalization.CultureInfo.InvariantCulture)), "public");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CodeForksHistory>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取用户Star的代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Code>> GetV5GistsStarredAsync(string access_token, string since, int? page, int? per_page)
        {
            return GetV5GistsStarredAsync(access_token, since, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取用户Star的代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Code>> GetV5GistsStarredAsync(string access_token, string since, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/starred?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Code>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取代码片段的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="gist_id">代码片段的ID</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CodeComment>> GetV5GistsGistIdCommentsAsync(string access_token, string gist_id, int? page, int? per_page)
        {
            return GetV5GistsGistIdCommentsAsync(access_token, gist_id, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取代码片段的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="gist_id">代码片段的ID</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CodeComment>> GetV5GistsGistIdCommentsAsync(string access_token, string gist_id, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (gist_id == null)
                throw new System.ArgumentNullException("gist_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{gist_id}/comments?");
            urlBuilder_.Replace("{gist_id}", System.Uri.EscapeDataString(ConvertToString(gist_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CodeComment>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>增加代码片段的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="gist_id">代码片段的ID</param>
        /// <param name="body">评论内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CodeComment> PostV5GistsGistIdCommentsAsync(string access_token, string gist_id, string body)
        {
            return PostV5GistsGistIdCommentsAsync(access_token, gist_id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>增加代码片段的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="gist_id">代码片段的ID</param>
        /// <param name="body">评论内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CodeComment> PostV5GistsGistIdCommentsAsync(string access_token, string gist_id, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (gist_id == null)
                throw new System.ArgumentNullException("gist_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{gist_id}/comments");
            urlBuilder_.Replace("{gist_id}", System.Uri.EscapeDataString(ConvertToString(gist_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (body == null)
                        throw new System.ArgumentNullException("body");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CodeComment>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取单条代码片段的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="gist_id">代码片段的ID</param>
        /// <param name="id">评论的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CodeComment> GetV5GistsGistIdCommentsIdAsync(string access_token, string gist_id, int id)
        {
            return GetV5GistsGistIdCommentsIdAsync(access_token, gist_id, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取单条代码片段的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="gist_id">代码片段的ID</param>
        /// <param name="id">评论的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CodeComment> GetV5GistsGistIdCommentsIdAsync(string access_token, string gist_id, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (gist_id == null)
                throw new System.ArgumentNullException("gist_id");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{gist_id}/comments/{id}?");
            urlBuilder_.Replace("{gist_id}", System.Uri.EscapeDataString(ConvertToString(gist_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CodeComment>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>修改代码片段的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="gist_id">代码片段的ID</param>
        /// <param name="id">评论的ID</param>
        /// <param name="body">评论内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CodeComment> PatchV5GistsGistIdCommentsIdAsync(string access_token, string gist_id, int id, string body)
        {
            return PatchV5GistsGistIdCommentsIdAsync(access_token, gist_id, id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改代码片段的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="gist_id">代码片段的ID</param>
        /// <param name="id">评论的ID</param>
        /// <param name="body">评论内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CodeComment> PatchV5GistsGistIdCommentsIdAsync(string access_token, string gist_id, int id, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (gist_id == null)
                throw new System.ArgumentNullException("gist_id");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{gist_id}/comments/{id}");
            urlBuilder_.Replace("{gist_id}", System.Uri.EscapeDataString(ConvertToString(gist_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (body == null)
                        throw new System.ArgumentNullException("body");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CodeComment>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除代码片段的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="gist_id">代码片段的ID</param>
        /// <param name="id">评论的ID</param>
        /// <returns>删除代码片段的评论</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5GistsGistIdCommentsIdAsync(string access_token, string gist_id, int id)
        {
            return DeleteV5GistsGistIdCommentsIdAsync(access_token, gist_id, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除代码片段的评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="gist_id">代码片段的ID</param>
        /// <param name="id">评论的ID</param>
        /// <returns>删除代码片段的评论</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5GistsGistIdCommentsIdAsync(string access_token, string gist_id, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (gist_id == null)
                throw new System.ArgumentNullException("gist_id");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{gist_id}/comments/{id}?");
            urlBuilder_.Replace("{gist_id}", System.Uri.EscapeDataString(ConvertToString(gist_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取单条代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CodeForksHistory> GetV5GistsIdAsync(string access_token, string id)
        {
            return GetV5GistsIdAsync(access_token, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取单条代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CodeForksHistory> GetV5GistsIdAsync(string access_token, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CodeForksHistory>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>修改代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <param name="files">Hash形式的代码片段文件名以及文件内容。如: { "file1.txt": { "content": "String file contents" } }</param>
        /// <param name="description">代码片段描述，1~30个字符</param>
        /// <param name="@public">公开/私有，默认: 私有</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CodeForksHistory> PatchV5GistsIdAsync(string access_token, string id, object files, string description, bool? @public)
        {
            return PatchV5GistsIdAsync(access_token, id, files, description, @public, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <param name="files">Hash形式的代码片段文件名以及文件内容。如: { "file1.txt": { "content": "String file contents" } }</param>
        /// <param name="description">代码片段描述，1~30个字符</param>
        /// <param name="@public">公开/私有，默认: 私有</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CodeForksHistory> PatchV5GistsIdAsync(string access_token, string id, object files, string description, bool? @public, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (files != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(files, System.Globalization.CultureInfo.InvariantCulture)), "files");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (@public != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(@public, System.Globalization.CultureInfo.InvariantCulture)), "public");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CodeForksHistory>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除指定代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>删除指定代码片段</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5GistsIdAsync(string access_token, string id)
        {
            return DeleteV5GistsIdAsync(access_token, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除指定代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>删除指定代码片段</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5GistsIdAsync(string access_token, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取代码片段的commit</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CodeForksHistory> GetV5GistsIdCommitsAsync(string access_token, string id)
        {
            return GetV5GistsIdCommitsAsync(access_token, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取代码片段的commit</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CodeForksHistory> GetV5GistsIdCommitsAsync(string access_token, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{id}/commits?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CodeForksHistory>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Star代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>Star代码片段</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutV5GistsIdStarAsync(string access_token, string id)
        {
            return PutV5GistsIdStarAsync(access_token, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Star代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>Star代码片段</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutV5GistsIdStarAsync(string access_token, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{id}/star");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>取消Star代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>取消Star代码片段</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5GistsIdStarAsync(string access_token, string id)
        {
            return DeleteV5GistsIdStarAsync(access_token, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>取消Star代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>取消Star代码片段</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5GistsIdStarAsync(string access_token, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{id}/star?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>判断代码片段是否已Star</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>判断代码片段是否已Star</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5GistsIdStarAsync(string access_token, string id)
        {
            return GetV5GistsIdStarAsync(access_token, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>判断代码片段是否已Star</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>判断代码片段是否已Star</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5GistsIdStarAsync(string access_token, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{id}/star?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Fork代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>Fork代码片段</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostV5GistsIdForksAsync(string access_token, string id)
        {
            return PostV5GistsIdForksAsync(access_token, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fork代码片段</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <returns>Fork代码片段</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PostV5GistsIdForksAsync(string access_token, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{id}/forks");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取 Fork 了指定代码片段的列表</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CodeForks> GetV5GistsIdForksAsync(string access_token, string id, int? page, int? per_page)
        {
            return GetV5GistsIdForksAsync(access_token, id, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取 Fork 了指定代码片段的列表</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">代码片段的ID</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CodeForks> GetV5GistsIdForksAsync(string access_token, string id, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gists/{id}/forks?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CodeForks>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出用户所属的组织</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Group>> GetV5UsersUsernameOrgsAsync(string access_token, string username, int? page, int? per_page)
        {
            return GetV5UsersUsernameOrgsAsync(access_token, username, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出用户所属的组织</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Group>> GetV5UsersUsernameOrgsAsync(string access_token, string username, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}/orgs?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Group>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建组织</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">组织名称</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="description">组织描述</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Group> PostV5UsersOrganizationAsync(string access_token, string name, string org, string description)
        {
            return PostV5UsersOrganizationAsync(access_token, name, org, description, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建组织</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">组织名称</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="description">组织描述</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Group> PostV5UsersOrganizationAsync(string access_token, string name, string org, string description, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/organization");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (org == null)
                        throw new System.ArgumentNullException("org");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)), "org");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Group>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取某个用户的公开仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="type">用户创建的仓库(owner)，用户个人仓库(personal)，用户为仓库成员(member)，所有(all)。默认: 所有(all)</param>
        /// <param name="sort">排序方式: 创建时间(created)，更新时间(updated)，最后推送时间(pushed)，仓库所属与名称(full_name)。默认: full_name</param>
        /// <param name="direction">如果sort参数为full_name，用升序(asc)。否则降序(desc)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Project> GetV5UsersUsernameReposAsync(string access_token, string username, Type3? type, Sort13? sort, Direction9? direction, int? page, int? per_page)
        {
            return GetV5UsersUsernameReposAsync(access_token, username, type, sort, direction, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取某个用户的公开仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="type">用户创建的仓库(owner)，用户个人仓库(personal)，用户为仓库成员(member)，所有(all)。默认: 所有(all)</param>
        /// <param name="sort">排序方式: 创建时间(created)，更新时间(updated)，最后推送时间(pushed)，仓库所属与名称(full_name)。默认: full_name</param>
        /// <param name="direction">如果sort参数为full_name，用升序(asc)。否则降序(desc)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Project> GetV5UsersUsernameReposAsync(string access_token, string username, Type3? type, Sort13? sort, Direction9? direction, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}/repos?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Project>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取一个用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserInfo> GetV5UsersUsernameAsync(string access_token, string username)
        {
            return GetV5UsersUsernameAsync(access_token, username, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取一个用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserInfo> GetV5UsersUsernameAsync(string access_token, string username, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserInfo>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出指定用户的关注者</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserBasic>> GetV5UsersUsernameFollowersAsync(string access_token, string username, int? page, int? per_page)
        {
            return GetV5UsersUsernameFollowersAsync(access_token, username, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出指定用户的关注者</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserBasic>> GetV5UsersUsernameFollowersAsync(string access_token, string username, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}/followers?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserBasic>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出指定用户正在关注的用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserBasic>> GetV5UsersUsernameFollowingAsync(string access_token, string username, int? page, int? per_page)
        {
            return GetV5UsersUsernameFollowingAsync(access_token, username, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出指定用户正在关注的用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserBasic>> GetV5UsersUsernameFollowingAsync(string access_token, string username, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}/following?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserBasic>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>检查指定用户是否关注目标用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="target_user">目标用户的用户名(username/login)</param>
        /// <returns>已关注目标用户</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5UsersUsernameFollowingTargetUserAsync(string access_token, string username, string target_user)
        {
            return GetV5UsersUsernameFollowingTargetUserAsync(access_token, username, target_user, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>检查指定用户是否关注目标用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="target_user">目标用户的用户名(username/login)</param>
        /// <returns>已关注目标用户</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5UsersUsernameFollowingTargetUserAsync(string access_token, string username, string target_user, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            if (target_user == null)
                throw new System.ArgumentNullException("target_user");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}/following/{target_user}?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{target_user}", System.Uri.EscapeDataString(ConvertToString(target_user, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出指定用户的所有公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SSHKeyBasic>> GetV5UsersUsernameKeysAsync(string access_token, string username, int? page, int? per_page)
        {
            return GetV5UsersUsernameKeysAsync(access_token, username, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出指定用户的所有公钥</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SSHKeyBasic>> GetV5UsersUsernameKeysAsync(string access_token, string username, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}/keys?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SSHKeyBasic>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出用户 star 了的仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="sort">根据仓库创建时间(created)或最后推送时间(updated)进行排序，默认：创建时间</param>
        /// <param name="direction">按递增(asc)或递减(desc)排序，默认：递减</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> GetV5UsersUsernameStarredAsync(string access_token, string username, int? page, int? per_page, Sort14? sort, Direction10? direction)
        {
            return GetV5UsersUsernameStarredAsync(access_token, username, page, per_page, sort, direction, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出用户 star 了的仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="sort">根据仓库创建时间(created)或最后推送时间(updated)进行排序，默认：创建时间</param>
        /// <param name="direction">按递增(asc)或递减(desc)排序，默认：递减</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> GetV5UsersUsernameStarredAsync(string access_token, string username, int? page, int? per_page, Sort14? sort, Direction10? direction, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}/starred?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Project>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出用户 watch 了的仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="sort">根据仓库创建时间(created)或最后推送时间(updated)进行排序，默认：创建时间</param>
        /// <param name="direction">按递增(asc)或递减(desc)排序，默认：递减</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> GetV5UsersUsernameSubscriptionsAsync(string access_token, string username, int? page, int? per_page, Sort15? sort, Direction11? direction)
        {
            return GetV5UsersUsernameSubscriptionsAsync(access_token, username, page, per_page, sort, direction, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出用户 watch 了的仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="sort">根据仓库创建时间(created)或最后推送时间(updated)进行排序，默认：创建时间</param>
        /// <param name="direction">按递增(asc)或递减(desc)排序，默认：递减</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> GetV5UsersUsernameSubscriptionsAsync(string access_token, string username, int? page, int? per_page, Sort15? sort, Direction11? direction, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}/subscriptions?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Project>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出一个用户收到的动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5UsersUsernameReceivedEventsAsync(string access_token, string username, int? page, int? per_page)
        {
            return GetV5UsersUsernameReceivedEventsAsync(access_token, username, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出一个用户收到的动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5UsersUsernameReceivedEventsAsync(string access_token, string username, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}/received_events?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Event>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出一个用户收到的公开动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5UsersUsernameReceivedEventsPublicAsync(string access_token, string username, int? page, int? per_page)
        {
            return GetV5UsersUsernameReceivedEventsPublicAsync(access_token, username, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出一个用户收到的公开动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5UsersUsernameReceivedEventsPublicAsync(string access_token, string username, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}/received_events/public?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Event>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出用户的动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5UsersUsernameEventsAsync(string access_token, string username, int? page, int? per_page)
        {
            return GetV5UsersUsernameEventsAsync(access_token, username, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出用户的动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5UsersUsernameEventsAsync(string access_token, string username, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}/events?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Event>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出用户的公开动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5UsersUsernameEventsPublicAsync(string access_token, string username, int? page, int? per_page)
        {
            return GetV5UsersUsernameEventsPublicAsync(access_token, username, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出用户的公开动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5UsersUsernameEventsPublicAsync(string access_token, string username, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}/events/public?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Event>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出用户所属组织的动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5UsersUsernameEventsOrgsOrgAsync(string access_token, string username, int? page, int? per_page, string org)
        {
            return GetV5UsersUsernameEventsOrgsOrgAsync(access_token, username, page, per_page, org, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出用户所属组织的动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5UsersUsernameEventsOrgsOrgAsync(string access_token, string username, int? page, int? per_page, string org, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/users/{username}/events/orgs/{org}?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Event>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取一个组织</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Group> GetV5OrgsOrgAsync(string access_token, string org)
        {
            return GetV5OrgsOrgAsync(access_token, org, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取一个组织</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Group> GetV5OrgsOrgAsync(string access_token, string org, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/orgs/{org}?");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Group>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新授权用户所管理的组织资料</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="email">组织公开的邮箱地址</param>
        /// <param name="location">组织所在地</param>
        /// <param name="name">组织名称</param>
        /// <param name="description">组织简介</param>
        /// <param name="html_url">组织站点</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GroupDetail> PatchV5OrgsOrgAsync(string access_token, string org, string email, string location, string name, string description, string html_url)
        {
            return PatchV5OrgsOrgAsync(access_token, org, email, location, name, description, html_url, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新授权用户所管理的组织资料</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="email">组织公开的邮箱地址</param>
        /// <param name="location">组织所在地</param>
        /// <param name="name">组织名称</param>
        /// <param name="description">组织简介</param>
        /// <param name="html_url">组织站点</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GroupDetail> PatchV5OrgsOrgAsync(string access_token, string org, string email, string location, string name, string description, string html_url, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/orgs/{org}");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (email != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)), "email");
                    }
                    if (location != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(location, System.Globalization.CultureInfo.InvariantCulture)), "location");
                    }
                    if (name != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (html_url != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(html_url, System.Globalization.CultureInfo.InvariantCulture)), "html_url");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupDetail>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6570\u636e\u4e0d\u5408\u6cd5", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出一个组织的所有成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="role">根据角色筛选成员</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserBasic>> GetV5OrgsOrgMembersAsync(string access_token, string org, int? page, int? per_page, Role? role)
        {
            return GetV5OrgsOrgMembersAsync(access_token, org, page, per_page, role, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出一个组织的所有成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="role">根据角色筛选成员</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserBasic>> GetV5OrgsOrgMembersAsync(string access_token, string org, int? page, int? per_page, Role? role, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/orgs/{org}/members?");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (role != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("role") + "=").Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserBasic>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出指定组织的所有关注者</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupFollowers>> GetV5OrgsOrgFollowersAsync(string access_token, string org, int? page, int? per_page)
        {
            return GetV5OrgsOrgFollowersAsync(access_token, org, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出指定组织的所有关注者</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupFollowers>> GetV5OrgsOrgFollowersAsync(string access_token, string org, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/orgs/{org}/followers?");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GroupFollowers>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取当前用户某个组织的Issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="filter">筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned</param>
        /// <param name="state">Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="sort">排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</param>
        /// <param name="direction">排序方式: 升序(asc)，降序(desc)。默认: desc</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="schedule">计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80</param>
        /// <param name="deadline">计划截止日期，格式同上</param>
        /// <param name="created_at">任务创建时间，格式同上</param>
        /// <param name="finished_at">任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5OrgsOrgIssuesAsync(string access_token, Filter2? filter, State9? state, string labels, Sort16? sort, Direction12? direction, string since, int? page, int? per_page, string schedule, string deadline, string created_at, string finished_at, string org)
        {
            return GetV5OrgsOrgIssuesAsync(access_token, filter, state, labels, sort, direction, since, page, per_page, schedule, deadline, created_at, finished_at, org, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取当前用户某个组织的Issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="filter">筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned</param>
        /// <param name="state">Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="sort">排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</param>
        /// <param name="direction">排序方式: 升序(asc)，降序(desc)。默认: desc</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="schedule">计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80</param>
        /// <param name="deadline">计划截止日期，格式同上</param>
        /// <param name="created_at">任务创建时间，格式同上</param>
        /// <param name="finished_at">任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5OrgsOrgIssuesAsync(string access_token, Filter2? filter, State9? state, string labels, Sort16? sort, Direction12? direction, string since, int? page, int? per_page, string schedule, string deadline, string created_at, string finished_at, string org, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/orgs/{org}/issues?");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (labels != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("labels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(labels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (schedule != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("schedule") + "=").Append(System.Uri.EscapeDataString(ConvertToString(schedule, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deadline != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deadline") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deadline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (created_at != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at") + "=").Append(System.Uri.EscapeDataString(ConvertToString(created_at, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (finished_at != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("finished_at") + "=").Append(System.Uri.EscapeDataString(ConvertToString(finished_at, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Issue>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取一个组织的仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="type">筛选仓库的类型，可以是 all, public, private。默认: all</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Project> GetV5OrgsOrgReposAsync(string access_token, string org, Type4? type, int? page, int? per_page)
        {
            return GetV5OrgsOrgReposAsync(access_token, org, type, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取一个组织的仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="type">筛选仓库的类型，可以是 all, public, private。默认: all</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Project> GetV5OrgsOrgReposAsync(string access_token, string org, Type4? type, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/orgs/{org}/repos?");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Project>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建组织仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">仓库名称</param>
        /// <param name="description">仓库描述</param>
        /// <param name="homepage">主页(eg: https://gitee.com)</param>
        /// <param name="has_issues">允许提Issue与否。默认: 允许(true)</param>
        /// <param name="has_wiki">提供Wiki与否。默认: 提供(true)</param>
        /// <param name="can_comment">允许用户对仓库进行评论。默认： 允许(true)</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="@public">仓库开源类型。0(私有), 1(外部开源), 2(内部开源)，注：与private互斥，以public为主。</param>
        /// <param name="@private">仓库公开或私有。默认: 公开(false)，注：与public互斥，以public为主。</param>
        /// <param name="auto_init">值为true时则会用README初始化仓库。默认: 不初始化(false)</param>
        /// <param name="gitignore_template">Git Ignore模版</param>
        /// <param name="license_template">License模版</param>
        /// <param name="path">仓库路径</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Project> PostV5OrgsOrgReposAsync(string access_token, string name, string description, string homepage, bool? has_issues, bool? has_wiki, bool? can_comment, string org, Public? @public, bool? @private, bool? auto_init, Gitignore_template2? gitignore_template, License_template2? license_template, string path)
        {
            return PostV5OrgsOrgReposAsync(access_token, name, description, homepage, has_issues, has_wiki, can_comment, org, @public, @private, auto_init, gitignore_template, license_template, path, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建组织仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">仓库名称</param>
        /// <param name="description">仓库描述</param>
        /// <param name="homepage">主页(eg: https://gitee.com)</param>
        /// <param name="has_issues">允许提Issue与否。默认: 允许(true)</param>
        /// <param name="has_wiki">提供Wiki与否。默认: 提供(true)</param>
        /// <param name="can_comment">允许用户对仓库进行评论。默认： 允许(true)</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="@public">仓库开源类型。0(私有), 1(外部开源), 2(内部开源)，注：与private互斥，以public为主。</param>
        /// <param name="@private">仓库公开或私有。默认: 公开(false)，注：与public互斥，以public为主。</param>
        /// <param name="auto_init">值为true时则会用README初始化仓库。默认: 不初始化(false)</param>
        /// <param name="gitignore_template">Git Ignore模版</param>
        /// <param name="license_template">License模版</param>
        /// <param name="path">仓库路径</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Project> PostV5OrgsOrgReposAsync(string access_token, string name, string description, string homepage, bool? has_issues, bool? has_wiki, bool? can_comment, string org, Public? @public, bool? @private, bool? auto_init, Gitignore_template2? gitignore_template, License_template2? license_template, string path, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/orgs/{org}/repos");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (homepage != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(homepage, System.Globalization.CultureInfo.InvariantCulture)), "homepage");
                    }
                    if (has_issues != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(has_issues, System.Globalization.CultureInfo.InvariantCulture)), "has_issues");
                    }
                    if (has_wiki != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(has_wiki, System.Globalization.CultureInfo.InvariantCulture)), "has_wiki");
                    }
                    if (can_comment != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(can_comment, System.Globalization.CultureInfo.InvariantCulture)), "can_comment");
                    }
                    if (@public != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(@public, System.Globalization.CultureInfo.InvariantCulture)), "public");
                    }
                    if (@private != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(@private, System.Globalization.CultureInfo.InvariantCulture)), "private");
                    }
                    if (auto_init != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(auto_init, System.Globalization.CultureInfo.InvariantCulture)), "auto_init");
                    }
                    if (gitignore_template != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gitignore_template, System.Globalization.CultureInfo.InvariantCulture)), "gitignore_template");
                    }
                    if (license_template != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(license_template, System.Globalization.CultureInfo.InvariantCulture)), "license_template");
                    }
                    if (path != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture)), "path");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Project>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>移除授权用户所管理组织中的成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5OrgsOrgMembershipsUsernameAsync(string access_token, string org, string username)
        {
            return DeleteV5OrgsOrgMembershipsUsernameAsync(access_token, org, username, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>移除授权用户所管理组织中的成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5OrgsOrgMembershipsUsernameAsync(string access_token, string org, string username, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/orgs/{org}/memberships/{username}?");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取授权用户所属组织的一个成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GroupMember> GetV5OrgsOrgMembershipsUsernameAsync(string access_token, string org, string username)
        {
            return GetV5OrgsOrgMembershipsUsernameAsync(access_token, org, username, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取授权用户所属组织的一个成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GroupMember> GetV5OrgsOrgMembershipsUsernameAsync(string access_token, string org, string username, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/orgs/{org}/memberships/{username}?");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupMember>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>增加或更新授权用户所管理组织的成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="role">设置用户在组织的角色</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GroupMember> PutV5OrgsOrgMembershipsUsernameAsync(string access_token, string org, string username, Role2? role)
        {
            return PutV5OrgsOrgMembershipsUsernameAsync(access_token, org, username, role, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>增加或更新授权用户所管理组织的成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="role">设置用户在组织的角色</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GroupMember> PutV5OrgsOrgMembershipsUsernameAsync(string access_token, string org, string username, Role2? role, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/orgs/{org}/memberships/{username}");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (role != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)), "role");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupMember>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6570\u636e\u4e0d\u5408\u6cd5", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出组织的公开动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5OrgsOrgEventsAsync(string access_token, string org, int? page, int? per_page)
        {
            return GetV5OrgsOrgEventsAsync(access_token, org, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出组织的公开动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="org">组织的路径(path/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5OrgsOrgEventsAsync(string access_token, string org, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (org == null)
                throw new System.ArgumentNullException("org");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/orgs/{org}/events?");
            urlBuilder_.Replace("{org}", System.Uri.EscapeDataString(ConvertToString(org, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Event>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取当前授权用户的所有Issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="filter">筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned</param>
        /// <param name="state">Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="sort">排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</param>
        /// <param name="direction">排序方式: 升序(asc)，降序(desc)。默认: desc</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="schedule">计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80</param>
        /// <param name="deadline">计划截止日期，格式同上</param>
        /// <param name="created_at">任务创建时间，格式同上</param>
        /// <param name="finished_at">任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5IssuesAsync(string access_token, Filter3? filter, State10? state, string labels, Sort17? sort, Direction13? direction, string since, int? page, int? per_page, string schedule, string deadline, string created_at, string finished_at)
        {
            return GetV5IssuesAsync(access_token, filter, state, labels, sort, direction, since, page, per_page, schedule, deadline, created_at, finished_at, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取当前授权用户的所有Issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="filter">筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned</param>
        /// <param name="state">Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="sort">排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</param>
        /// <param name="direction">排序方式: 升序(asc)，降序(desc)。默认: desc</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="schedule">计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80</param>
        /// <param name="deadline">计划截止日期，格式同上</param>
        /// <param name="created_at">任务创建时间，格式同上</param>
        /// <param name="finished_at">任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5IssuesAsync(string access_token, Filter3? filter, State10? state, string labels, Sort17? sort, Direction13? direction, string since, int? page, int? per_page, string schedule, string deadline, string created_at, string finished_at, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/issues?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (labels != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("labels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(labels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (schedule != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("schedule") + "=").Append(System.Uri.EscapeDataString(ConvertToString(schedule, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deadline != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deadline") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deadline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (created_at != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at") + "=").Append(System.Uri.EscapeDataString(ConvertToString(created_at, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (finished_at != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("finished_at") + "=").Append(System.Uri.EscapeDataString(ConvertToString(finished_at, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Issue>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取某个企业的所有Issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="state">Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="sort">排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</param>
        /// <param name="direction">排序方式: 升序(asc)，降序(desc)。默认: desc</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="schedule">计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80</param>
        /// <param name="deadline">计划截止日期，格式同上</param>
        /// <param name="created_at">任务创建时间，格式同上</param>
        /// <param name="finished_at">任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上</param>
        /// <param name="milestone">根据里程碑标题。none为没里程碑的，*为所有带里程碑的</param>
        /// <param name="assignee">用户的username。 none为没指派者, *为所有带有指派者的</param>
        /// <param name="creator">创建Issues的用户username</param>
        /// <param name="program">所属项目名称。none为没所属有项目的，*为所有带所属项目的</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5EnterprisesEnterpriseIssuesAsync(string access_token, string enterprise, State11? state, string labels, Sort18? sort, Direction14? direction, string since, int? page, int? per_page, string schedule, string deadline, string created_at, string finished_at, string milestone, string assignee, string creator, string program)
        {
            return GetV5EnterprisesEnterpriseIssuesAsync(access_token, enterprise, state, labels, sort, direction, since, page, per_page, schedule, deadline, created_at, finished_at, milestone, assignee, creator, program, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取某个企业的所有Issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="state">Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="sort">排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</param>
        /// <param name="direction">排序方式: 升序(asc)，降序(desc)。默认: desc</param>
        /// <param name="since">起始的更新时间，要求时间格式为 ISO 8601</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="schedule">计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80</param>
        /// <param name="deadline">计划截止日期，格式同上</param>
        /// <param name="created_at">任务创建时间，格式同上</param>
        /// <param name="finished_at">任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上</param>
        /// <param name="milestone">根据里程碑标题。none为没里程碑的，*为所有带里程碑的</param>
        /// <param name="assignee">用户的username。 none为没指派者, *为所有带有指派者的</param>
        /// <param name="creator">创建Issues的用户username</param>
        /// <param name="program">所属项目名称。none为没所属有项目的，*为所有带所属项目的</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5EnterprisesEnterpriseIssuesAsync(string access_token, string enterprise, State11? state, string labels, Sort18? sort, Direction14? direction, string since, int? page, int? per_page, string schedule, string deadline, string created_at, string finished_at, string milestone, string assignee, string creator, string program, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/issues?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (labels != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("labels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(labels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (schedule != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("schedule") + "=").Append(System.Uri.EscapeDataString(ConvertToString(schedule, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deadline != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deadline") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deadline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (created_at != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at") + "=").Append(System.Uri.EscapeDataString(ConvertToString(created_at, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (finished_at != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("finished_at") + "=").Append(System.Uri.EscapeDataString(ConvertToString(finished_at, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (milestone != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("milestone") + "=").Append(System.Uri.EscapeDataString(ConvertToString(milestone, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (assignee != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("assignee") + "=").Append(System.Uri.EscapeDataString(ConvertToString(assignee, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creator != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("creator") + "=").Append(System.Uri.EscapeDataString(ConvertToString(creator, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (program != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("program") + "=").Append(System.Uri.EscapeDataString(ConvertToString(program, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Issue>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取一个企业</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EnterpriseBasic> GetV5EnterprisesEnterpriseAsync(string access_token, string enterprise)
        {
            return GetV5EnterprisesEnterpriseAsync(access_token, enterprise, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取一个企业</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EnterpriseBasic> GetV5EnterprisesEnterpriseAsync(string access_token, string enterprise, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnterpriseBasic>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出企业的所有成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="role">根据角色筛选成员</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EnterpriseMember>> GetV5EnterprisesEnterpriseMembersAsync(string access_token, string enterprise, Role3? role)
        {
            return GetV5EnterprisesEnterpriseMembersAsync(access_token, enterprise, role, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出企业的所有成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="role">根据角色筛选成员</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EnterpriseMember>> GetV5EnterprisesEnterpriseMembersAsync(string access_token, string enterprise, Role3? role, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/members?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (role != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("role") + "=").Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EnterpriseMember>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>添加或邀请企业成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="username">需要邀请的用户名(username/login)，username,email至少填写一个</param>
        /// <param name="email">要添加邮箱地址，若该邮箱未注册则自动创建帐号。username,email至少填写一个</param>
        /// <param name="role">企业角色：member =&gt; 普通成员, outsourced =&gt; 外包成员, admin =&gt; 管理员</param>
        /// <param name="name">企业成员真实姓名（备注）</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostV5EnterprisesEnterpriseMembersAsync(string access_token, string enterprise, string username, string email, Role4? role, string name)
        {
            return PostV5EnterprisesEnterpriseMembersAsync(access_token, enterprise, username, email, role, name, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>添加或邀请企业成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="username">需要邀请的用户名(username/login)，username,email至少填写一个</param>
        /// <param name="email">要添加邮箱地址，若该邮箱未注册则自动创建帐号。username,email至少填写一个</param>
        /// <param name="role">企业角色：member =&gt; 普通成员, outsourced =&gt; 外包成员, admin =&gt; 管理员</param>
        /// <param name="name">企业成员真实姓名（备注）</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PostV5EnterprisesEnterpriseMembersAsync(string access_token, string enterprise, string username, string email, Role4? role, string name, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/members");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (username != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)), "username");
                    }
                    if (email != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)), "email");
                    }
                    if (role != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)), "role");
                    }
                    if (name != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取企业成员信息(通过用户名/邮箱)</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="query_type">查询类型：username/email</param>
        /// <param name="query_value">查询值</param>
        /// <returns>获取企业成员信息(通过用户名/邮箱)</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5EnterprisesEnterpriseMembersSearchAsync(string access_token, string enterprise, string query_type, string query_value)
        {
            return GetV5EnterprisesEnterpriseMembersSearchAsync(access_token, enterprise, query_type, query_value, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取企业成员信息(通过用户名/邮箱)</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="query_type">查询类型：username/email</param>
        /// <param name="query_value">查询值</param>
        /// <returns>获取企业成员信息(通过用户名/邮箱)</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5EnterprisesEnterpriseMembersSearchAsync(string access_token, string enterprise, string query_type, string query_value, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (query_type == null)
                throw new System.ArgumentNullException("query_type");
    
            if (query_value == null)
                throw new System.ArgumentNullException("query_value");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/members/search?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("query_type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("query_value") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>某个周报评论列表</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="id">周报ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Note>> GetV5EnterprisesEnterpriseWeekReportsIdCommentsAsync(string access_token, string enterprise, int? page, int? per_page, int id)
        {
            return GetV5EnterprisesEnterpriseWeekReportsIdCommentsAsync(access_token, enterprise, page, per_page, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>某个周报评论列表</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="id">周报ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Note>> GetV5EnterprisesEnterpriseWeekReportsIdCommentsAsync(string access_token, string enterprise, int? page, int? per_page, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/week_reports/{id}/comments?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Note>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>评论周报</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="id">周报ID</param>
        /// <param name="body">评论的内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Note> PostV5EnterprisesEnterpriseWeekReportsIdCommentAsync(string access_token, string enterprise, int id, string body)
        {
            return PostV5EnterprisesEnterpriseWeekReportsIdCommentAsync(access_token, enterprise, id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>评论周报</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="id">周报ID</param>
        /// <param name="body">评论的内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Note> PostV5EnterprisesEnterpriseWeekReportsIdCommentAsync(string access_token, string enterprise, int id, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/week_reports/{id}/comment");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (body == null)
                        throw new System.ArgumentNullException("body");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Note>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>删除周报某个评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="report_id">周报ID</param>
        /// <param name="id">评论ID</param>
        /// <returns>删除周报某个评论</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdAsync(string access_token, string enterprise, int report_id, int id)
        {
            return DeleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdAsync(access_token, enterprise, report_id, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除周报某个评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="report_id">周报ID</param>
        /// <param name="id">评论ID</param>
        /// <returns>删除周报某个评论</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdAsync(string access_token, string enterprise, int report_id, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (report_id == null)
                throw new System.ArgumentNullException("report_id");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/week_reports/{report_id}/comments/{id}?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{report_id}", System.Uri.EscapeDataString(ConvertToString(report_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>个人周报列表</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WeekReport>> GetV5EnterprisesEnterpriseUsersUsernameWeekReportsAsync(string access_token, string enterprise, string username, int? page, int? per_page)
        {
            return GetV5EnterprisesEnterpriseUsersUsernameWeekReportsAsync(access_token, enterprise, username, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>个人周报列表</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WeekReport>> GetV5EnterprisesEnterpriseUsersUsernameWeekReportsAsync(string access_token, string enterprise, string username, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/users/{username}/week_reports?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WeekReport>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>企业成员周报列表</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="year">周报所属年</param>
        /// <param name="week_index">周报所属周</param>
        /// <param name="date">周报日期(格式：2019-03-25)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WeekReport>> GetV5EnterprisesEnterpriseWeekReportsAsync(string access_token, string enterprise, int? page, int? per_page, string username, int? year, int? week_index, string date)
        {
            return GetV5EnterprisesEnterpriseWeekReportsAsync(access_token, enterprise, page, per_page, username, year, week_index, date, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>企业成员周报列表</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="year">周报所属年</param>
        /// <param name="week_index">周报所属周</param>
        /// <param name="date">周报日期(格式：2019-03-25)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WeekReport>> GetV5EnterprisesEnterpriseWeekReportsAsync(string access_token, string enterprise, int? page, int? per_page, string username, int? year, int? week_index, string date, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/week_reports?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (username != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("username") + "=").Append(System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (year != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("year") + "=").Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (week_index != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("week_index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(week_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (date != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WeekReport>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>周报详情</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="id">周报ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WeekReport> GetV5EnterprisesEnterpriseWeekReportsIdAsync(string access_token, string enterprise, int id)
        {
            return GetV5EnterprisesEnterpriseWeekReportsIdAsync(access_token, enterprise, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>周报详情</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="id">周报ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WeekReport> GetV5EnterprisesEnterpriseWeekReportsIdAsync(string access_token, string enterprise, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/week_reports/{id}?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WeekReport>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>编辑周报</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="id">周报ID</param>
        /// <param name="content">周报内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WeekReport> PatchV5EnterprisesEnterpriseWeekReportIdAsync(string access_token, string enterprise, int id, string content)
        {
            return PatchV5EnterprisesEnterpriseWeekReportIdAsync(access_token, enterprise, id, content, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>编辑周报</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="id">周报ID</param>
        /// <param name="content">周报内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WeekReport> PatchV5EnterprisesEnterpriseWeekReportIdAsync(string access_token, string enterprise, int id, string content, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/week_report/{id}");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (content == null)
                        throw new System.ArgumentNullException("content");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(content, System.Globalization.CultureInfo.InvariantCulture)), "content");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WeekReport>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>新建周报</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="year">周报所属年</param>
        /// <param name="content">周报内容</param>
        /// <param name="week_index">周报所属周</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="date">周报日期(格式：2019-03-25)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WeekReport> PostV5EnterprisesEnterpriseWeekReportAsync(string access_token, string enterprise, int year, string content, int week_index, string username, string date)
        {
            return PostV5EnterprisesEnterpriseWeekReportAsync(access_token, enterprise, year, content, week_index, username, date, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>新建周报</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="year">周报所属年</param>
        /// <param name="content">周报内容</param>
        /// <param name="week_index">周报所属周</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="date">周报日期(格式：2019-03-25)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WeekReport> PostV5EnterprisesEnterpriseWeekReportAsync(string access_token, string enterprise, int year, string content, int week_index, string username, string date, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/week_report");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (year == null)
                        throw new System.ArgumentNullException("year");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture)), "year");
                    }
                    if (content == null)
                        throw new System.ArgumentNullException("content");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(content, System.Globalization.CultureInfo.InvariantCulture)), "content");
                    }
                    if (week_index == null)
                        throw new System.ArgumentNullException("week_index");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(week_index, System.Globalization.CultureInfo.InvariantCulture)), "week_index");
                    }
                    if (username == null)
                        throw new System.ArgumentNullException("username");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)), "username");
                    }
                    if (date != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(date, System.Globalization.CultureInfo.InvariantCulture)), "date");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WeekReport>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取企业的某个Issue</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Issue> GetV5EnterprisesEnterpriseIssuesNumberAsync(string access_token, string enterprise, string number)
        {
            return GetV5EnterprisesEnterpriseIssuesNumberAsync(access_token, enterprise, number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取企业的某个Issue</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Issue> GetV5EnterprisesEnterpriseIssuesNumberAsync(string access_token, string enterprise, string number, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/issues/{number}?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Issue>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>更新企业的某个Issue</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="title">Issue标题</param>
        /// <param name="state">Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的）</param>
        /// <param name="body">Issue描述</param>
        /// <param name="assignee">Issue负责人的个人空间地址</param>
        /// <param name="collaborators">Issue协助者的个人空间地址, 以 , 分隔</param>
        /// <param name="milestone">里程碑序号</param>
        /// <param name="labels">用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance</param>
        /// <param name="program">项目ID</param>
        /// <param name="security_hole">是否是私有issue(默认为false)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Issue> PatchV5EnterprisesEnterpriseIssuesNumberAsync(string access_token, string enterprise, string number, string title, State12? state, string body, string assignee, string collaborators, int? milestone, string labels, string program, bool? security_hole)
        {
            return PatchV5EnterprisesEnterpriseIssuesNumberAsync(access_token, enterprise, number, title, state, body, assignee, collaborators, milestone, labels, program, security_hole, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新企业的某个Issue</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="title">Issue标题</param>
        /// <param name="state">Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的）</param>
        /// <param name="body">Issue描述</param>
        /// <param name="assignee">Issue负责人的个人空间地址</param>
        /// <param name="collaborators">Issue协助者的个人空间地址, 以 , 分隔</param>
        /// <param name="milestone">里程碑序号</param>
        /// <param name="labels">用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance</param>
        /// <param name="program">项目ID</param>
        /// <param name="security_hole">是否是私有issue(默认为false)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Issue> PatchV5EnterprisesEnterpriseIssuesNumberAsync(string access_token, string enterprise, string number, string title, State12? state, string body, string assignee, string collaborators, int? milestone, string labels, string program, bool? security_hole, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/issues/{number}");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (title != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (state != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture)), "state");
                    }
                    if (body != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(body, System.Globalization.CultureInfo.InvariantCulture)), "body");
                    }
                    if (assignee != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(assignee, System.Globalization.CultureInfo.InvariantCulture)), "assignee");
                    }
                    if (collaborators != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(collaborators, System.Globalization.CultureInfo.InvariantCulture)), "collaborators");
                    }
                    if (milestone != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(milestone, System.Globalization.CultureInfo.InvariantCulture)), "milestone");
                    }
                    if (labels != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(labels, System.Globalization.CultureInfo.InvariantCulture)), "labels");
                    }
                    if (program != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(program, System.Globalization.CultureInfo.InvariantCulture)), "program");
                    }
                    if (security_hole != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(security_hole, System.Globalization.CultureInfo.InvariantCulture)), "security_hole");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Issue>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取企业 issue 关联的 Pull Requests</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequest>> GetV5EnterprisesEnterpriseIssuesNumberPullRequestsAsync(string access_token, string enterprise, string number)
        {
            return GetV5EnterprisesEnterpriseIssuesNumberPullRequestsAsync(access_token, enterprise, number, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取企业 issue 关联的 Pull Requests</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequest>> GetV5EnterprisesEnterpriseIssuesNumberPullRequestsAsync(string access_token, string enterprise, string number, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/issues/{number}/pull_requests?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PullRequest>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取企业某个Issue所有评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Note>> GetV5EnterprisesEnterpriseIssuesNumberCommentsAsync(string access_token, string enterprise, string number, int? page, int? per_page)
        {
            return GetV5EnterprisesEnterpriseIssuesNumberCommentsAsync(access_token, enterprise, number, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取企业某个Issue所有评论</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Note>> GetV5EnterprisesEnterpriseIssuesNumberCommentsAsync(string access_token, string enterprise, string number, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/issues/{number}/comments?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Note>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取企业某个Issue所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Label>> GetV5EnterprisesEnterpriseIssuesNumberLabelsAsync(string access_token, string enterprise, string number, int? page, int? per_page)
        {
            return GetV5EnterprisesEnterpriseIssuesNumberLabelsAsync(access_token, enterprise, number, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取企业某个Issue所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="number">Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Label>> GetV5EnterprisesEnterpriseIssuesNumberLabelsAsync(string access_token, string enterprise, string number, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/issues/{number}/labels?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{number}", System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Label>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取企业所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Label>> GetV5EnterprisesEnterpriseLabelsAsync(string access_token, string enterprise)
        {
            return GetV5EnterprisesEnterpriseLabelsAsync(access_token, enterprise, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取企业所有标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Label>> GetV5EnterprisesEnterpriseLabelsAsync(string access_token, string enterprise, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/labels?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Label>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取企业某个标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="name">标签名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Label> GetV5EnterprisesEnterpriseLabelsNameAsync(string access_token, string enterprise, string name)
        {
            return GetV5EnterprisesEnterpriseLabelsNameAsync(access_token, enterprise, name, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取企业某个标签</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="name">标签名称</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Label> GetV5EnterprisesEnterpriseLabelsNameAsync(string access_token, string enterprise, string name, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/labels/{name}?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取企业的所有仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="type">筛选仓库的类型，可以是 all, public, internal, private。默认: all</param>
        /// <param name="direct">只获取直属仓库，默认: false</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Project> GetV5EnterprisesEnterpriseReposAsync(string access_token, string enterprise, Type5? type, bool? direct, int? page, int? per_page)
        {
            return GetV5EnterprisesEnterpriseReposAsync(access_token, enterprise, type, direct, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取企业的所有仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="type">筛选仓库的类型，可以是 all, public, internal, private。默认: all</param>
        /// <param name="direct">只获取直属仓库，默认: false</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Project> GetV5EnterprisesEnterpriseReposAsync(string access_token, string enterprise, Type5? type, bool? direct, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/repos?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direct != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direct") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direct, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Project>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>创建企业仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">仓库名称</param>
        /// <param name="description">仓库描述</param>
        /// <param name="homepage">主页(eg: https://gitee.com)</param>
        /// <param name="has_issues">允许提Issue与否。默认: 允许(true)</param>
        /// <param name="has_wiki">提供Wiki与否。默认: 提供(true)</param>
        /// <param name="can_comment">允许用户对仓库进行评论。默认： 允许(true)</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="auto_init">值为true时则会用README初始化仓库。默认: 不初始化(false)</param>
        /// <param name="gitignore_template">Git Ignore模版</param>
        /// <param name="license_template">License模版</param>
        /// <param name="path">仓库路径</param>
        /// <param name="@private">仓库开源类型。0(私有), 1(外部开源), 2(内部开源)。默认: 0</param>
        /// <param name="outsourced">值为true值为外包仓库, false值为内部仓库。默认: 内部仓库(false)</param>
        /// <param name="project_creator">负责人的username</param>
        /// <param name="members">用逗号分开的仓库成员。如: member1,member2</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Project> PostV5EnterprisesEnterpriseReposAsync(string access_token, string name, string description, string homepage, bool? has_issues, bool? has_wiki, bool? can_comment, string enterprise, bool? auto_init, Gitignore_template3? gitignore_template, License_template3? license_template, string path, Private? @private, bool? outsourced, string project_creator, string members)
        {
            return PostV5EnterprisesEnterpriseReposAsync(access_token, name, description, homepage, has_issues, has_wiki, can_comment, enterprise, auto_init, gitignore_template, license_template, path, @private, outsourced, project_creator, members, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建企业仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">仓库名称</param>
        /// <param name="description">仓库描述</param>
        /// <param name="homepage">主页(eg: https://gitee.com)</param>
        /// <param name="has_issues">允许提Issue与否。默认: 允许(true)</param>
        /// <param name="has_wiki">提供Wiki与否。默认: 提供(true)</param>
        /// <param name="can_comment">允许用户对仓库进行评论。默认： 允许(true)</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="auto_init">值为true时则会用README初始化仓库。默认: 不初始化(false)</param>
        /// <param name="gitignore_template">Git Ignore模版</param>
        /// <param name="license_template">License模版</param>
        /// <param name="path">仓库路径</param>
        /// <param name="@private">仓库开源类型。0(私有), 1(外部开源), 2(内部开源)。默认: 0</param>
        /// <param name="outsourced">值为true值为外包仓库, false值为内部仓库。默认: 内部仓库(false)</param>
        /// <param name="project_creator">负责人的username</param>
        /// <param name="members">用逗号分开的仓库成员。如: member1,member2</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Project> PostV5EnterprisesEnterpriseReposAsync(string access_token, string name, string description, string homepage, bool? has_issues, bool? has_wiki, bool? can_comment, string enterprise, bool? auto_init, Gitignore_template3? gitignore_template, License_template3? license_template, string path, Private? @private, bool? outsourced, string project_creator, string members, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/repos");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (homepage != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(homepage, System.Globalization.CultureInfo.InvariantCulture)), "homepage");
                    }
                    if (has_issues != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(has_issues, System.Globalization.CultureInfo.InvariantCulture)), "has_issues");
                    }
                    if (has_wiki != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(has_wiki, System.Globalization.CultureInfo.InvariantCulture)), "has_wiki");
                    }
                    if (can_comment != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(can_comment, System.Globalization.CultureInfo.InvariantCulture)), "can_comment");
                    }
                    if (auto_init != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(auto_init, System.Globalization.CultureInfo.InvariantCulture)), "auto_init");
                    }
                    if (gitignore_template != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gitignore_template, System.Globalization.CultureInfo.InvariantCulture)), "gitignore_template");
                    }
                    if (license_template != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(license_template, System.Globalization.CultureInfo.InvariantCulture)), "license_template");
                    }
                    if (path != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture)), "path");
                    }
                    if (@private != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(@private, System.Globalization.CultureInfo.InvariantCulture)), "private");
                    }
                    if (outsourced != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(outsourced, System.Globalization.CultureInfo.InvariantCulture)), "outsourced");
                    }
                    if (project_creator != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(project_creator, System.Globalization.CultureInfo.InvariantCulture)), "project_creator");
                    }
                    if (members != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(members, System.Globalization.CultureInfo.InvariantCulture)), "members");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Project>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取企业的一个成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EnterpriseMember> GetV5EnterprisesEnterpriseMembersUsernameAsync(string access_token, string enterprise, string username)
        {
            return GetV5EnterprisesEnterpriseMembersUsernameAsync(access_token, enterprise, username, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取企业的一个成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EnterpriseMember> GetV5EnterprisesEnterpriseMembersUsernameAsync(string access_token, string enterprise, string username, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/members/{username}?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnterpriseMember>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>移除企业成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteV5EnterprisesEnterpriseMembersUsernameAsync(string access_token, string enterprise, string username)
        {
            return DeleteV5EnterprisesEnterpriseMembersUsernameAsync(access_token, enterprise, username, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>移除企业成员</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteV5EnterprisesEnterpriseMembersUsernameAsync(string access_token, string enterprise, string username, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/members/{username}?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>修改企业成员权限或备注</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="role">企业角色：member =&gt; 普通成员, outsourced =&gt; 外包成员, admin =&gt; 管理员</param>
        /// <param name="active">是否可访问企业资源，默认:是。（若选否则禁止该用户访问企业资源）</param>
        /// <param name="name">企业成员真实姓名（备注）</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EnterpriseMember> PutV5EnterprisesEnterpriseMembersUsernameAsync(string access_token, string enterprise, string username, Role5? role, bool? active, string name)
        {
            return PutV5EnterprisesEnterpriseMembersUsernameAsync(access_token, enterprise, username, role, active, name, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改企业成员权限或备注</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="role">企业角色：member =&gt; 普通成员, outsourced =&gt; 外包成员, admin =&gt; 管理员</param>
        /// <param name="active">是否可访问企业资源，默认:是。（若选否则禁止该用户访问企业资源）</param>
        /// <param name="name">企业成员真实姓名（备注）</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EnterpriseMember> PutV5EnterprisesEnterpriseMembersUsernameAsync(string access_token, string enterprise, string username, Role5? role, bool? active, string name, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            if (username == null)
                throw new System.ArgumentNullException("username");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprises/{enterprise}/members/{username}");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (role != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)), "role");
                    }
                    if (active != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(active, System.Globalization.CultureInfo.InvariantCulture)), "active");
                    }
                    if (name != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnterpriseMember>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6570\u636e\u4e0d\u5408\u6cd5", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出可使用的 .gitignore 模板</summary>
        /// <param name="access_token">用户授权码</param>
        /// <returns>列出可使用的 .gitignore 模板</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5GitignoreTemplatesAsync(string access_token)
        {
            return GetV5GitignoreTemplatesAsync(access_token, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出可使用的 .gitignore 模板</summary>
        /// <param name="access_token">用户授权码</param>
        /// <returns>列出可使用的 .gitignore 模板</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5GitignoreTemplatesAsync(string access_token, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gitignore/templates?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取一个 .gitignore 模板</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">.gitignore 模板名</param>
        /// <returns>获取一个 .gitignore 模板</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5GitignoreTemplatesNameAsync(string access_token, Name name)
        {
            return GetV5GitignoreTemplatesNameAsync(access_token, name, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取一个 .gitignore 模板</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">.gitignore 模板名</param>
        /// <returns>获取一个 .gitignore 模板</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5GitignoreTemplatesNameAsync(string access_token, Name name, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gitignore/templates/{name}?");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取一个 .gitignore 模板原始文件</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">.gitignore 模板名</param>
        /// <returns>获取一个 .gitignore 模板原始文件</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5GitignoreTemplatesNameRawAsync(string access_token, Name2 name)
        {
            return GetV5GitignoreTemplatesNameRawAsync(access_token, name, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取一个 .gitignore 模板原始文件</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="name">.gitignore 模板名</param>
        /// <returns>获取一个 .gitignore 模板原始文件</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5GitignoreTemplatesNameRawAsync(string access_token, Name2 name, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/gitignore/templates/{name}/raw?");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出可使用的开源许可协议</summary>
        /// <param name="access_token">用户授权码</param>
        /// <returns>列出可使用的开源许可协议</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5LicensesAsync(string access_token)
        {
            return GetV5LicensesAsync(access_token, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出可使用的开源许可协议</summary>
        /// <param name="access_token">用户授权码</param>
        /// <returns>列出可使用的开源许可协议</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5LicensesAsync(string access_token, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/licenses?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取一个开源许可协议</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="license">协议名称</param>
        /// <returns>获取一个开源许可协议</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5LicensesLicenseAsync(string access_token, License license)
        {
            return GetV5LicensesLicenseAsync(access_token, license, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取一个开源许可协议</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="license">协议名称</param>
        /// <returns>获取一个开源许可协议</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5LicensesLicenseAsync(string access_token, License license, System.Threading.CancellationToken cancellationToken)
        {
            if (license == null)
                throw new System.ArgumentNullException("license");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/licenses/{license}?");
            urlBuilder_.Replace("{license}", System.Uri.EscapeDataString(ConvertToString(license, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取一个开源许可协议原始文件</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="license">协议名称</param>
        /// <returns>获取一个开源许可协议原始文件</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5LicensesLicenseRawAsync(string access_token, License2 license)
        {
            return GetV5LicensesLicenseRawAsync(access_token, license, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取一个开源许可协议原始文件</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="license">协议名称</param>
        /// <returns>获取一个开源许可协议原始文件</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5LicensesLicenseRawAsync(string access_token, License2 license, System.Threading.CancellationToken cancellationToken)
        {
            if (license == null)
                throw new System.ArgumentNullException("license");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/licenses/{license}/raw?");
            urlBuilder_.Replace("{license}", System.Uri.EscapeDataString(ConvertToString(license, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>渲染 Markdown 文本</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="text">Markdown 文本</param>
        /// <returns>渲染 Markdown 文本</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostV5MarkdownAsync(string access_token, string text)
        {
            return PostV5MarkdownAsync(access_token, text, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>渲染 Markdown 文本</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="text">Markdown 文本</param>
        /// <returns>渲染 Markdown 文本</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PostV5MarkdownAsync(string access_token, string text, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/markdown");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (text == null)
                        throw new System.ArgumentNullException("text");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(text, System.Globalization.CultureInfo.InvariantCulture)), "text");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>企业Pull Reuqest 列表</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="issue_number">可选。Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="repo">可选。仓库路径(path)</param>
        /// <param name="program_id">可选。项目ID</param>
        /// <param name="state">可选。Pull Request 状态</param>
        /// <param name="head">可选。Pull Request 提交的源分支。格式：branch 或者：username:branch</param>
        /// <param name="@base">可选。Pull Request 提交目标分支的名称。</param>
        /// <param name="sort">可选。排序字段，默认按创建时间</param>
        /// <param name="direction">可选。升序/降序</param>
        /// <param name="milestone_number">可选。里程碑序号(id)</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequest>> GetV5EnterpriseEnterprisePullRequestsAsync(string access_token, string enterprise, string issue_number, string repo, int? program_id, State13? state, string head, string @base, Sort19? sort, Direction15? direction, int? milestone_number, string labels, int? page, int? per_page)
        {
            return GetV5EnterpriseEnterprisePullRequestsAsync(access_token, enterprise, issue_number, repo, program_id, state, head, @base, sort, direction, milestone_number, labels, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>企业Pull Reuqest 列表</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="enterprise">企业的路径(path/login)</param>
        /// <param name="issue_number">可选。Issue 编号(区分大小写，无需添加 # 号)</param>
        /// <param name="repo">可选。仓库路径(path)</param>
        /// <param name="program_id">可选。项目ID</param>
        /// <param name="state">可选。Pull Request 状态</param>
        /// <param name="head">可选。Pull Request 提交的源分支。格式：branch 或者：username:branch</param>
        /// <param name="@base">可选。Pull Request 提交目标分支的名称。</param>
        /// <param name="sort">可选。排序字段，默认按创建时间</param>
        /// <param name="direction">可选。升序/降序</param>
        /// <param name="milestone_number">可选。里程碑序号(id)</param>
        /// <param name="labels">用逗号分开的标签。如: bug,performance</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PullRequest>> GetV5EnterpriseEnterprisePullRequestsAsync(string access_token, string enterprise, string issue_number, string repo, int? program_id, State13? state, string head, string @base, Sort19? sort, Direction15? direction, int? milestone_number, string labels, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (enterprise == null)
                throw new System.ArgumentNullException("enterprise");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/enterprise/{enterprise}/pull_requests?");
            urlBuilder_.Replace("{enterprise}", System.Uri.EscapeDataString(ConvertToString(enterprise, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (issue_number != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("issue_number") + "=").Append(System.Uri.EscapeDataString(ConvertToString(issue_number, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (repo != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("repo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (program_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("program_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(program_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (head != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("head") + "=").Append(System.Uri.EscapeDataString(ConvertToString(head, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (@base != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("base") + "=").Append(System.Uri.EscapeDataString(ConvertToString(@base, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (milestone_number != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("milestone_number") + "=").Append(System.Uri.EscapeDataString(ConvertToString(milestone_number, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (labels != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("labels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(labels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PullRequest>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出仓库的所有公开动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5NetworksOwnerRepoEventsAsync(string access_token, string owner, string repo, int? page, int? per_page)
        {
            return GetV5NetworksOwnerRepoEventsAsync(access_token, owner, repo, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出仓库的所有公开动态</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="owner">仓库所属空间地址(企业、组织或个人的地址path)</param>
        /// <param name="repo">仓库路径(path)</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> GetV5NetworksOwnerRepoEventsAsync(string access_token, string owner, string repo, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            if (owner == null)
                throw new System.ArgumentNullException("owner");
    
            if (repo == null)
                throw new System.ArgumentNullException("repo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/networks/{owner}/{repo}/events?");
            urlBuilder_.Replace("{owner}", System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{repo}", System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Event>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u6743\u9650", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>搜索仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="q">搜索关键字</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="owner">筛选指定空间地址(企业、组织或个人的地址 path) 的仓库</param>
        /// <param name="fork">是否搜索含 fork 的仓库，默认：否</param>
        /// <param name="language">筛选指定语言的仓库</param>
        /// <param name="sort">排序字段，last_push_at(更新时间)、stars_count(收藏数)、forks_count(Fork 数)、watches_count(关注数)，默认为最佳匹配</param>
        /// <param name="order">排序顺序: desc(default)、asc</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> GetV5SearchRepositoriesAsync(string access_token, string q, int? page, int? per_page, string owner, bool? fork, Language? language, Sort20? sort, Order? order)
        {
            return GetV5SearchRepositoriesAsync(access_token, q, page, per_page, owner, fork, language, sort, order, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>搜索仓库</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="q">搜索关键字</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="owner">筛选指定空间地址(企业、组织或个人的地址 path) 的仓库</param>
        /// <param name="fork">是否搜索含 fork 的仓库，默认：否</param>
        /// <param name="language">筛选指定语言的仓库</param>
        /// <param name="sort">排序字段，last_push_at(更新时间)、stars_count(收藏数)、forks_count(Fork 数)、watches_count(关注数)，默认为最佳匹配</param>
        /// <param name="order">排序顺序: desc(default)、asc</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> GetV5SearchRepositoriesAsync(string access_token, string q, int? page, int? per_page, string owner, bool? fork, Language? language, Sort20? sort, Order? order, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/search/repositories?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (owner != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("owner") + "=").Append(System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fork != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fork") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fork, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (language != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Project>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>搜索 Issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="q">搜索关键字</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="repo">筛选指定仓库 (path, e.g. oschina/git-osc) 的 issues</param>
        /// <param name="language">筛选指定语言的 issues</param>
        /// <param name="label">筛选指定标签的 issues</param>
        /// <param name="state">筛选指定状态的 issues, open(开启)、closed(完成)、rejected(拒绝)</param>
        /// <param name="author">筛选指定创建者 (username/login) 的 issues</param>
        /// <param name="assignee">筛选指定负责人 (username/login) 的 issues</param>
        /// <param name="sort">排序字段，created_at(创建时间)、last_push_at(更新时间)、notes_count(评论数)，默认为最佳匹配</param>
        /// <param name="order">排序顺序: desc(default)、asc</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5SearchIssuesAsync(string access_token, string q, int? page, int? per_page, string repo, Language2? language, string label, State14? state, string author, string assignee, Sort21? sort, Order2? order)
        {
            return GetV5SearchIssuesAsync(access_token, q, page, per_page, repo, language, label, state, author, assignee, sort, order, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>搜索 Issues</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="q">搜索关键字</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="repo">筛选指定仓库 (path, e.g. oschina/git-osc) 的 issues</param>
        /// <param name="language">筛选指定语言的 issues</param>
        /// <param name="label">筛选指定标签的 issues</param>
        /// <param name="state">筛选指定状态的 issues, open(开启)、closed(完成)、rejected(拒绝)</param>
        /// <param name="author">筛选指定创建者 (username/login) 的 issues</param>
        /// <param name="assignee">筛选指定负责人 (username/login) 的 issues</param>
        /// <param name="sort">排序字段，created_at(创建时间)、last_push_at(更新时间)、notes_count(评论数)，默认为最佳匹配</param>
        /// <param name="order">排序顺序: desc(default)、asc</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Issue>> GetV5SearchIssuesAsync(string access_token, string q, int? page, int? per_page, string repo, Language2? language, string label, State14? state, string author, string assignee, Sort21? sort, Order2? order, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/search/issues?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (repo != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("repo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(repo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (language != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (label != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("label") + "=").Append(System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (author != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("author") + "=").Append(System.Uri.EscapeDataString(ConvertToString(author, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (assignee != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("assignee") + "=").Append(System.Uri.EscapeDataString(ConvertToString(assignee, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Issue>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>搜索用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="q">搜索关键字</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="sort">排序字段，joined_at(注册时间)，默认为最佳匹配</param>
        /// <param name="order">排序顺序: desc(default)、asc</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetV5SearchUsersAsync(string access_token, string q, int? page, int? per_page, Sort22? sort, Order3? order)
        {
            return GetV5SearchUsersAsync(access_token, q, page, per_page, sort, order, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>搜索用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="q">搜索关键字</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <param name="sort">排序字段，joined_at(注册时间)，默认为最佳匹配</param>
        /// <param name="order">排序顺序: desc(default)、asc</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetV5SearchUsersAsync(string access_token, string q, int? page, int? per_page, Sort22? sort, Order3? order, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/search/users?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<User>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取授权用户的通知数</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="unread">是否只获取未读消息，默认：否</param>
        /// <returns>返回数据</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserNotificationCount> GetV5NotificationsCountAsync(string access_token, bool? unread)
        {
            return GetV5NotificationsCountAsync(access_token, unread, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取授权用户的通知数</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="unread">是否只获取未读消息，默认：否</param>
        /// <returns>返回数据</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserNotificationCount> GetV5NotificationsCountAsync(string access_token, bool? unread, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/notifications/count?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (unread != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("unread") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unread, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserNotificationCount>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出授权用户的所有通知</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="unread">是否只获取未读消息，默认：否</param>
        /// <param name="participating">是否只获取自己直接参与的消息，默认：否</param>
        /// <param name="type">筛选指定类型的通知，all：所有，event：事件通知，referer：@ 通知</param>
        /// <param name="since">只获取在给定时间后更新的消息，要求时间格式为 ISO 8601</param>
        /// <param name="before">只获取在给定时间前更新的消息，要求时间格式为 ISO 8601</param>
        /// <param name="ids">指定一组通知 ID，以 , 分隔</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回数据</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserNotificationList>> GetV5NotificationsThreadsAsync(string access_token, bool? unread, bool? participating, Type6? type, string since, string before, string ids, int? page, int? per_page)
        {
            return GetV5NotificationsThreadsAsync(access_token, unread, participating, type, since, before, ids, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出授权用户的所有通知</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="unread">是否只获取未读消息，默认：否</param>
        /// <param name="participating">是否只获取自己直接参与的消息，默认：否</param>
        /// <param name="type">筛选指定类型的通知，all：所有，event：事件通知，referer：@ 通知</param>
        /// <param name="since">只获取在给定时间后更新的消息，要求时间格式为 ISO 8601</param>
        /// <param name="before">只获取在给定时间前更新的消息，要求时间格式为 ISO 8601</param>
        /// <param name="ids">指定一组通知 ID，以 , 分隔</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回数据</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserNotificationList>> GetV5NotificationsThreadsAsync(string access_token, bool? unread, bool? participating, Type6? type, string since, string before, string ids, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/notifications/threads?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (unread != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("unread") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unread, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (participating != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("participating") + "=").Append(System.Uri.EscapeDataString(ConvertToString(participating, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserNotificationList>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>标记所有通知为已读</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="ids">指定一组通知 ID，以 , 分隔</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutV5NotificationsThreadsAsync(string access_token, string ids)
        {
            return PutV5NotificationsThreadsAsync(access_token, ids, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>标记所有通知为已读</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="ids">指定一组通知 ID，以 , 分隔</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutV5NotificationsThreadsAsync(string access_token, string ids, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/notifications/threads");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (ids != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)), "ids");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 205)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取一条通知</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">通知的 ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserNotification> GetV5NotificationsThreadsIdAsync(string access_token, string id)
        {
            return GetV5NotificationsThreadsIdAsync(access_token, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取一条通知</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">通知的 ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserNotification> GetV5NotificationsThreadsIdAsync(string access_token, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/notifications/threads/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserNotification>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>标记一条通知为已读</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">通知的 ID</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PatchV5NotificationsThreadsIdAsync(string access_token, string id)
        {
            return PatchV5NotificationsThreadsIdAsync(access_token, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>标记一条通知为已读</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">通知的 ID</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PatchV5NotificationsThreadsIdAsync(string access_token, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/notifications/threads/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 205)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出授权用户的所有私信</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="unread">是否只显示未读私信，默认：否</param>
        /// <param name="since">只获取在给定时间后更新的私信，要求时间格式为 ISO 8601</param>
        /// <param name="before">只获取在给定时间前更新的私信，要求时间格式为 ISO 8601</param>
        /// <param name="ids">指定一组私信 ID，以 , 分隔</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserMessageList>> GetV5NotificationsMessagesAsync(string access_token, bool? unread, string since, string before, string ids, int? page, int? per_page)
        {
            return GetV5NotificationsMessagesAsync(access_token, unread, since, before, ids, page, per_page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出授权用户的所有私信</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="unread">是否只显示未读私信，默认：否</param>
        /// <param name="since">只获取在给定时间后更新的私信，要求时间格式为 ISO 8601</param>
        /// <param name="before">只获取在给定时间前更新的私信，要求时间格式为 ISO 8601</param>
        /// <param name="ids">指定一组私信 ID，以 , 分隔</param>
        /// <param name="page">当前的页码</param>
        /// <param name="per_page">每页的数量，最大为 100</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserMessageList>> GetV5NotificationsMessagesAsync(string access_token, bool? unread, string since, string before, string ids, int? page, int? per_page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/notifications/messages?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (unread != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("unread") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unread, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserMessageList>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>标记所有私信为已读</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="ids">指定一组私信 ID，以 , 分隔</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PutV5NotificationsMessagesAsync(string access_token, string ids)
        {
            return PutV5NotificationsMessagesAsync(access_token, ids, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>标记所有私信为已读</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="ids">指定一组私信 ID，以 , 分隔</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PutV5NotificationsMessagesAsync(string access_token, string ids, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/notifications/messages");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (ids != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)), "ids");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 205)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>发送私信给指定用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="content">私信内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserMessage> PostV5NotificationsMessagesAsync(string access_token, string username, string content)
        {
            return PostV5NotificationsMessagesAsync(access_token, username, content, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>发送私信给指定用户</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="username">用户名(username/login)</param>
        /// <param name="content">私信内容</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserMessage> PostV5NotificationsMessagesAsync(string access_token, string username, string content, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/notifications/messages");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    if (username == null)
                        throw new System.ArgumentNullException("username");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)), "username");
                    }
                    if (content == null)
                        throw new System.ArgumentNullException("content");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(content, System.Globalization.CultureInfo.InvariantCulture)), "content");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserMessage>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6570\u636e\u4e0d\u5408\u6cd5", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取一条私信</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">私信的 ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserMessage> GetV5NotificationsMessagesIdAsync(string access_token, string id)
        {
            return GetV5NotificationsMessagesIdAsync(access_token, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取一条私信</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">私信的 ID</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserMessage> GetV5NotificationsMessagesIdAsync(string access_token, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/notifications/messages/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserMessage>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>标记一条私信为已读</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">私信的 ID</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PatchV5NotificationsMessagesIdAsync(string access_token, string id)
        {
            return PatchV5NotificationsMessagesIdAsync(access_token, id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>标记一条私信为已读</summary>
        /// <param name="access_token">用户授权码</param>
        /// <param name="id">私信的 ID</param>
        /// <returns>执行成功</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PatchV5NotificationsMessagesIdAsync(string access_token, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/notifications/messages/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (access_token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture)), "access_token");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 205)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("\u6ca1\u6709\u76f8\u5173\u6570\u636e", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>获取授权用户的全部邮箱</summary>
        /// <param name="access_token">用户授权码</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserEmail> GetV5EmailsAsync(string access_token)
        {
            return GetV5EmailsAsync(access_token, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取授权用户的全部邮箱</summary>
        /// <param name="access_token">用户授权码</param>
        /// <returns>返回格式</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserEmail> GetV5EmailsAsync(string access_token, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/emails?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserEmail>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>列出可使用的 Emoji</summary>
        /// <param name="access_token">用户授权码</param>
        /// <returns>列出可使用的 Emoji</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetV5EmojisAsync(string access_token)
        {
            return GetV5EmojisAsync(access_token, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>列出可使用的 Emoji</summary>
        /// <param name="access_token">用户授权码</param>
        /// <returns>列出可使用的 Emoji</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GetV5EmojisAsync(string access_token, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/emojis?");
            if (access_token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("access_token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new SwaggerException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new SwaggerException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>获取所有分支</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Branch 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("protected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Protected { get; set; }
    
        [Newtonsoft.Json.JsonProperty("protection_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Protection_url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Branch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Branch>(data);
        }
    
    }
    
    /// <summary>创建分支</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CompleteBranch 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _links { get; set; }
    
        [Newtonsoft.Json.JsonProperty("protected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Protected { get; set; }
    
        [Newtonsoft.Json.JsonProperty("protection_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Protection_url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CompleteBranch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompleteBranch>(data);
        }
    
    }
    
    /// <summary>仓库的某个提交</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RepoCommit 
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comments_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Committer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parents { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stats { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RepoCommit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RepoCommit>(data);
        }
    
    }
    
    /// <summary>两个Commits之间对比的版本差异</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Compare 
    {
        [Newtonsoft.Json.JsonProperty("base_commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Base_commit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merge_base_commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Merge_base_commit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Files { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Compare FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Compare>(data);
        }
    
    }
    
    /// <summary>获取一个公钥</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SSHKey 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SSHKey FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SSHKey>(data);
        }
    
    }
    
    /// <summary>列出指定用户的所有公钥</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SSHKeyBasic 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SSHKeyBasic FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SSHKeyBasic>(data);
        }
    
    }
    
    /// <summary>获取仓库具体路径下的内容</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Content 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Encoding { get; set; }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Size { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("download_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Download_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _links { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Content FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Content>(data);
        }
    
    }
    
    /// <summary>删除文件</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CommitContent 
    {
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentBasic Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Commit Commit { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CommitContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommitContent>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContentBasic 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Size { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("download_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Download_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _links { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ContentBasic FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentBasic>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Commit 
    {
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha { get; set; }
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Committer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tree { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parents { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Commit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Commit>(data);
        }
    
    }
    
    /// <summary>获取文件Blob</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Blob 
    {
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha { get; set; }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Size { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Encoding { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Blob FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Blob>(data);
        }
    
    }
    
    /// <summary>获取目录Tree</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Tree 
    {
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tree1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("truncated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Truncated { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Tree FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tree>(data);
        }
    
    }
    
    /// <summary>获取 Gitee 指数</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GiteeMetrics 
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total_score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Total_score { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectBasic Repo { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static GiteeMetrics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GiteeMetrics>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProjectBasic 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("human_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Human_name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Namespace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Private { get; set; }
    
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public { get; set; }
    
        [Newtonsoft.Json.JsonProperty("internal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Internal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fork { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProjectBasic FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectBasic>(data);
        }
    
    }
    
    /// <summary>搜索 Issues</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Issue 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repository_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repository_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("labels_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Labels_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comments_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parent_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parent_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>上级 id</summary>
        [Newtonsoft.Json.JsonProperty("parent_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Parent_id { get; set; }
    
        /// <summary>所在层级</summary>
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Depth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body_html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body_html { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Label Labels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserBasic Assignee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("collaborators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserBasic Collaborators { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repository", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repository { get; set; }
    
        [Newtonsoft.Json.JsonProperty("milestone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Milestone Milestone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Updated_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("plan_started_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Plan_started_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Deadline { get; set; }
    
        [Newtonsoft.Json.JsonProperty("finished_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Finished_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scheduled_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scheduled_time { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Comments { get; set; }
    
        /// <summary>优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重)</summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issue_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issue_type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("program", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProgramBasic Program { get; set; }
    
        [Newtonsoft.Json.JsonProperty("security_hole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Security_hole { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issue_state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issue_state { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Issue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Issue>(data);
        }
    
    }
    
    /// <summary>获取企业某个标签</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Label 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repository_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Repository_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Updated_at { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Label FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Label>(data);
        }
    
    }
    
    /// <summary>列出一个组织的所有成员</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserBasic 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserBasic FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserBasic>(data);
        }
    
    }
    
    /// <summary>更新仓库里程碑</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Milestone 
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repository_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Repository_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Updated_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("open_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues { get; set; }
    
        [Newtonsoft.Json.JsonProperty("closed_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Closed_issues { get; set; }
    
        [Newtonsoft.Json.JsonProperty("due_on", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Due_on { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Milestone FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Milestone>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProgramBasic 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProgramBasic FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProgramBasic>(data);
        }
    
    }
    
    /// <summary>企业Pull Reuqest 列表</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PullRequest 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("diff_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Diff_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("patch_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patch_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issue_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issue_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commits_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commits_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("review_comments_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Review_comments_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("review_comment_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Review_comment_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comments_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statuses_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Statuses_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body_html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body_html { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assignees_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignees_number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("testers_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Testers_number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assignees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Assignees { get; set; }
    
        [Newtonsoft.Json.JsonProperty("testers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Testers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("milestone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Milestone Milestone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Label Labels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locked { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("closed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Closed_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merged_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Merged_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mergeable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mergeable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("can_merge_check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Can_merge_check { get; set; }
    
        [Newtonsoft.Json.JsonProperty("head", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Head { get; set; }
    
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Base { get; set; }
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _links { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PullRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PullRequest>(data);
        }
    
    }
    
    /// <summary>获取某个Pull Request的操作日志</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OperateLog 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OperateLog FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OperateLog>(data);
        }
    
    }
    
    /// <summary>获取企业某个Issue所有评论</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Note 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body_html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body_html { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Updated_at { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Note FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Note>(data);
        }
    
    }
    
    /// <summary>搜索仓库</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Project 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("human_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Human_name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Namespace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Private { get; set; }
    
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public { get; set; }
    
        [Newtonsoft.Json.JsonProperty("internal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Internal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fork { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ssh_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forks_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forks_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("keys_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keys_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("collaborators_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Collaborators_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hooks_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hooks_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("branches_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Branches_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tags_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tags_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("blobs_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blobs_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stargazers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stargazers_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contributors_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contributors_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commits_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commits_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comments_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issue_comment_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issue_comment_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issues_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issues_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pulls_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pulls_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("milestones_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Milestones_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notifications_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notifications_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("labels_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Labels_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("releases_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Releases_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recommend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recommend { get; set; }
    
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forks_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forks_count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stargazers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stargazers_count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("watchers_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Watchers_count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("default_branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Default_branch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("open_issues_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Open_issues_count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("has_issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Has_issues { get; set; }
    
        [Newtonsoft.Json.JsonProperty("has_wiki", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Has_wiki { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issue_comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issue_comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("can_comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Can_comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pull_requests_enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pull_requests_enabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("has_page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Has_page { get; set; }
    
        [Newtonsoft.Json.JsonProperty("license", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string License { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outsourced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outsourced { get; set; }
    
        [Newtonsoft.Json.JsonProperty("project_creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project_creator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("members", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Members { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pushed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pushed_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Parent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("paas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Paas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stared { get; set; }
    
        [Newtonsoft.Json.JsonProperty("watched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Watched { get; set; }
    
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Relation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assignees_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignees_number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("testers_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Testers_number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assignees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Assignees { get; set; }
    
        [Newtonsoft.Json.JsonProperty("testers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Testers { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Project FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Project>(data);
        }
    
    }
    
    /// <summary>获取仓库贡献者</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Contributor 
    {
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contributions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contributions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Contributor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Contributor>(data);
        }
    
    }
    
    /// <summary>创建一个仓库的 Tag</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Tag 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Tag FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tag>(data);
        }
    
    }
    
    /// <summary>添加仓库成员</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProjectMember 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permissions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProjectMember FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectMember>(data);
        }
    
    }
    
    /// <summary>查看仓库成员的权限</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProjectMemberPermission 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permission { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProjectMemberPermission FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectMemberPermission>(data);
        }
    
    }
    
    /// <summary>编辑评论</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PullRequestComments 
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }
    
        [Newtonsoft.Json.JsonProperty("original_position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Original_position { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commit_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("original_commit_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Original_commit_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pull_request_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pull_request_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _links { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PullRequestComments FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PullRequestComments>(data);
        }
    
    }
    
    /// <summary>获取某Pull Request的所有Commit信息。最多显示250条Commit</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PullRequestCommits 
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comments_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }
    
        [Newtonsoft.Json.JsonProperty("committer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Committer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parents { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PullRequestCommits FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PullRequestCommits>(data);
        }
    
    }
    
    /// <summary>Pull Request Commit文件列表。最多显示300条diff</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PullRequestFiles 
    {
        [Newtonsoft.Json.JsonProperty("sha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Additions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deletions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("blob_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blob_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("raw_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Raw_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("patch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patch { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PullRequestFiles FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PullRequestFiles>(data);
        }
    
    }
    
    /// <summary>更新仓库Release</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Release 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tag_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag_name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("target_commitish", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target_commitish { get; set; }
    
        [Newtonsoft.Json.JsonProperty("prerelease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prerelease { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assets { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Release FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Release>(data);
        }
    
    }
    
    /// <summary>更新一个仓库WebHook</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hook 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }
    
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Result { get; set; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Result_code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("push_events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Push_events { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tag_push_events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag_push_events { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issues_events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issues_events { get; set; }
    
        [Newtonsoft.Json.JsonProperty("note_events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note_events { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merge_requests_events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Merge_requests_events { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Hook FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Hook>(data);
        }
    
    }
    
    /// <summary>列出 star 了仓库的用户</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProjectStargazers 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("star_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Star_at { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProjectStargazers FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectStargazers>(data);
        }
    
    }
    
    /// <summary>列出 watch 了仓库的用户</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProjectWatchers 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("watch_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Watch_at { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProjectWatchers FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectWatchers>(data);
        }
    
    }
    
    /// <summary>列出仓库的所有公开动态</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Event 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("actor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Actor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("org", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Org { get; set; }
    
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        /// <summary>不同类型动态的内容</summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Payload { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Event FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Event>(data);
        }
    
    }
    
    /// <summary>列出授权用户的所有通知</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserNotificationList 
    {
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_count { get; set; }
    
        /// <summary>通知列表</summary>
        [Newtonsoft.Json.JsonProperty("list", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserNotification> List { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserNotificationList FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotificationList>(data);
        }
    
    }
    
    /// <summary>获取一条通知</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserNotification 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unread", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unread { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mute { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        /// <summary>通知发送者</summary>
        [Newtonsoft.Json.JsonProperty("actor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserBasic Actor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repository", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectBasic Repository { get; set; }
    
        /// <summary>通知直接关联对象</summary>
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserNotificationSubject Subject { get; set; }
    
        /// <summary>通知次级关联对象</summary>
        [Newtonsoft.Json.JsonProperty("namespaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserNotificationNamespace> Namespaces { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserNotification FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotification>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserNotificationSubject 
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("latest_comment_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Latest_comment_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserNotificationSubject FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotificationSubject>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserNotificationNamespace 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserNotificationNamespace FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotificationNamespace>(data);
        }
    
    }
    
    /// <summary>获取一个组织</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Group 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("members_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Members_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("follow_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Follow_count { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Group FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Group>(data);
        }
    
    }
    
    /// <summary>获取授权用户的资料</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserDetail 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("blog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weibo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Weibo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("public_repos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public_repos { get; set; }
    
        [Newtonsoft.Json.JsonProperty("public_gists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public_gists { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("following", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stared { get; set; }
    
        [Newtonsoft.Json.JsonProperty("watched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Watched { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserDetail>(data);
        }
    
    }
    
    /// <summary>搜索用户</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class User 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("blog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weibo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Weibo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("public_repos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public_repos { get; set; }
    
        [Newtonsoft.Json.JsonProperty("public_gists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public_gists { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("following", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stared { get; set; }
    
        [Newtonsoft.Json.JsonProperty("watched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Watched { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static User FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data);
        }
    
    }
    
    /// <summary>获取授权用户的一个 Namespace</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Namespace 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NamespaceMini Parent { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Namespace FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Namespace>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NamespaceMini 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NamespaceMini FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NamespaceMini>(data);
        }
    
    }
    
    /// <summary>获取一个企业</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnterpriseBasic 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EnterpriseBasic FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnterpriseBasic>(data);
        }
    
    }
    
    /// <summary>增加或更新授权用户所管理组织的成员</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GroupMember 
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Active { get; set; }
    
        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }
    
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }
    
        [Newtonsoft.Json.JsonProperty("organization_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organization_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Group Organization { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static GroupMember FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupMember>(data);
        }
    
    }
    
    /// <summary>获取用户Star的代码片段</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Code 
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forks_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forks_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commits_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commits_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public { get; set; }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Files { get; set; }
    
        [Newtonsoft.Json.JsonProperty("truncated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Truncated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comments_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("git_pull_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_pull_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("git_push_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_push_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Code FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Code>(data);
        }
    
    }
    
    /// <summary>获取代码片段的commit</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CodeForksHistory 
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forks_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forks_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commits_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commits_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public { get; set; }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Files { get; set; }
    
        [Newtonsoft.Json.JsonProperty("truncated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Truncated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comments_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("git_pull_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_pull_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("git_push_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Git_push_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string History { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CodeForksHistory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CodeForksHistory>(data);
        }
    
    }
    
    /// <summary>修改代码片段的评论</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CodeComment 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CodeComment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CodeComment>(data);
        }
    
    }
    
    /// <summary>获取 Fork 了指定代码片段的列表</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CodeForks 
    {
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CodeForks FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CodeForks>(data);
        }
    
    }
    
    /// <summary>获取一个用户</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserInfo 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("blog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weibo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Weibo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("public_repos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public_repos { get; set; }
    
        [Newtonsoft.Json.JsonProperty("public_gists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public_gists { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("following", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stared { get; set; }
    
        [Newtonsoft.Json.JsonProperty("watched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Watched { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("profession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Profession { get; set; }
    
        [Newtonsoft.Json.JsonProperty("wechat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wechat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("qq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Qq { get; set; }
    
        [Newtonsoft.Json.JsonProperty("linkedin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Linkedin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserInfo>(data);
        }
    
    }
    
    /// <summary>更新授权用户所管理的组织资料</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GroupDetail 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("members_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Members_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("follow_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Follow_count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public { get; set; }
    
        [Newtonsoft.Json.JsonProperty("enterprise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Enterprise { get; set; }
    
        [Newtonsoft.Json.JsonProperty("members", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Members { get; set; }
    
        [Newtonsoft.Json.JsonProperty("public_repos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public_repos { get; set; }
    
        [Newtonsoft.Json.JsonProperty("private_repos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Private_repos { get; set; }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static GroupDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupDetail>(data);
        }
    
    }
    
    /// <summary>列出指定组织的所有关注者</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GroupFollowers 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followers_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followers_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("following_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Following_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gists_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gists_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("starred_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starred_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subscriptions_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscriptions_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("organizations_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organizations_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repos_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Repos_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("received_events_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Received_events_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followed_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Followed_at { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static GroupFollowers FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupFollowers>(data);
        }
    
    }
    
    /// <summary>修改企业成员权限或备注</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnterpriseMember 
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Active { get; set; }
    
        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }
    
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outsourced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outsourced { get; set; }
    
        [Newtonsoft.Json.JsonProperty("enterprise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnterpriseBasic Enterprise { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EnterpriseMember FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnterpriseMember>(data);
        }
    
    }
    
    /// <summary>新建周报</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeekReport 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content_html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content_html { get; set; }
    
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Year { get; set; }
    
        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Month { get; set; }
    
        [Newtonsoft.Json.JsonProperty("week_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Week_index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("week_begin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Week_begin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("week_end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Week_end { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserMini User { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static WeekReport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeekReport>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserMini 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("avatar_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Avatar_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserMini FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserMini>(data);
        }
    
    }
    
    /// <summary>获取授权用户的通知数</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserNotificationCount 
    {
        /// <summary>通知总数</summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_count { get; set; }
    
        /// <summary>通知数量</summary>
        [Newtonsoft.Json.JsonProperty("notification_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Notification_count { get; set; }
    
        /// <summary>私信数量</summary>
        [Newtonsoft.Json.JsonProperty("message_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Message_count { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserNotificationCount FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotificationCount>(data);
        }
    
    }
    
    /// <summary>列出授权用户的所有私信</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserMessageList 
    {
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_count { get; set; }
    
        /// <summary>私信列表</summary>
        [Newtonsoft.Json.JsonProperty("list", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserMessage> List { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserMessageList FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserMessageList>(data);
        }
    
    }
    
    /// <summary>获取一条私信</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserMessage 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>发送者</summary>
        [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserBasic Sender { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unread", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unread { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("html_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html_url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserMessage>(data);
        }
    
    }
    
    /// <summary>获取授权用户的全部邮箱</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserEmail 
    {
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Scope { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserEmail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserEmail>(data);
        }
    
    }
    
    /// <summary>Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"progressing")]
        Progressing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 4,
    
    }
    
    /// <summary>排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"updated")]
        Updated = 1,
    
    }
    
    /// <summary>排序方式: 升序(asc)，降序(desc)。默认: desc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的）</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"progressing")]
        Progressing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 2,
    
    }
    
    /// <summary>按递增(asc)或递减(desc)排序，默认：递减</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 1,
    
    }
    
    /// <summary>里程碑状态: open, closed, all。默认: open</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 2,
    
    }
    
    /// <summary>排序方式: due_on</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"due_on")]
        Due_on = 0,
    
    }
    
    /// <summary>里程碑状态: open, closed, all。默认: open</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 2,
    
    }
    
    /// <summary>里程碑状态: open, closed, all。默认: open</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 2,
    
    }
    
    /// <summary>Either created or updated. Default: created</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"updated")]
        Updated = 1,
    
    }
    
    /// <summary>Either asc or desc. Ignored without the sort parameter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>成员权限: 拉代码(pull)，推代码(push)，管理员(admin)。默认: push</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Permission
    {
        [System.Runtime.Serialization.EnumMember(Value = @"pull")]
        Pull = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"push")]
        Push = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"admin")]
        Admin = 2,
    
    }
    
    /// <summary>排序方式: fork的时间(newest, oldest)，star的人数(stargazers)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"newest")]
        Newest = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"oldest")]
        Oldest = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"stargazers")]
        Stargazers = 2,
    
    }
    
    /// <summary>可选。Pull Request 状态</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State6
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"merged")]
        Merged = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 3,
    
    }
    
    /// <summary>可选。排序字段，默认按创建时间</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort6
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"updated")]
        Updated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"popularity")]
        Popularity = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"long-running")]
        LongRunning = 3,
    
    }
    
    /// <summary>可选。升序/降序</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>可选。按创建时间/更新时间排序</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort7
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"updated")]
        Updated = 1,
    
    }
    
    /// <summary>可选。升序/降序</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>可选。Pull Request 状态</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State7
    {
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 0,
    
    }
    
    /// <summary>按递增(asc)或递减(desc)排序，默认：递减</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort8
    {
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 1,
    
    }
    
    /// <summary>可选。合并PR的方法，merge（合并所有提交）和 squash（扁平化分支合并）。默认为merge。</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Merge_method
    {
        [System.Runtime.Serialization.EnumMember(Value = @"merge")]
        Merge = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"squash")]
        Squash = 1,
    
    }
    
    /// <summary>筛选指定类型的通知，all：所有，event：事件通知，referer：@ 通知</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"event")]
        Event = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"referer")]
        Referer = 2,
    
    }
    
    /// <summary>筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Filter
    {
        [System.Runtime.Serialization.EnumMember(Value = @"assigned")]
        Assigned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 2,
    
    }
    
    /// <summary>Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State8
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"progressing")]
        Progressing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 4,
    
    }
    
    /// <summary>排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort9
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"updated")]
        Updated = 1,
    
    }
    
    /// <summary>排序方式: 升序(asc)，降序(desc)。默认: desc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>公开(public)、私有(private)或者所有(all)，默认: 所有(all)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Visibility
    {
        [System.Runtime.Serialization.EnumMember(Value = @"private")]
        Private = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"public")]
        Public = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 2,
    
    }
    
    /// <summary>筛选用户仓库: 其创建(owner)、个人(personal)、其为成员(member)、公开(public)、私有(private)，不能与 visibility 或 affiliation 参数一并使用，否则会报 422 错误</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Type2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"owner")]
        Owner = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"personal")]
        Personal = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"member")]
        Member = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"public")]
        Public = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"private")]
        Private = 5,
    
    }
    
    /// <summary>排序方式: 创建时间(created)，更新时间(updated)，最后推送时间(pushed)，仓库所属与名称(full_name)。默认: full_name</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort10
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"updated")]
        Updated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pushed")]
        Pushed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"full_name")]
        Full_name = 3,
    
    }
    
    /// <summary>如果sort参数为full_name，用升序(asc)。否则降序(desc)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction6
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>Git Ignore模版</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Gitignore_template
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Actionscript")]
        Actionscript = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ada")]
        Ada = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Agda")]
        Agda = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Android")]
        Android = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppEngine")]
        AppEngine = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppceleratorTitanium")]
        AppceleratorTitanium = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ArchLinuxPackages")]
        ArchLinuxPackages = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Autotools")]
        Autotools = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C++")]
        C__ = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CFWheels")]
        CFWheels = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMake")]
        CMake = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CUDA")]
        CUDA = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CakePHP")]
        CakePHP = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChefCookbook")]
        ChefCookbook = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Clojure")]
        Clojure = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CodeIgniter")]
        CodeIgniter = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CommonLisp")]
        CommonLisp = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Composer")]
        Composer = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Concrete5")]
        Concrete5 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Coq")]
        Coq = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CraftCMS")]
        CraftCMS = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dart")]
        Dart = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Delphi")]
        Delphi = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Drupal")]
        Drupal = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPiServer")]
        EPiServer = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Eagle")]
        Eagle = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elisp")]
        Elisp = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elixir")]
        Elixir = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elm")]
        Elm = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Erlang")]
        Erlang = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionEngine")]
        ExpressionEngine = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExtJs")]
        ExtJs = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fancy")]
        Fancy = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Finale")]
        Finale = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Flutter")]
        Flutter = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ForceDotCom")]
        ForceDotCom = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fortran")]
        Fortran = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FuelPHP")]
        FuelPHP = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GWT")]
        GWT = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gcov")]
        Gcov = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GitBook")]
        GitBook = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Anjuta")]
        Global_Anjuta = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Ansible")]
        Global_Ansible = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Archives")]
        Global_Archives = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Backup")]
        Global_Backup = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Bazaar")]
        Global_Bazaar = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/BricxCC")]
        Global_BricxCC = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/CVS")]
        Global_CVS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Calabash")]
        Global_Calabash = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Cloud9")]
        Global_Cloud9 = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/CodeKit")]
        Global_CodeKit = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/DartEditor")]
        Global_DartEditor = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Diff")]
        Global_Diff = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Dreamweaver")]
        Global_Dreamweaver = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Dropbox")]
        Global_Dropbox = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Eclipse")]
        Global_Eclipse = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/EiffelStudio")]
        Global_EiffelStudio = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Emacs")]
        Global_Emacs = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Ensime")]
        Global_Ensime = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Espresso")]
        Global_Espresso = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/FlexBuilder")]
        Global_FlexBuilder = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/GPG")]
        Global_GPG = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Images")]
        Global_Images = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/JDeveloper")]
        Global_JDeveloper = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/JEnv")]
        Global_JEnv = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/JetBrains")]
        Global_JetBrains = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/KDevelop4")]
        Global_KDevelop4 = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Kate")]
        Global_Kate = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Lazarus")]
        Global_Lazarus = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/LibreOffice")]
        Global_LibreOffice = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Linux")]
        Global_Linux = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/LyX")]
        Global_LyX = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/MATLAB")]
        Global_MATLAB = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Mercurial")]
        Global_Mercurial = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/MicrosoftOffice")]
        Global_MicrosoftOffice = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/ModelSim")]
        Global_ModelSim = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Momentics")]
        Global_Momentics = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/MonoDevelop")]
        Global_MonoDevelop = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/NetBeans")]
        Global_NetBeans = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Ninja")]
        Global_Ninja = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/NotepadPP")]
        Global_NotepadPP = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Octave")]
        Global_Octave = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Otto")]
        Global_Otto = 85,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/PSoCCreator")]
        Global_PSoCCreator = 86,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Patch")]
        Global_Patch = 87,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/PuTTY")]
        Global_PuTTY = 88,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Redcar")]
        Global_Redcar = 89,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Redis")]
        Global_Redis = 90,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SBT")]
        Global_SBT = 91,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SVN")]
        Global_SVN = 92,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SlickEdit")]
        Global_SlickEdit = 93,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Stata")]
        Global_Stata = 94,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SublimeText")]
        Global_SublimeText = 95,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SynopsysVCS")]
        Global_SynopsysVCS = 96,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Tags")]
        Global_Tags = 97,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/TextMate")]
        Global_TextMate = 98,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/TortoiseGit")]
        Global_TortoiseGit = 99,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Vagrant")]
        Global_Vagrant = 100,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Vim")]
        Global_Vim = 101,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/VirtualEnv")]
        Global_VirtualEnv = 102,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Virtuoso")]
        Global_Virtuoso = 103,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/VisualStudioCode")]
        Global_VisualStudioCode = 104,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/WebMethods")]
        Global_WebMethods = 105,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Windows")]
        Global_Windows = 106,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Xcode")]
        Global_Xcode = 107,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/XilinxISE")]
        Global_XilinxISE = 108,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/macOS")]
        Global_macOS = 109,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Go")]
        Go = 110,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Godot")]
        Godot = 111,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gradle")]
        Gradle = 112,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Grails")]
        Grails = 113,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Haskell")]
        Haskell = 114,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IGORPro")]
        IGORPro = 115,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Idris")]
        Idris = 116,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JBoss")]
        JBoss = 117,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Java")]
        Java = 118,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Jekyll")]
        Jekyll = 119,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Joomla")]
        Joomla = 120,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Julia")]
        Julia = 121,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KiCad")]
        KiCad = 122,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kohana")]
        Kohana = 123,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kotlin")]
        Kotlin = 124,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LabVIEW")]
        LabVIEW = 125,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Laravel")]
        Laravel = 126,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Leiningen")]
        Leiningen = 127,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LemonStand")]
        LemonStand = 128,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lilypond")]
        Lilypond = 129,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lithium")]
        Lithium = 130,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lua")]
        Lua = 131,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Magento")]
        Magento = 132,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maven")]
        Maven = 133,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury")]
        Mercury = 134,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MetaProgrammingSystem")]
        MetaProgrammingSystem = 135,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MiniProgram")]
        MiniProgram = 136,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nanoc")]
        Nanoc = 137,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nim")]
        Nim = 138,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 139,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OCaml")]
        OCaml = 140,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Objective-C")]
        ObjectiveC = 141,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Opa")]
        Opa = 142,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OpenCart")]
        OpenCart = 143,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OracleForms")]
        OracleForms = 144,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Packer")]
        Packer = 145,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Perl")]
        Perl = 146,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Perl6")]
        Perl6 = 147,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Phalcon")]
        Phalcon = 148,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PlayFramework")]
        PlayFramework = 149,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Plone")]
        Plone = 150,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prestashop")]
        Prestashop = 151,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 152,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PureScript")]
        PureScript = 153,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Python")]
        Python = 154,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Qooxdoo")]
        Qooxdoo = 155,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Qt")]
        Qt = 156,
    
        [System.Runtime.Serialization.EnumMember(Value = @"R")]
        R = 157,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ROS")]
        ROS = 158,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rails")]
        Rails = 159,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RhodesRhomobile")]
        RhodesRhomobile = 160,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ruby")]
        Ruby = 161,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rust")]
        Rust = 162,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SCons")]
        SCons = 163,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sass")]
        Sass = 164,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scala")]
        Scala = 165,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scheme")]
        Scheme = 166,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scrivener")]
        Scrivener = 167,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sdcc")]
        Sdcc = 168,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SeamGen")]
        SeamGen = 169,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SketchUp")]
        SketchUp = 170,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Smalltalk")]
        Smalltalk = 171,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stella")]
        Stella = 172,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SugarCRM")]
        SugarCRM = 173,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Swift")]
        Swift = 174,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Symfony")]
        Symfony = 175,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SymphonyCMS")]
        SymphonyCMS = 176,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TeX")]
        TeX = 177,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Terraform")]
        Terraform = 178,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Textpattern")]
        Textpattern = 179,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TurboGears2")]
        TurboGears2 = 180,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Typo3")]
        Typo3 = 181,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Umbraco")]
        Umbraco = 182,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unity")]
        Unity = 183,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UnrealEngine")]
        UnrealEngine = 184,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VVVV")]
        VVVV = 185,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VisualStudio")]
        VisualStudio = 186,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Waf")]
        Waf = 187,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WordPress")]
        WordPress = 188,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Xojo")]
        Xojo = 189,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yeoman")]
        Yeoman = 190,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yii")]
        Yii = 191,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZendFramework")]
        ZendFramework = 192,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zephir")]
        Zephir = 193,
    
    }
    
    /// <summary>License模版</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum License_template
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MulanPSL-1.0")]
        MulanPSL1_0 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MulanPSL-2.0")]
        MulanPSL2_0 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"0BSD")]
        _0BSD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AFL-3.0")]
        AFL3_0 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AGPL-3.0")]
        AGPL3_0 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Apache-2.0")]
        Apache2_0 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Artistic-2.0")]
        Artistic2_0 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-2-Clause")]
        BSD2Clause = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-3-Clause")]
        BSD3Clause = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-3-Clause-Clear")]
        BSD3ClauseClear = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSL-1.0")]
        BSL1_0 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC-BY-4.0")]
        CCBY4_0 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC-BY-SA-4.0")]
        CCBYSA4_0 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC0-1.0")]
        CC01_0 = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ECL-2.0")]
        ECL2_0 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPL-1.0")]
        EPL1_0 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPL-2.0")]
        EPL2_0 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUPL-1.1")]
        EUPL1_1 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUPL-1.2")]
        EUPL1_2 = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GPL-2.0")]
        GPL2_0 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GPL-3.0")]
        GPL3_0 = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISC")]
        ISC = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LGPL-2.1")]
        LGPL2_1 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LGPL-3.0")]
        LGPL3_0 = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LPPL-1.3c")]
        LPPL1_3c = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MIT")]
        MIT = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MPL-2.0")]
        MPL2_0 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MS-PL")]
        MSPL = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MS-RL")]
        MSRL = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NCSA")]
        NCSA = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFL-1.1")]
        OFL1_1 = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OSL-3.0")]
        OSL3_0 = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostgreSQL")]
        PostgreSQL = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPL-1.0")]
        UPL1_0 = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unlicense")]
        Unlicense = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WTFPL")]
        WTFPL = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zlib")]
        Zlib = 36,
    
    }
    
    /// <summary>参与方式: project(所有参与仓库的namepsce)、intrant(所加入的namespace)、all(包含前两者)，默认(intrant)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Mode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"intrant")]
        Intrant = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 2,
    
    }
    
    /// <summary>根据仓库创建时间(created)或最后推送时间(updated)进行排序，默认：创建时间</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort11
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"last_push")]
        Last_push = 1,
    
    }
    
    /// <summary>按递增(asc)或递减(desc)排序，默认：递减</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction7
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>根据仓库创建时间(created)或最后推送时间(updated)进行排序，默认：创建时间</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort12
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"last_push")]
        Last_push = 1,
    
    }
    
    /// <summary>按递增(asc)或递减(desc)排序，默认：递减</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction8
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>watch策略, watching: 关注所有动态, ignoring: 关注但不提醒动态</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Watch_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"watching")]
        Watching = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ignoring")]
        Ignoring = 1,
    
    }
    
    /// <summary>用户创建的仓库(owner)，用户个人仓库(personal)，用户为仓库成员(member)，所有(all)。默认: 所有(all)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Type3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"owner")]
        Owner = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"personal")]
        Personal = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"member")]
        Member = 3,
    
    }
    
    /// <summary>排序方式: 创建时间(created)，更新时间(updated)，最后推送时间(pushed)，仓库所属与名称(full_name)。默认: full_name</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort13
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"updated")]
        Updated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pushed")]
        Pushed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"full_name")]
        Full_name = 3,
    
    }
    
    /// <summary>如果sort参数为full_name，用升序(asc)。否则降序(desc)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction9
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>根据仓库创建时间(created)或最后推送时间(updated)进行排序，默认：创建时间</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort14
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"last_push")]
        Last_push = 1,
    
    }
    
    /// <summary>按递增(asc)或递减(desc)排序，默认：递减</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction10
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>根据仓库创建时间(created)或最后推送时间(updated)进行排序，默认：创建时间</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort15
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"last_push")]
        Last_push = 1,
    
    }
    
    /// <summary>按递增(asc)或递减(desc)排序，默认：递减</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction11
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>根据角色筛选成员</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Role
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"admin")]
        Admin = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"member")]
        Member = 2,
    
    }
    
    /// <summary>筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Filter2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"assigned")]
        Assigned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 2,
    
    }
    
    /// <summary>Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State9
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"progressing")]
        Progressing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 4,
    
    }
    
    /// <summary>排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort16
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"updated")]
        Updated = 1,
    
    }
    
    /// <summary>排序方式: 升序(asc)，降序(desc)。默认: desc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction12
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>筛选仓库的类型，可以是 all, public, private。默认: all</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Type4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"public")]
        Public = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"private")]
        Private = 2,
    
    }
    
    /// <summary>仓库开源类型。0(私有), 1(外部开源), 2(内部开源)，注：与private互斥，以public为主。</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Public
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
    }
    
    /// <summary>Git Ignore模版</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Gitignore_template2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Actionscript")]
        Actionscript = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ada")]
        Ada = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Agda")]
        Agda = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Android")]
        Android = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppEngine")]
        AppEngine = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppceleratorTitanium")]
        AppceleratorTitanium = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ArchLinuxPackages")]
        ArchLinuxPackages = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Autotools")]
        Autotools = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C++")]
        C__ = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CFWheels")]
        CFWheels = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMake")]
        CMake = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CUDA")]
        CUDA = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CakePHP")]
        CakePHP = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChefCookbook")]
        ChefCookbook = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Clojure")]
        Clojure = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CodeIgniter")]
        CodeIgniter = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CommonLisp")]
        CommonLisp = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Composer")]
        Composer = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Concrete5")]
        Concrete5 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Coq")]
        Coq = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CraftCMS")]
        CraftCMS = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dart")]
        Dart = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Delphi")]
        Delphi = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Drupal")]
        Drupal = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPiServer")]
        EPiServer = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Eagle")]
        Eagle = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elisp")]
        Elisp = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elixir")]
        Elixir = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elm")]
        Elm = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Erlang")]
        Erlang = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionEngine")]
        ExpressionEngine = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExtJs")]
        ExtJs = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fancy")]
        Fancy = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Finale")]
        Finale = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Flutter")]
        Flutter = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ForceDotCom")]
        ForceDotCom = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fortran")]
        Fortran = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FuelPHP")]
        FuelPHP = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GWT")]
        GWT = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gcov")]
        Gcov = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GitBook")]
        GitBook = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Anjuta")]
        Global_Anjuta = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Ansible")]
        Global_Ansible = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Archives")]
        Global_Archives = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Backup")]
        Global_Backup = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Bazaar")]
        Global_Bazaar = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/BricxCC")]
        Global_BricxCC = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/CVS")]
        Global_CVS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Calabash")]
        Global_Calabash = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Cloud9")]
        Global_Cloud9 = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/CodeKit")]
        Global_CodeKit = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/DartEditor")]
        Global_DartEditor = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Diff")]
        Global_Diff = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Dreamweaver")]
        Global_Dreamweaver = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Dropbox")]
        Global_Dropbox = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Eclipse")]
        Global_Eclipse = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/EiffelStudio")]
        Global_EiffelStudio = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Emacs")]
        Global_Emacs = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Ensime")]
        Global_Ensime = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Espresso")]
        Global_Espresso = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/FlexBuilder")]
        Global_FlexBuilder = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/GPG")]
        Global_GPG = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Images")]
        Global_Images = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/JDeveloper")]
        Global_JDeveloper = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/JEnv")]
        Global_JEnv = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/JetBrains")]
        Global_JetBrains = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/KDevelop4")]
        Global_KDevelop4 = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Kate")]
        Global_Kate = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Lazarus")]
        Global_Lazarus = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/LibreOffice")]
        Global_LibreOffice = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Linux")]
        Global_Linux = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/LyX")]
        Global_LyX = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/MATLAB")]
        Global_MATLAB = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Mercurial")]
        Global_Mercurial = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/MicrosoftOffice")]
        Global_MicrosoftOffice = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/ModelSim")]
        Global_ModelSim = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Momentics")]
        Global_Momentics = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/MonoDevelop")]
        Global_MonoDevelop = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/NetBeans")]
        Global_NetBeans = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Ninja")]
        Global_Ninja = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/NotepadPP")]
        Global_NotepadPP = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Octave")]
        Global_Octave = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Otto")]
        Global_Otto = 85,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/PSoCCreator")]
        Global_PSoCCreator = 86,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Patch")]
        Global_Patch = 87,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/PuTTY")]
        Global_PuTTY = 88,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Redcar")]
        Global_Redcar = 89,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Redis")]
        Global_Redis = 90,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SBT")]
        Global_SBT = 91,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SVN")]
        Global_SVN = 92,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SlickEdit")]
        Global_SlickEdit = 93,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Stata")]
        Global_Stata = 94,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SublimeText")]
        Global_SublimeText = 95,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SynopsysVCS")]
        Global_SynopsysVCS = 96,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Tags")]
        Global_Tags = 97,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/TextMate")]
        Global_TextMate = 98,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/TortoiseGit")]
        Global_TortoiseGit = 99,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Vagrant")]
        Global_Vagrant = 100,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Vim")]
        Global_Vim = 101,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/VirtualEnv")]
        Global_VirtualEnv = 102,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Virtuoso")]
        Global_Virtuoso = 103,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/VisualStudioCode")]
        Global_VisualStudioCode = 104,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/WebMethods")]
        Global_WebMethods = 105,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Windows")]
        Global_Windows = 106,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Xcode")]
        Global_Xcode = 107,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/XilinxISE")]
        Global_XilinxISE = 108,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/macOS")]
        Global_macOS = 109,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Go")]
        Go = 110,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Godot")]
        Godot = 111,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gradle")]
        Gradle = 112,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Grails")]
        Grails = 113,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Haskell")]
        Haskell = 114,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IGORPro")]
        IGORPro = 115,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Idris")]
        Idris = 116,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JBoss")]
        JBoss = 117,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Java")]
        Java = 118,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Jekyll")]
        Jekyll = 119,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Joomla")]
        Joomla = 120,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Julia")]
        Julia = 121,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KiCad")]
        KiCad = 122,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kohana")]
        Kohana = 123,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kotlin")]
        Kotlin = 124,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LabVIEW")]
        LabVIEW = 125,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Laravel")]
        Laravel = 126,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Leiningen")]
        Leiningen = 127,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LemonStand")]
        LemonStand = 128,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lilypond")]
        Lilypond = 129,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lithium")]
        Lithium = 130,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lua")]
        Lua = 131,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Magento")]
        Magento = 132,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maven")]
        Maven = 133,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury")]
        Mercury = 134,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MetaProgrammingSystem")]
        MetaProgrammingSystem = 135,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MiniProgram")]
        MiniProgram = 136,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nanoc")]
        Nanoc = 137,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nim")]
        Nim = 138,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 139,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OCaml")]
        OCaml = 140,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Objective-C")]
        ObjectiveC = 141,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Opa")]
        Opa = 142,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OpenCart")]
        OpenCart = 143,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OracleForms")]
        OracleForms = 144,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Packer")]
        Packer = 145,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Perl")]
        Perl = 146,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Perl6")]
        Perl6 = 147,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Phalcon")]
        Phalcon = 148,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PlayFramework")]
        PlayFramework = 149,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Plone")]
        Plone = 150,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prestashop")]
        Prestashop = 151,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 152,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PureScript")]
        PureScript = 153,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Python")]
        Python = 154,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Qooxdoo")]
        Qooxdoo = 155,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Qt")]
        Qt = 156,
    
        [System.Runtime.Serialization.EnumMember(Value = @"R")]
        R = 157,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ROS")]
        ROS = 158,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rails")]
        Rails = 159,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RhodesRhomobile")]
        RhodesRhomobile = 160,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ruby")]
        Ruby = 161,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rust")]
        Rust = 162,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SCons")]
        SCons = 163,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sass")]
        Sass = 164,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scala")]
        Scala = 165,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scheme")]
        Scheme = 166,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scrivener")]
        Scrivener = 167,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sdcc")]
        Sdcc = 168,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SeamGen")]
        SeamGen = 169,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SketchUp")]
        SketchUp = 170,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Smalltalk")]
        Smalltalk = 171,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stella")]
        Stella = 172,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SugarCRM")]
        SugarCRM = 173,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Swift")]
        Swift = 174,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Symfony")]
        Symfony = 175,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SymphonyCMS")]
        SymphonyCMS = 176,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TeX")]
        TeX = 177,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Terraform")]
        Terraform = 178,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Textpattern")]
        Textpattern = 179,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TurboGears2")]
        TurboGears2 = 180,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Typo3")]
        Typo3 = 181,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Umbraco")]
        Umbraco = 182,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unity")]
        Unity = 183,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UnrealEngine")]
        UnrealEngine = 184,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VVVV")]
        VVVV = 185,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VisualStudio")]
        VisualStudio = 186,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Waf")]
        Waf = 187,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WordPress")]
        WordPress = 188,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Xojo")]
        Xojo = 189,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yeoman")]
        Yeoman = 190,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yii")]
        Yii = 191,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZendFramework")]
        ZendFramework = 192,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zephir")]
        Zephir = 193,
    
    }
    
    /// <summary>License模版</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum License_template2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MulanPSL-1.0")]
        MulanPSL1_0 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MulanPSL-2.0")]
        MulanPSL2_0 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"0BSD")]
        _0BSD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AFL-3.0")]
        AFL3_0 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AGPL-3.0")]
        AGPL3_0 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Apache-2.0")]
        Apache2_0 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Artistic-2.0")]
        Artistic2_0 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-2-Clause")]
        BSD2Clause = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-3-Clause")]
        BSD3Clause = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-3-Clause-Clear")]
        BSD3ClauseClear = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSL-1.0")]
        BSL1_0 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC-BY-4.0")]
        CCBY4_0 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC-BY-SA-4.0")]
        CCBYSA4_0 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC0-1.0")]
        CC01_0 = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ECL-2.0")]
        ECL2_0 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPL-1.0")]
        EPL1_0 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPL-2.0")]
        EPL2_0 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUPL-1.1")]
        EUPL1_1 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUPL-1.2")]
        EUPL1_2 = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GPL-2.0")]
        GPL2_0 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GPL-3.0")]
        GPL3_0 = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISC")]
        ISC = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LGPL-2.1")]
        LGPL2_1 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LGPL-3.0")]
        LGPL3_0 = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LPPL-1.3c")]
        LPPL1_3c = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MIT")]
        MIT = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MPL-2.0")]
        MPL2_0 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MS-PL")]
        MSPL = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MS-RL")]
        MSRL = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NCSA")]
        NCSA = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFL-1.1")]
        OFL1_1 = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OSL-3.0")]
        OSL3_0 = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostgreSQL")]
        PostgreSQL = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPL-1.0")]
        UPL1_0 = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unlicense")]
        Unlicense = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WTFPL")]
        WTFPL = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zlib")]
        Zlib = 36,
    
    }
    
    /// <summary>设置用户在组织的角色</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Role2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"admin")]
        Admin = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"member")]
        Member = 1,
    
    }
    
    /// <summary>筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Filter3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"assigned")]
        Assigned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 2,
    
    }
    
    /// <summary>Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State10
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"progressing")]
        Progressing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 4,
    
    }
    
    /// <summary>排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort17
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"updated")]
        Updated = 1,
    
    }
    
    /// <summary>排序方式: 升序(asc)，降序(desc)。默认: desc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction13
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State11
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"progressing")]
        Progressing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
        Rejected = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 4,
    
    }
    
    /// <summary>排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort18
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"updated")]
        Updated = 1,
    
    }
    
    /// <summary>排序方式: 升序(asc)，降序(desc)。默认: desc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction14
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>根据角色筛选成员</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Role3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"admin")]
        Admin = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"member")]
        Member = 2,
    
    }
    
    /// <summary>企业角色：member =&gt; 普通成员, outsourced =&gt; 外包成员, admin =&gt; 管理员</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Role4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"admin")]
        Admin = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"member")]
        Member = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"outsourced")]
        Outsourced = 2,
    
    }
    
    /// <summary>Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的）</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State12
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"progressing")]
        Progressing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 2,
    
    }
    
    /// <summary>筛选仓库的类型，可以是 all, public, internal, private。默认: all</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Type5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"public")]
        Public = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"internal")]
        Internal = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"private")]
        Private = 3,
    
    }
    
    /// <summary>Git Ignore模版</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Gitignore_template3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Actionscript")]
        Actionscript = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ada")]
        Ada = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Agda")]
        Agda = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Android")]
        Android = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppEngine")]
        AppEngine = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppceleratorTitanium")]
        AppceleratorTitanium = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ArchLinuxPackages")]
        ArchLinuxPackages = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Autotools")]
        Autotools = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C++")]
        C__ = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CFWheels")]
        CFWheels = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMake")]
        CMake = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CUDA")]
        CUDA = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CakePHP")]
        CakePHP = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChefCookbook")]
        ChefCookbook = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Clojure")]
        Clojure = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CodeIgniter")]
        CodeIgniter = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CommonLisp")]
        CommonLisp = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Composer")]
        Composer = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Concrete5")]
        Concrete5 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Coq")]
        Coq = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CraftCMS")]
        CraftCMS = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dart")]
        Dart = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Delphi")]
        Delphi = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Drupal")]
        Drupal = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPiServer")]
        EPiServer = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Eagle")]
        Eagle = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elisp")]
        Elisp = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elixir")]
        Elixir = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elm")]
        Elm = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Erlang")]
        Erlang = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionEngine")]
        ExpressionEngine = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExtJs")]
        ExtJs = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fancy")]
        Fancy = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Finale")]
        Finale = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Flutter")]
        Flutter = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ForceDotCom")]
        ForceDotCom = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fortran")]
        Fortran = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FuelPHP")]
        FuelPHP = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GWT")]
        GWT = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gcov")]
        Gcov = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GitBook")]
        GitBook = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Anjuta")]
        Global_Anjuta = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Ansible")]
        Global_Ansible = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Archives")]
        Global_Archives = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Backup")]
        Global_Backup = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Bazaar")]
        Global_Bazaar = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/BricxCC")]
        Global_BricxCC = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/CVS")]
        Global_CVS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Calabash")]
        Global_Calabash = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Cloud9")]
        Global_Cloud9 = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/CodeKit")]
        Global_CodeKit = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/DartEditor")]
        Global_DartEditor = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Diff")]
        Global_Diff = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Dreamweaver")]
        Global_Dreamweaver = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Dropbox")]
        Global_Dropbox = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Eclipse")]
        Global_Eclipse = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/EiffelStudio")]
        Global_EiffelStudio = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Emacs")]
        Global_Emacs = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Ensime")]
        Global_Ensime = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Espresso")]
        Global_Espresso = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/FlexBuilder")]
        Global_FlexBuilder = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/GPG")]
        Global_GPG = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Images")]
        Global_Images = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/JDeveloper")]
        Global_JDeveloper = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/JEnv")]
        Global_JEnv = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/JetBrains")]
        Global_JetBrains = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/KDevelop4")]
        Global_KDevelop4 = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Kate")]
        Global_Kate = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Lazarus")]
        Global_Lazarus = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/LibreOffice")]
        Global_LibreOffice = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Linux")]
        Global_Linux = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/LyX")]
        Global_LyX = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/MATLAB")]
        Global_MATLAB = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Mercurial")]
        Global_Mercurial = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/MicrosoftOffice")]
        Global_MicrosoftOffice = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/ModelSim")]
        Global_ModelSim = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Momentics")]
        Global_Momentics = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/MonoDevelop")]
        Global_MonoDevelop = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/NetBeans")]
        Global_NetBeans = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Ninja")]
        Global_Ninja = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/NotepadPP")]
        Global_NotepadPP = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Octave")]
        Global_Octave = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Otto")]
        Global_Otto = 85,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/PSoCCreator")]
        Global_PSoCCreator = 86,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Patch")]
        Global_Patch = 87,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/PuTTY")]
        Global_PuTTY = 88,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Redcar")]
        Global_Redcar = 89,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Redis")]
        Global_Redis = 90,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SBT")]
        Global_SBT = 91,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SVN")]
        Global_SVN = 92,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SlickEdit")]
        Global_SlickEdit = 93,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Stata")]
        Global_Stata = 94,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SublimeText")]
        Global_SublimeText = 95,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/SynopsysVCS")]
        Global_SynopsysVCS = 96,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Tags")]
        Global_Tags = 97,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/TextMate")]
        Global_TextMate = 98,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/TortoiseGit")]
        Global_TortoiseGit = 99,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Vagrant")]
        Global_Vagrant = 100,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Vim")]
        Global_Vim = 101,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/VirtualEnv")]
        Global_VirtualEnv = 102,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Virtuoso")]
        Global_Virtuoso = 103,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/VisualStudioCode")]
        Global_VisualStudioCode = 104,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/WebMethods")]
        Global_WebMethods = 105,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Windows")]
        Global_Windows = 106,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/Xcode")]
        Global_Xcode = 107,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/XilinxISE")]
        Global_XilinxISE = 108,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global/macOS")]
        Global_macOS = 109,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Go")]
        Go = 110,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Godot")]
        Godot = 111,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gradle")]
        Gradle = 112,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Grails")]
        Grails = 113,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Haskell")]
        Haskell = 114,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IGORPro")]
        IGORPro = 115,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Idris")]
        Idris = 116,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JBoss")]
        JBoss = 117,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Java")]
        Java = 118,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Jekyll")]
        Jekyll = 119,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Joomla")]
        Joomla = 120,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Julia")]
        Julia = 121,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KiCad")]
        KiCad = 122,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kohana")]
        Kohana = 123,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kotlin")]
        Kotlin = 124,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LabVIEW")]
        LabVIEW = 125,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Laravel")]
        Laravel = 126,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Leiningen")]
        Leiningen = 127,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LemonStand")]
        LemonStand = 128,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lilypond")]
        Lilypond = 129,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lithium")]
        Lithium = 130,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lua")]
        Lua = 131,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Magento")]
        Magento = 132,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maven")]
        Maven = 133,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury")]
        Mercury = 134,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MetaProgrammingSystem")]
        MetaProgrammingSystem = 135,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MiniProgram")]
        MiniProgram = 136,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nanoc")]
        Nanoc = 137,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nim")]
        Nim = 138,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 139,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OCaml")]
        OCaml = 140,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Objective-C")]
        ObjectiveC = 141,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Opa")]
        Opa = 142,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OpenCart")]
        OpenCart = 143,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OracleForms")]
        OracleForms = 144,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Packer")]
        Packer = 145,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Perl")]
        Perl = 146,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Perl6")]
        Perl6 = 147,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Phalcon")]
        Phalcon = 148,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PlayFramework")]
        PlayFramework = 149,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Plone")]
        Plone = 150,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prestashop")]
        Prestashop = 151,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 152,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PureScript")]
        PureScript = 153,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Python")]
        Python = 154,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Qooxdoo")]
        Qooxdoo = 155,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Qt")]
        Qt = 156,
    
        [System.Runtime.Serialization.EnumMember(Value = @"R")]
        R = 157,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ROS")]
        ROS = 158,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rails")]
        Rails = 159,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RhodesRhomobile")]
        RhodesRhomobile = 160,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ruby")]
        Ruby = 161,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rust")]
        Rust = 162,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SCons")]
        SCons = 163,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sass")]
        Sass = 164,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scala")]
        Scala = 165,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scheme")]
        Scheme = 166,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scrivener")]
        Scrivener = 167,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sdcc")]
        Sdcc = 168,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SeamGen")]
        SeamGen = 169,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SketchUp")]
        SketchUp = 170,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Smalltalk")]
        Smalltalk = 171,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stella")]
        Stella = 172,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SugarCRM")]
        SugarCRM = 173,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Swift")]
        Swift = 174,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Symfony")]
        Symfony = 175,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SymphonyCMS")]
        SymphonyCMS = 176,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TeX")]
        TeX = 177,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Terraform")]
        Terraform = 178,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Textpattern")]
        Textpattern = 179,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TurboGears2")]
        TurboGears2 = 180,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Typo3")]
        Typo3 = 181,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Umbraco")]
        Umbraco = 182,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unity")]
        Unity = 183,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UnrealEngine")]
        UnrealEngine = 184,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VVVV")]
        VVVV = 185,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VisualStudio")]
        VisualStudio = 186,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Waf")]
        Waf = 187,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WordPress")]
        WordPress = 188,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Xojo")]
        Xojo = 189,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yeoman")]
        Yeoman = 190,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yii")]
        Yii = 191,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZendFramework")]
        ZendFramework = 192,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zephir")]
        Zephir = 193,
    
    }
    
    /// <summary>License模版</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum License_template3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MulanPSL-1.0")]
        MulanPSL1_0 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MulanPSL-2.0")]
        MulanPSL2_0 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"0BSD")]
        _0BSD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AFL-3.0")]
        AFL3_0 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AGPL-3.0")]
        AGPL3_0 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Apache-2.0")]
        Apache2_0 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Artistic-2.0")]
        Artistic2_0 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-2-Clause")]
        BSD2Clause = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-3-Clause")]
        BSD3Clause = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-3-Clause-Clear")]
        BSD3ClauseClear = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSL-1.0")]
        BSL1_0 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC-BY-4.0")]
        CCBY4_0 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC-BY-SA-4.0")]
        CCBYSA4_0 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC0-1.0")]
        CC01_0 = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ECL-2.0")]
        ECL2_0 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPL-1.0")]
        EPL1_0 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPL-2.0")]
        EPL2_0 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUPL-1.1")]
        EUPL1_1 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUPL-1.2")]
        EUPL1_2 = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GPL-2.0")]
        GPL2_0 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GPL-3.0")]
        GPL3_0 = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISC")]
        ISC = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LGPL-2.1")]
        LGPL2_1 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LGPL-3.0")]
        LGPL3_0 = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LPPL-1.3c")]
        LPPL1_3c = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MIT")]
        MIT = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MPL-2.0")]
        MPL2_0 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MS-PL")]
        MSPL = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MS-RL")]
        MSRL = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NCSA")]
        NCSA = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFL-1.1")]
        OFL1_1 = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OSL-3.0")]
        OSL3_0 = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostgreSQL")]
        PostgreSQL = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPL-1.0")]
        UPL1_0 = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unlicense")]
        Unlicense = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WTFPL")]
        WTFPL = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zlib")]
        Zlib = 36,
    
    }
    
    /// <summary>仓库开源类型。0(私有), 1(外部开源), 2(内部开源)。默认: 0</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Private
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
    }
    
    /// <summary>企业角色：member =&gt; 普通成员, outsourced =&gt; 外包成员, admin =&gt; 管理员</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Role5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"admin")]
        Admin = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"member")]
        Member = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"outsourced")]
        Outsourced = 2,
    
    }
    
    /// <summary>.gitignore 模板名</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Name
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Actionscript")]
        Actionscript = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ada")]
        Ada = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Agda")]
        Agda = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Android")]
        Android = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppEngine")]
        AppEngine = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppceleratorTitanium")]
        AppceleratorTitanium = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ArchLinuxPackages")]
        ArchLinuxPackages = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Autotools")]
        Autotools = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C++")]
        C__ = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CFWheels")]
        CFWheels = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMake")]
        CMake = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CUDA")]
        CUDA = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CakePHP")]
        CakePHP = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChefCookbook")]
        ChefCookbook = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Clojure")]
        Clojure = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CodeIgniter")]
        CodeIgniter = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CommonLisp")]
        CommonLisp = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Composer")]
        Composer = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Concrete5")]
        Concrete5 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Coq")]
        Coq = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CraftCMS")]
        CraftCMS = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dart")]
        Dart = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Delphi")]
        Delphi = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Drupal")]
        Drupal = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPiServer")]
        EPiServer = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Eagle")]
        Eagle = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elisp")]
        Elisp = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elixir")]
        Elixir = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elm")]
        Elm = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Erlang")]
        Erlang = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionEngine")]
        ExpressionEngine = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExtJs")]
        ExtJs = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fancy")]
        Fancy = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Finale")]
        Finale = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Flutter")]
        Flutter = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ForceDotCom")]
        ForceDotCom = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fortran")]
        Fortran = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FuelPHP")]
        FuelPHP = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GWT")]
        GWT = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gcov")]
        Gcov = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GitBook")]
        GitBook = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Anjuta")]
        Anjuta = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ansible")]
        Ansible = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Archives")]
        Archives = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Backup")]
        Backup = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bazaar")]
        Bazaar = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BricxCC")]
        BricxCC = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CVS")]
        CVS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Calabash")]
        Calabash = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cloud9")]
        Cloud9 = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CodeKit")]
        CodeKit = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DartEditor")]
        DartEditor = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Diff")]
        Diff = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dreamweaver")]
        Dreamweaver = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dropbox")]
        Dropbox = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Eclipse")]
        Eclipse = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EiffelStudio")]
        EiffelStudio = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Emacs")]
        Emacs = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ensime")]
        Ensime = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Espresso")]
        Espresso = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FlexBuilder")]
        FlexBuilder = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GPG")]
        GPG = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Images")]
        Images = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JDeveloper")]
        JDeveloper = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JEnv")]
        JEnv = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JetBrains")]
        JetBrains = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KDevelop4")]
        KDevelop4 = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kate")]
        Kate = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lazarus")]
        Lazarus = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LibreOffice")]
        LibreOffice = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Linux")]
        Linux = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LyX")]
        LyX = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MATLAB")]
        MATLAB = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercurial")]
        Mercurial = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MicrosoftOffice")]
        MicrosoftOffice = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ModelSim")]
        ModelSim = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Momentics")]
        Momentics = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MonoDevelop")]
        MonoDevelop = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NetBeans")]
        NetBeans = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ninja")]
        Ninja = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotepadPP")]
        NotepadPP = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Octave")]
        Octave = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Otto")]
        Otto = 85,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PSoCCreator")]
        PSoCCreator = 86,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Patch")]
        Patch = 87,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PuTTY")]
        PuTTY = 88,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Redcar")]
        Redcar = 89,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Redis")]
        Redis = 90,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SBT")]
        SBT = 91,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SVN")]
        SVN = 92,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SlickEdit")]
        SlickEdit = 93,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stata")]
        Stata = 94,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SublimeText")]
        SublimeText = 95,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SynopsysVCS")]
        SynopsysVCS = 96,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tags")]
        Tags = 97,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TextMate")]
        TextMate = 98,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TortoiseGit")]
        TortoiseGit = 99,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vagrant")]
        Vagrant = 100,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vim")]
        Vim = 101,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VirtualEnv")]
        VirtualEnv = 102,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virtuoso")]
        Virtuoso = 103,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VisualStudioCode")]
        VisualStudioCode = 104,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WebMethods")]
        WebMethods = 105,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 106,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Xcode")]
        Xcode = 107,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XilinxISE")]
        XilinxISE = 108,
    
        [System.Runtime.Serialization.EnumMember(Value = @"macOS")]
        MacOS = 109,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Go")]
        Go = 110,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Godot")]
        Godot = 111,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gradle")]
        Gradle = 112,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Grails")]
        Grails = 113,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Haskell")]
        Haskell = 114,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IGORPro")]
        IGORPro = 115,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Idris")]
        Idris = 116,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JBoss")]
        JBoss = 117,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Java")]
        Java = 118,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Jekyll")]
        Jekyll = 119,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Joomla")]
        Joomla = 120,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Julia")]
        Julia = 121,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KiCad")]
        KiCad = 122,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kohana")]
        Kohana = 123,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kotlin")]
        Kotlin = 124,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LabVIEW")]
        LabVIEW = 125,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Laravel")]
        Laravel = 126,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Leiningen")]
        Leiningen = 127,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LemonStand")]
        LemonStand = 128,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lilypond")]
        Lilypond = 129,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lithium")]
        Lithium = 130,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lua")]
        Lua = 131,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Magento")]
        Magento = 132,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maven")]
        Maven = 133,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury")]
        Mercury = 134,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MetaProgrammingSystem")]
        MetaProgrammingSystem = 135,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MiniProgram")]
        MiniProgram = 136,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nanoc")]
        Nanoc = 137,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nim")]
        Nim = 138,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 139,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OCaml")]
        OCaml = 140,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Objective-C")]
        ObjectiveC = 141,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Opa")]
        Opa = 142,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OpenCart")]
        OpenCart = 143,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OracleForms")]
        OracleForms = 144,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Packer")]
        Packer = 145,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Perl")]
        Perl = 146,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Perl6")]
        Perl6 = 147,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Phalcon")]
        Phalcon = 148,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PlayFramework")]
        PlayFramework = 149,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Plone")]
        Plone = 150,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prestashop")]
        Prestashop = 151,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 152,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PureScript")]
        PureScript = 153,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Python")]
        Python = 154,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Qooxdoo")]
        Qooxdoo = 155,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Qt")]
        Qt = 156,
    
        [System.Runtime.Serialization.EnumMember(Value = @"R")]
        R = 157,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ROS")]
        ROS = 158,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rails")]
        Rails = 159,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RhodesRhomobile")]
        RhodesRhomobile = 160,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ruby")]
        Ruby = 161,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rust")]
        Rust = 162,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SCons")]
        SCons = 163,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sass")]
        Sass = 164,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scala")]
        Scala = 165,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scheme")]
        Scheme = 166,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scrivener")]
        Scrivener = 167,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sdcc")]
        Sdcc = 168,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SeamGen")]
        SeamGen = 169,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SketchUp")]
        SketchUp = 170,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Smalltalk")]
        Smalltalk = 171,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stella")]
        Stella = 172,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SugarCRM")]
        SugarCRM = 173,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Swift")]
        Swift = 174,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Symfony")]
        Symfony = 175,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SymphonyCMS")]
        SymphonyCMS = 176,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TeX")]
        TeX = 177,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Terraform")]
        Terraform = 178,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Textpattern")]
        Textpattern = 179,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TurboGears2")]
        TurboGears2 = 180,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Typo3")]
        Typo3 = 181,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Umbraco")]
        Umbraco = 182,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unity")]
        Unity = 183,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UnrealEngine")]
        UnrealEngine = 184,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VVVV")]
        VVVV = 185,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VisualStudio")]
        VisualStudio = 186,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Waf")]
        Waf = 187,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WordPress")]
        WordPress = 188,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Xojo")]
        Xojo = 189,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yeoman")]
        Yeoman = 190,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yii")]
        Yii = 191,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZendFramework")]
        ZendFramework = 192,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zephir")]
        Zephir = 193,
    
    }
    
    /// <summary>.gitignore 模板名</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Name2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Actionscript")]
        Actionscript = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ada")]
        Ada = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Agda")]
        Agda = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Android")]
        Android = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppEngine")]
        AppEngine = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppceleratorTitanium")]
        AppceleratorTitanium = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ArchLinuxPackages")]
        ArchLinuxPackages = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Autotools")]
        Autotools = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C++")]
        C__ = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CFWheels")]
        CFWheels = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMake")]
        CMake = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CUDA")]
        CUDA = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CakePHP")]
        CakePHP = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChefCookbook")]
        ChefCookbook = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Clojure")]
        Clojure = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CodeIgniter")]
        CodeIgniter = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CommonLisp")]
        CommonLisp = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Composer")]
        Composer = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Concrete5")]
        Concrete5 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Coq")]
        Coq = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CraftCMS")]
        CraftCMS = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dart")]
        Dart = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Delphi")]
        Delphi = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Drupal")]
        Drupal = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPiServer")]
        EPiServer = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Eagle")]
        Eagle = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elisp")]
        Elisp = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elixir")]
        Elixir = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elm")]
        Elm = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Erlang")]
        Erlang = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionEngine")]
        ExpressionEngine = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExtJs")]
        ExtJs = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fancy")]
        Fancy = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Finale")]
        Finale = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Flutter")]
        Flutter = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ForceDotCom")]
        ForceDotCom = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fortran")]
        Fortran = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FuelPHP")]
        FuelPHP = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GWT")]
        GWT = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gcov")]
        Gcov = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GitBook")]
        GitBook = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Anjuta")]
        Anjuta = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ansible")]
        Ansible = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Archives")]
        Archives = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Backup")]
        Backup = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bazaar")]
        Bazaar = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BricxCC")]
        BricxCC = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CVS")]
        CVS = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Calabash")]
        Calabash = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cloud9")]
        Cloud9 = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CodeKit")]
        CodeKit = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DartEditor")]
        DartEditor = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Diff")]
        Diff = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dreamweaver")]
        Dreamweaver = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dropbox")]
        Dropbox = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Eclipse")]
        Eclipse = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EiffelStudio")]
        EiffelStudio = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Emacs")]
        Emacs = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ensime")]
        Ensime = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Espresso")]
        Espresso = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FlexBuilder")]
        FlexBuilder = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GPG")]
        GPG = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Images")]
        Images = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JDeveloper")]
        JDeveloper = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JEnv")]
        JEnv = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JetBrains")]
        JetBrains = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KDevelop4")]
        KDevelop4 = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kate")]
        Kate = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lazarus")]
        Lazarus = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LibreOffice")]
        LibreOffice = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Linux")]
        Linux = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LyX")]
        LyX = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MATLAB")]
        MATLAB = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercurial")]
        Mercurial = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MicrosoftOffice")]
        MicrosoftOffice = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ModelSim")]
        ModelSim = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Momentics")]
        Momentics = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MonoDevelop")]
        MonoDevelop = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NetBeans")]
        NetBeans = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ninja")]
        Ninja = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotepadPP")]
        NotepadPP = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Octave")]
        Octave = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Otto")]
        Otto = 85,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PSoCCreator")]
        PSoCCreator = 86,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Patch")]
        Patch = 87,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PuTTY")]
        PuTTY = 88,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Redcar")]
        Redcar = 89,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Redis")]
        Redis = 90,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SBT")]
        SBT = 91,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SVN")]
        SVN = 92,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SlickEdit")]
        SlickEdit = 93,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stata")]
        Stata = 94,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SublimeText")]
        SublimeText = 95,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SynopsysVCS")]
        SynopsysVCS = 96,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tags")]
        Tags = 97,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TextMate")]
        TextMate = 98,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TortoiseGit")]
        TortoiseGit = 99,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vagrant")]
        Vagrant = 100,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vim")]
        Vim = 101,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VirtualEnv")]
        VirtualEnv = 102,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virtuoso")]
        Virtuoso = 103,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VisualStudioCode")]
        VisualStudioCode = 104,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WebMethods")]
        WebMethods = 105,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 106,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Xcode")]
        Xcode = 107,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XilinxISE")]
        XilinxISE = 108,
    
        [System.Runtime.Serialization.EnumMember(Value = @"macOS")]
        MacOS = 109,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Go")]
        Go = 110,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Godot")]
        Godot = 111,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gradle")]
        Gradle = 112,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Grails")]
        Grails = 113,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Haskell")]
        Haskell = 114,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IGORPro")]
        IGORPro = 115,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Idris")]
        Idris = 116,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JBoss")]
        JBoss = 117,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Java")]
        Java = 118,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Jekyll")]
        Jekyll = 119,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Joomla")]
        Joomla = 120,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Julia")]
        Julia = 121,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KiCad")]
        KiCad = 122,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kohana")]
        Kohana = 123,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kotlin")]
        Kotlin = 124,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LabVIEW")]
        LabVIEW = 125,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Laravel")]
        Laravel = 126,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Leiningen")]
        Leiningen = 127,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LemonStand")]
        LemonStand = 128,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lilypond")]
        Lilypond = 129,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lithium")]
        Lithium = 130,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lua")]
        Lua = 131,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Magento")]
        Magento = 132,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maven")]
        Maven = 133,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mercury")]
        Mercury = 134,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MetaProgrammingSystem")]
        MetaProgrammingSystem = 135,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MiniProgram")]
        MiniProgram = 136,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nanoc")]
        Nanoc = 137,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nim")]
        Nim = 138,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 139,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OCaml")]
        OCaml = 140,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Objective-C")]
        ObjectiveC = 141,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Opa")]
        Opa = 142,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OpenCart")]
        OpenCart = 143,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OracleForms")]
        OracleForms = 144,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Packer")]
        Packer = 145,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Perl")]
        Perl = 146,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Perl6")]
        Perl6 = 147,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Phalcon")]
        Phalcon = 148,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PlayFramework")]
        PlayFramework = 149,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Plone")]
        Plone = 150,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prestashop")]
        Prestashop = 151,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 152,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PureScript")]
        PureScript = 153,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Python")]
        Python = 154,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Qooxdoo")]
        Qooxdoo = 155,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Qt")]
        Qt = 156,
    
        [System.Runtime.Serialization.EnumMember(Value = @"R")]
        R = 157,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ROS")]
        ROS = 158,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rails")]
        Rails = 159,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RhodesRhomobile")]
        RhodesRhomobile = 160,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ruby")]
        Ruby = 161,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rust")]
        Rust = 162,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SCons")]
        SCons = 163,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sass")]
        Sass = 164,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scala")]
        Scala = 165,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scheme")]
        Scheme = 166,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scrivener")]
        Scrivener = 167,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sdcc")]
        Sdcc = 168,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SeamGen")]
        SeamGen = 169,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SketchUp")]
        SketchUp = 170,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Smalltalk")]
        Smalltalk = 171,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stella")]
        Stella = 172,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SugarCRM")]
        SugarCRM = 173,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Swift")]
        Swift = 174,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Symfony")]
        Symfony = 175,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SymphonyCMS")]
        SymphonyCMS = 176,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TeX")]
        TeX = 177,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Terraform")]
        Terraform = 178,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Textpattern")]
        Textpattern = 179,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TurboGears2")]
        TurboGears2 = 180,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Typo3")]
        Typo3 = 181,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Umbraco")]
        Umbraco = 182,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unity")]
        Unity = 183,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UnrealEngine")]
        UnrealEngine = 184,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VVVV")]
        VVVV = 185,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VisualStudio")]
        VisualStudio = 186,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Waf")]
        Waf = 187,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WordPress")]
        WordPress = 188,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Xojo")]
        Xojo = 189,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yeoman")]
        Yeoman = 190,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yii")]
        Yii = 191,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZendFramework")]
        ZendFramework = 192,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zephir")]
        Zephir = 193,
    
    }
    
    /// <summary>协议名称</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum License
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MulanPSL-1.0")]
        MulanPSL1_0 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MulanPSL-2.0")]
        MulanPSL2_0 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"0BSD")]
        _0BSD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AFL-3.0")]
        AFL3_0 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AGPL-3.0")]
        AGPL3_0 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Apache-2.0")]
        Apache2_0 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Artistic-2.0")]
        Artistic2_0 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-2-Clause")]
        BSD2Clause = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-3-Clause")]
        BSD3Clause = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-3-Clause-Clear")]
        BSD3ClauseClear = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSL-1.0")]
        BSL1_0 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC-BY-4.0")]
        CCBY4_0 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC-BY-SA-4.0")]
        CCBYSA4_0 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC0-1.0")]
        CC01_0 = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ECL-2.0")]
        ECL2_0 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPL-1.0")]
        EPL1_0 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPL-2.0")]
        EPL2_0 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUPL-1.1")]
        EUPL1_1 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUPL-1.2")]
        EUPL1_2 = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GPL-2.0")]
        GPL2_0 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GPL-3.0")]
        GPL3_0 = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISC")]
        ISC = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LGPL-2.1")]
        LGPL2_1 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LGPL-3.0")]
        LGPL3_0 = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LPPL-1.3c")]
        LPPL1_3c = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MIT")]
        MIT = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MPL-2.0")]
        MPL2_0 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MS-PL")]
        MSPL = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MS-RL")]
        MSRL = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NCSA")]
        NCSA = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFL-1.1")]
        OFL1_1 = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OSL-3.0")]
        OSL3_0 = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostgreSQL")]
        PostgreSQL = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPL-1.0")]
        UPL1_0 = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unlicense")]
        Unlicense = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WTFPL")]
        WTFPL = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zlib")]
        Zlib = 36,
    
    }
    
    /// <summary>协议名称</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum License2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MulanPSL-1.0")]
        MulanPSL1_0 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MulanPSL-2.0")]
        MulanPSL2_0 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"0BSD")]
        _0BSD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AFL-3.0")]
        AFL3_0 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AGPL-3.0")]
        AGPL3_0 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Apache-2.0")]
        Apache2_0 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Artistic-2.0")]
        Artistic2_0 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-2-Clause")]
        BSD2Clause = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-3-Clause")]
        BSD3Clause = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSD-3-Clause-Clear")]
        BSD3ClauseClear = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSL-1.0")]
        BSL1_0 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC-BY-4.0")]
        CCBY4_0 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC-BY-SA-4.0")]
        CCBYSA4_0 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC0-1.0")]
        CC01_0 = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ECL-2.0")]
        ECL2_0 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPL-1.0")]
        EPL1_0 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPL-2.0")]
        EPL2_0 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUPL-1.1")]
        EUPL1_1 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUPL-1.2")]
        EUPL1_2 = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GPL-2.0")]
        GPL2_0 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GPL-3.0")]
        GPL3_0 = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISC")]
        ISC = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LGPL-2.1")]
        LGPL2_1 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LGPL-3.0")]
        LGPL3_0 = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LPPL-1.3c")]
        LPPL1_3c = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MIT")]
        MIT = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MPL-2.0")]
        MPL2_0 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MS-PL")]
        MSPL = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MS-RL")]
        MSRL = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NCSA")]
        NCSA = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFL-1.1")]
        OFL1_1 = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OSL-3.0")]
        OSL3_0 = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostgreSQL")]
        PostgreSQL = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPL-1.0")]
        UPL1_0 = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unlicense")]
        Unlicense = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WTFPL")]
        WTFPL = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zlib")]
        Zlib = 36,
    
    }
    
    /// <summary>可选。Pull Request 状态</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State13
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"merged")]
        Merged = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 3,
    
    }
    
    /// <summary>可选。排序字段，默认按创建时间</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort19
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"updated")]
        Updated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"popularity")]
        Popularity = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"long-running")]
        LongRunning = 3,
    
    }
    
    /// <summary>可选。升序/降序</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction15
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>筛选指定语言的仓库</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Language
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Java")]
        Java = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JavaScript")]
        JavaScript = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
        PHP = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Python")]
        Python = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C#")]
        C_ = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Android")]
        Android = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Objective-C")]
        ObjectiveC = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Go")]
        Go = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C++")]
        C__ = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HTML")]
        HTML = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeJS")]
        NodeJS = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Swift")]
        Swift = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TypeScript")]
        TypeScript = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ruby")]
        Ruby = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shell")]
        Shell = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dart")]
        Dart = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CSS")]
        CSS = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Docker")]
        Docker = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lua")]
        Lua = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scala")]
        Scala = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Matlab")]
        Matlab = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Delphi")]
        Delphi = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rust")]
        Rust = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Visual Basic")]
        Visual_Basic = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TeX/LaTeX")]
        TeX_LaTeX = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ASP")]
        ASP = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Verilog")]
        Verilog = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Groovy")]
        Groovy = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"R")]
        R = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActionScript")]
        ActionScript = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Erlang")]
        Erlang = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VimL")]
        VimL = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Perl")]
        Perl = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Arduino")]
        Arduino = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Assembly")]
        Assembly = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FORTRAN")]
        FORTRAN = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QML")]
        QML = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PowerShell")]
        PowerShell = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pascal")]
        Pascal = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Emacs Lisp")]
        Emacs_Lisp = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Clojure")]
        Clojure = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CoffeeScript")]
        CoffeeScript = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Julia")]
        Julia = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AutoHotkey")]
        AutoHotkey = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VHDL")]
        VHDL = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elixir")]
        Elixir = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Haskell")]
        Haskell = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"M")]
        M = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scheme")]
        Scheme = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XSLT")]
        XSLT = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Common Lisp")]
        Common_Lisp = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Racket")]
        Racket = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Logos")]
        Logos = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OCaml")]
        OCaml = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOT")]
        DOT = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Coq")]
        Coq = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vala")]
        Vala = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Haxe")]
        Haxe = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Puppet")]
        Puppet = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LiveScript")]
        LiveScript = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prolog")]
        Prolog = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Smalltalk")]
        Smalltalk = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nemerle")]
        Nemerle = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Eiffel")]
        Eiffel = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Standard ML")]
        Standard_ML = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"eC")]
        EC = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ada")]
        Ada = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scilab")]
        Scilab = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Slash")]
        Slash = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Awk")]
        Awk = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ColdFusion")]
        ColdFusion = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"wechat")]
        Wechat = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Crystal")]
        Crystal = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kotlin")]
        Kotlin = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SQL")]
        SQL = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lisp")]
        Lisp = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XML")]
        XML = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C/C++")]
        C_C__ = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HTML/CSS")]
        HTML_CSS = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"易语言")]
        易语言 = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"汇编")]
        汇编 = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pawn")]
        Pawn = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zephir")]
        Zephir = 85,
    
    }
    
    /// <summary>排序字段，last_push_at(更新时间)、stars_count(收藏数)、forks_count(Fork 数)、watches_count(关注数)，默认为最佳匹配</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort20
    {
        [System.Runtime.Serialization.EnumMember(Value = @"last_push_at")]
        Last_push_at = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"stars_count")]
        Stars_count = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"forks_count")]
        Forks_count = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"watches_count")]
        Watches_count = 3,
    
    }
    
    /// <summary>排序顺序: desc(default)、asc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Order
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>筛选指定语言的 issues</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Language2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Java")]
        Java = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JavaScript")]
        JavaScript = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
        PHP = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Python")]
        Python = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C#")]
        C_ = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Android")]
        Android = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Objective-C")]
        ObjectiveC = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Go")]
        Go = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C++")]
        C__ = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HTML")]
        HTML = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NodeJS")]
        NodeJS = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Swift")]
        Swift = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TypeScript")]
        TypeScript = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ruby")]
        Ruby = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shell")]
        Shell = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dart")]
        Dart = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CSS")]
        CSS = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Docker")]
        Docker = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lua")]
        Lua = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scala")]
        Scala = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Matlab")]
        Matlab = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Delphi")]
        Delphi = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rust")]
        Rust = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Visual Basic")]
        Visual_Basic = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TeX/LaTeX")]
        TeX_LaTeX = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ASP")]
        ASP = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Verilog")]
        Verilog = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Groovy")]
        Groovy = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"R")]
        R = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActionScript")]
        ActionScript = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Erlang")]
        Erlang = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VimL")]
        VimL = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Perl")]
        Perl = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Arduino")]
        Arduino = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Assembly")]
        Assembly = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FORTRAN")]
        FORTRAN = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QML")]
        QML = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PowerShell")]
        PowerShell = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pascal")]
        Pascal = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Emacs Lisp")]
        Emacs_Lisp = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Clojure")]
        Clojure = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CoffeeScript")]
        CoffeeScript = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Julia")]
        Julia = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AutoHotkey")]
        AutoHotkey = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VHDL")]
        VHDL = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elixir")]
        Elixir = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Haskell")]
        Haskell = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"M")]
        M = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scheme")]
        Scheme = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XSLT")]
        XSLT = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Common Lisp")]
        Common_Lisp = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Racket")]
        Racket = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Logos")]
        Logos = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OCaml")]
        OCaml = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOT")]
        DOT = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Coq")]
        Coq = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vala")]
        Vala = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Haxe")]
        Haxe = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Puppet")]
        Puppet = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LiveScript")]
        LiveScript = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prolog")]
        Prolog = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Smalltalk")]
        Smalltalk = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nemerle")]
        Nemerle = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Eiffel")]
        Eiffel = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Standard ML")]
        Standard_ML = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"eC")]
        EC = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ada")]
        Ada = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scilab")]
        Scilab = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Slash")]
        Slash = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Awk")]
        Awk = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ColdFusion")]
        ColdFusion = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"wechat")]
        Wechat = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Crystal")]
        Crystal = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kotlin")]
        Kotlin = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SQL")]
        SQL = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lisp")]
        Lisp = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"XML")]
        XML = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C/C++")]
        C_C__ = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HTML/CSS")]
        HTML_CSS = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"易语言")]
        易语言 = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"汇编")]
        汇编 = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pawn")]
        Pawn = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zephir")]
        Zephir = 85,
    
    }
    
    /// <summary>筛选指定状态的 issues, open(开启)、closed(完成)、rejected(拒绝)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum State14
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"progressing")]
        Progressing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
        Rejected = 3,
    
    }
    
    /// <summary>排序字段，created_at(创建时间)、last_push_at(更新时间)、notes_count(评论数)，默认为最佳匹配</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort21
    {
        [System.Runtime.Serialization.EnumMember(Value = @"created_at")]
        Created_at = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"updated_at")]
        Updated_at = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"notes_count")]
        Notes_count = 2,
    
    }
    
    /// <summary>排序顺序: desc(default)、asc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Order2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>排序字段，joined_at(注册时间)，默认为最佳匹配</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort22
    {
        [System.Runtime.Serialization.EnumMember(Value = @"joined_at")]
        Joined_at = 0,
    
    }
    
    /// <summary>排序顺序: desc(default)、asc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Order3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>筛选指定类型的通知，all：所有，event：事件通知，referer：@ 通知</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Type6
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"event")]
        Event = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"referer")]
        Referer = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108